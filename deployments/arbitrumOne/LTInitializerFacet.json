{
  "address": "0x34EcA24309FE08031065Fde528DE6fCc96cFE5B5",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegatedCallsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "HasNoRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "l1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "l2",
          "type": "uint256"
        }
      ],
      "name": "IncorrectLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IntervalsMustBeSorted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "distributionReceivers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "distributionReceiversShares",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "distributionDurationPoints",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "amountsPerEpochs",
          "type": "uint256[][]"
        }
      ],
      "name": "setupInflation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setupTokenInfoAndEstablishAutocracy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f4b996d2b8a36d943d859d1c2a10ccdf97322680a428ab311e851f89d40d967",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x729F2222aaCD99619B8B660b412baE9fCEa3d90F",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "15949319",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x52c7729bc58eb78c35561f41a8bf3d45b10881f21381a415d86593dc5f68a54d",
    "transactionHash": "0x7f4b996d2b8a36d943d859d1c2a10ccdf97322680a428ab311e851f89d40d967",
    "logs": [],
    "blockNumber": 188068927,
    "cumulativeGasUsed": "15949319",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "5bf87c20a7a451fc9a5e9e94ad3c8095",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegatedCallsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"HasNoRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2\",\"type\":\"uint256\"}],\"name\":\"IncorrectLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntervalsMustBeSorted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"distributionReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distributionReceiversShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"distributionDurationPoints\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amountsPerEpochs\",\"type\":\"uint256[][]\"}],\"name\":\"setupInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setupTokenInfoAndEstablishAutocracy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"initialize(address)\":{\"params\":{\"owner\":\"An address who can end and rule autocracy, and mint inflation of LCS tokens.\"}},\"setupInflation(address[],uint256[],uint32[],uint256[][])\":{\"params\":{\"amountsPerEpochs\":\"An amount of Locus Tokens to be minted per epoch.\",\"distributionDurationPoints\":\"Durations from the start of inflation.  (If time between epochs is constant, like month for example, then all of the values would be equal to month is seconds.)\",\"distributionReceivers\":\"Addresses of receivers (ex. Locus Staking or Vault Token Staking contracts.)\",\"distributionReceiversShares\":\"Shares of addresses of `distributionReceivers`.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address)\":{\"notice\":\"An initializer function for Locus Token owner and starting state of the inflation.\"},\"setupInflation(address[],uint256[],uint32[],uint256[][])\":{\"notice\":\"A setter function for Locus Token inflation receivers.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamonds/locusToken/v1/LTInitializerFacet.sol\":\"LTInitializerFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PausabilityLib.sol\\\";\\r\\nimport \\\"../libraries/InitializerLib.sol\\\";\\r\\nimport \\\"../libraries/RolesManagementLib.sol\\\";\\r\\n\\r\\nabstract contract BaseFacet is Initializable {\\r\\n    error DelegatedCallsOnly();\\r\\n    \\r\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\r\\n    address internal immutable __self = address(this);\\r\\n\\r\\n    function enforceDelegatedOnly() internal view {\\r\\n        if (address(this) == __self || !InitializerLib.get().initialized) {\\r\\n            revert DelegatedCallsOnly();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\\r\\n    /// optimization - the modifier uses an internal function call.\\r\\n    modifier delegatedOnly {\\r\\n        enforceDelegatedOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier internalOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2a062649afde4b46419cf35b5662c3fa217d03656ebd83d83751c57fde0b3c90\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary InitializerLib {\\r\\n    error AlreadyInitialized();\\r\\n    error NotImplemented();\\r\\n\\r\\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.initializer\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() internal {\\r\\n        get().initialized = false;\\r\\n    }\\r\\n\\r\\n    function initialize() internal {\\r\\n        if (get().initialized) {\\r\\n            revert AlreadyInitialized();\\r\\n        } else {\\r\\n            get().initialized = true;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc0f1dacbaff19bbca3f59fe381f195906a7d5d87b17f27d5f81c8f3affbf4060\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PausabilityLib {\\r\\n    error OnlyWhenNotPaused();\\r\\n    \\r\\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.pausability\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool paused;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x99306f533b5797bd58d92b2ac976324d14b61b7b426c90083f2f060f75863686\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary RolesManagementLib {\\r\\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\\r\\n\\r\\n    error HasNoRole(address who, bytes32 role);\\r\\n    error HasNoRoles(address who, bytes32[] roles);\\r\\n\\r\\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.roles\\\");\\r\\n\\r\\n    // roles to check with EOA\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\n\\r\\n    // A special role - must not be removed.\\r\\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\\r\\n\\r\\n    // roles to check with smart-contracts\\r\\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceRole(address who, bytes32 role) internal view {\\r\\n        if (role == INTERNAL_ROLE) {\\r\\n            if (who != address(this)) {\\r\\n                revert HasNoRole(who, INTERNAL_ROLE);\\r\\n            }\\r\\n        } else if (!get().roles[role][who]) {\\r\\n            revert HasNoRole(who, role);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\\r\\n        return get().roles[role][who];\\r\\n    }\\r\\n\\r\\n    function enforceSenderRole(bytes32 role) internal view {\\r\\n        enforceRole(msg.sender, role);\\r\\n    }\\r\\n\\r\\n    function grantRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = true; \\r\\n        emit RoleSet(who, role, true);\\r\\n    }\\r\\n\\r\\n    function revokeRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = false; \\r\\n        emit RoleSet(who, role, false);\\r\\n    }\\r\\n\\r\\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\\r\\n        bool result;\\r\\n        for (uint256 i = 0; i < roles.length; i++) {\\r\\n            if (roles[i] == INTERNAL_ROLE) {\\r\\n                result = result || who == address(this);\\r\\n            } else {\\r\\n                result = result || get().roles[roles[i]][who];\\r\\n            }\\r\\n        }\\r\\n        if (!result) {\\r\\n            revert HasNoRoles(who, roles);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\\r\\n        enforceEitherOfRoles(msg.sender, roles);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63362b8189cb9c1cec32aade5a5fdf3b2548761cf124dfe8ded723569ce2c00d\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/TDLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary TDLib {\\r\\n    error InvalidOffset(uint256 offset);\\r\\n    error IntervalsMustBeSorted();\\r\\n    error NothingWasFound();\\r\\n    error IncorrectLengths(uint256 l1, uint256 l2);\\r\\n\\r\\n    event ReceiverAltered(\\r\\n        address indexed receiver,\\r\\n        uint256 indexed share,\\r\\n        bool indexed isBlocked,\\r\\n        uint256 sumOfShares\\r\\n    );\\r\\n    event Distributed(\\r\\n        uint256 indexed distributedValue,\\r\\n        uint256 indexed tokensLeftAndSentToGovernance\\r\\n    );\\r\\n\\r\\n    bytes32 constant LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus.token_distribution\\\");\\r\\n\\r\\n    uint16 public constant MAX_BPS = 10000;\\r\\n\\r\\n    struct DistributionReceiver {\\r\\n        uint256 share;\\r\\n        uint256 previousShare;\\r\\n        address receiver;\\r\\n        bool isBlocked;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(address => uint32) startTimestamps;\\r\\n        uint32[] distributionDurationPoints;\\r\\n        mapping(uint256 => uint256) distributionDurationPointIdxToAmounts;\\r\\n        DistributionReceiver[] distributionReceivers;\\r\\n        uint256 sumOfShares;\\r\\n        address undistributedAmountsReceiver;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAmountToDistribute(\\r\\n        address entity\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 distributionAmount,\\r\\n            uint256 distributionDurationPointIdx\\r\\n        )\\r\\n    {\\r\\n        uint32 startStakingTime = get().startTimestamps[entity];\\r\\n        if (block.timestamp >= startStakingTime) {\\r\\n            uint32 timeCounter = startStakingTime;\\r\\n            uint256 distributionDurationPointsLen = get()\\r\\n                .distributionDurationPoints\\r\\n                .length;\\r\\n            uint256 idx;\\r\\n            for (idx; idx < distributionDurationPointsLen; idx++) {\\r\\n                uint32 distributionDurationPoint = get()\\r\\n                    .distributionDurationPoints[idx];\\r\\n                if (block.timestamp < timeCounter + distributionDurationPoint) {\\r\\n                    break;\\r\\n                } else {\\r\\n                    timeCounter += distributionDurationPoint;\\r\\n                }\\r\\n            }\\r\\n            distributionAmount = get().distributionDurationPointIdxToAmounts[\\r\\n                idx\\r\\n            ];\\r\\n            distributionDurationPointIdx = idx;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec0c54a4544c5bb3b0612f25c6e2f64ad6badd938305e80fcc914811cb6e9f0\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/v1/interfaces/ITDManagementFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ITDManagementFacet {\\r\\n    function addReceiver(\\r\\n        address feeReceiver,\\r\\n        uint256 share,\\r\\n        bool status\\r\\n    ) external;\\r\\n\\r\\n    function setReceiverShare(address feeReceiver, uint256 share) external;\\r\\n\\r\\n    function setReceiverStatus(address feeReceiver, bool status) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc4edf88c2c6c72ff2b3042c4066b34f6645d55fd8940f1c1a23d48166b27bd02\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/LTLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary LTLib {\\r\\n    error EpochIsDistributed(uint256 epochNumber);\\r\\n\\r\\n    event EpochAmountIsEmptyOrInflationHasntStarted();\\r\\n\\r\\n    bytes32 constant LOCUS_TOKEN_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus_token\\\");\\r\\n\\r\\n    bytes32 public constant ALLOWANCE_FREE_ROLE = keccak256('ALLOWANCE_FREE_ROLE');\\r\\n\\r\\n    string public constant originalName = \\\"Locus Token\\\";\\r\\n    string public constant originalSymbol = \\\"LOCUS\\\";\\r\\n\\r\\n    uint256 public constant INITIAL_SUPPLY = 15_000_000 ether;\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(uint256 => bool) isEpochsInflationDistributed;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x79be5f244ba3d13285515eebd392ce2473e18fde2522435849cfd6a5251998da\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/LTInitializerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./interfaces/ILTERC20Facet.sol\\\";\\r\\nimport \\\"./interfaces/ILTInitializerFacet.sol\\\";\\r\\nimport \\\"../LTLib.sol\\\";\\r\\nimport \\\"../../facetsFramework/diamondBase/facets/BaseFacet.sol\\\";\\r\\nimport \\\"../../facetsFramework/tokensDistributor/TDLib.sol\\\";\\r\\nimport \\\"../../facetsFramework/tokensDistributor/v1/interfaces/ITDManagementFacet.sol\\\";\\r\\n\\r\\nimport \\\"./autocracy/interfaces/ILTAutocracyFacet.sol\\\";\\r\\nimport \\\"./autocracy/libraries/AutocracyLib.sol\\\";\\r\\n\\r\\ncontract LTInitializerFacet is BaseFacet, ILTInitializerFacet {\\r\\n    function initialize(address owner) external override {\\r\\n        InitializerLib.initialize();\\r\\n        TDLib.Storage storage s = TDLib.get();\\r\\n        // Initialize the start of inflation.\\r\\n        // address(0) is utilized because for every receiver we have one time of inflation start.\\r\\n        s.startTimestamps[address(0)] = uint32(block.timestamp);\\r\\n        s.undistributedAmountsReceiver = owner;\\r\\n\\r\\n        RolesManagementLib.grantRole(owner, RolesManagementLib.OWNER_ROLE);\\r\\n        RolesManagementLib.grantRole(owner, AutocracyLib.REVOLUTIONARY_ROLE);\\r\\n        RolesManagementLib.grantRole(owner, AutocracyLib.AUTOCRAT_ROLE);\\r\\n    }\\r\\n\\r\\n    function setupTokenInfoAndEstablishAutocracy() external override delegatedOnly {\\r\\n        // WARNING: AN INITIALIZER MODIFIER PREVENTS DOUBLE CALL\\r\\n        ILTERC20Facet(address(this)).setupTokenInfo();\\r\\n        ILTAutocracyFacet(address(this)).establishAutocracy();\\r\\n    }\\r\\n\\r\\n    function setupInflation(\\r\\n        address[] calldata distributionReceivers,\\r\\n        uint256[] calldata distributionReceiversShares,\\r\\n        uint32[] calldata distributionDurationPoints,\\r\\n        uint256[][] calldata amountsPerEpochs\\r\\n    ) external override delegatedOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.OWNER_ROLE);\\r\\n        if (distributionReceivers.length == 0) {\\r\\n            revert TDLib.IncorrectLengths(distributionReceivers.length, 0);\\r\\n        }\\r\\n        if (\\r\\n            distributionReceivers.length != distributionReceiversShares.length\\r\\n        ) {\\r\\n            revert TDLib.IncorrectLengths(\\r\\n                distributionReceivers.length,\\r\\n                distributionReceiversShares.length\\r\\n            );\\r\\n        }\\r\\n        if (amountsPerEpochs.length != distributionReceivers.length) {\\r\\n            revert TDLib.IncorrectLengths(\\r\\n                amountsPerEpochs.length,\\r\\n                distributionReceivers.length\\r\\n            );\\r\\n        }\\r\\n        if (distributionDurationPoints.length != amountsPerEpochs[0].length) {\\r\\n            revert TDLib.IncorrectLengths(\\r\\n                distributionDurationPoints.length,\\r\\n                amountsPerEpochs[0].length\\r\\n            );\\r\\n        }\\r\\n\\r\\n        TDLib.Storage storage s = TDLib.get();\\r\\n        uint32 maxDistributionPoint;\\r\\n        for (uint256 i = 0; i < distributionDurationPoints.length; i++) {\\r\\n            if (distributionDurationPoints[i] > maxDistributionPoint) {\\r\\n                maxDistributionPoint = distributionDurationPoints[i];\\r\\n            } else {\\r\\n                revert TDLib.IntervalsMustBeSorted();\\r\\n            }\\r\\n\\r\\n            // Greedily initialize the storage.\\r\\n            for (uint256 j = 0; j < distributionReceivers.length; j++) {\\r\\n                // It has to be equal to a sum of tokens belonging to every distribution receiver per epoch.\\r\\n                // This maps a duration points (an interval from startTimestamp[...] to a certain point in time represented by the duration of the interval)\\r\\n                // to an amount that has to be distributed to each epoch.\\r\\n                s.distributionDurationPointIdxToAmounts[i] = amountsPerEpochs[j][i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < distributionReceivers.length; i++) {\\r\\n            ITDManagementFacet(address(this)).addReceiver(\\r\\n                distributionReceivers[i],\\r\\n                distributionReceiversShares[i],\\r\\n                false\\r\\n            );\\r\\n        }\\r\\n        s.distributionDurationPoints = distributionDurationPoints;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x933b0beadcbe69ce62caad213bff17cbb67d1e8e6423d2bc16182d2530cb216e\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/autocracy/interfaces/ILTAutocracyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILTAutocracyFacet {\\r\\n    function establishAutocracy() external;\\r\\n\\r\\n    function defeatAutocracyForever() external;\\r\\n\\r\\n    function burn(address from, uint256 amount) external;\\r\\n\\r\\n    function mint(address who, uint256 amount) external;\\r\\n\\r\\n    function areAutocratsReign() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x92e18095ac748060f0ab66e07d0809b7d3c6b4af2372e59d9d5040de3b702928\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/autocracy/libraries/AutocracyLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary AutocracyLib {\\r\\n    bytes32 constant LOCUS_TOKEN_AUTOCRACY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus_token.autocracy\\\");\\r\\n\\r\\n    bytes32 public constant AUTOCRAT_ROLE = keccak256('AUTOCRAT_ROLE');\\r\\n    bytes32 public constant REVOLUTIONARY_ROLE = keccak256('REVOLUTIONARY_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        // True - then the tokens can be transferrable only to a restricted set of addresses.\\r\\n        bool isAutocracyEnabled;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_AUTOCRACY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xa6e9c462b62a97dbf4947d4561e2a200fd94a4d377ec2b49b753575e9e8544f7\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/interfaces/ILTERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILTERC20Facet {\\r\\n    function mintTo(address account, uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n\\r\\n    function delegateTo(address delegatee) external;\\r\\n\\r\\n    /// @notice To be able to vote for something by themselves a holder must call it first to delegate\\r\\n    /// all voting power they have to themselves.\\r\\n    function enablePolitics() external;\\r\\n\\r\\n    function getVotingPower(address account) external view returns (uint256);\\r\\n    \\r\\n    function getPastVotingPower(address account, uint256 timepoint) external view returns (uint256);\\r\\n\\r\\n    function getDelegatee(address account) external view returns (address);\\r\\n\\r\\n    function setupTokenInfo() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x89688989aa0d6b2c7e26dccdb33e8e4d477305ad8b20ff5b38ac53b7b821d98b\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/interfaces/ILTInitializerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILTInitializerFacet {\\r\\n    /// @notice An initializer function for Locus Token owner and starting state of the inflation.\\r\\n    /// @param owner An address who can end and rule autocracy, and mint inflation of LCS tokens.\\r\\n    function initialize(address owner) external;\\r\\n\\r\\n    /// @notice A setter function for Locus Token inflation receivers.\\r\\n    /// @param distributionReceivers Addresses of receivers (ex. Locus Staking or Vault Token Staking contracts.)\\r\\n    /// @param distributionReceiversShares Shares of addresses of `distributionReceivers`.\\r\\n    /// @param distributionDurationPoints Durations from the start of inflation. \\r\\n    /// (If time between epochs is constant, like month for example, then all of the values would be equal to month is seconds.)\\r\\n    /// @param amountsPerEpochs An amount of Locus Tokens to be minted per epoch.\\r\\n    function setupInflation(\\r\\n        address[] calldata distributionReceivers,\\r\\n        uint256[] calldata distributionReceiversShares,\\r\\n        uint32[] calldata distributionDurationPoints,\\r\\n        uint256[][] calldata amountsPerEpochs\\r\\n    ) external;\\r\\n\\r\\n    function setupTokenInfoAndEstablishAutocracy() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd87feb9685daf9b00607f875db37486d0713ea5b75d7641cc3eed33127defe8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a08060405234610023573060805261094890816100298239608051816107d60152f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80635681682f146102dc578063c4d66de8146100d55763f80f01771461003d57600080fd5b346100c15760003660031901126100c1576100566107d3565b303b156100c157604051636d63b6b760e01b815260008160048183305af180156100b5576100c6575b50303b156100c157604051633d3eb75560e11b815260008160048183305af180156100b5576100aa57005b6100b3906107c0565b005b6040513d6000823e3d90fd5b600080fd5b6100cf906107c0565b3861007f565b346100c1576020806003193601126100c1576004356001600160a01b03811691908290036100c1576000805160206108f38339815191529182549160ff831660001461012c5760405162dc149f60e41b8152600490fd5b6060936001859460ff1916179055600080527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a078152604060002063ffffffff421663ffffffff198254161790557ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0c8260018060a01b03198254161790556000805160206108d383398151915290816000527f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e44908181526040600020846000528152604060002060019360ff1991858382541617905560405190868252838201528460408201527fe6c553997164af80f976feb439e6566231f261c8b41e3e5070f237f827fc4432978891a186867fdf419335cd51a12d91577b23bb1f2f1d297c4dd78f8c580b21e3d68c0742aa52806000528585526040600020886000528552604060002087858254161790556040519088825285820152866040820152a17f1f5a72ff210e1987f45ef6999da4be546bb5ea71f60de5cbc44d2ddb6c29d716928360005282526040600020856000528252836040600020918254161790556040519384528301526040820152a1005b346100c15760803660031901126100c1576004356001600160401b0381116100c15761030c903690600401610790565b906024356001600160401b0381116100c15761032c903690600401610790565b916044356001600160401b0381116100c15761034c903690600401610790565b90949093906064356001600160401b0381116100c157610370903690600401610790565b906103796107d3565b3360009081527f7eab7b82f3f21675de29d098b67b1bb6d0c69de2cb1ba0b9eb1dbc18d523752f60205260409020546000805160206108d38339815191529060ff1615610772575082156107525783830361073457828203610716576103df8282610838565b905087036106ec57600091825b8884106105e9575050505060005b8181106105645786866001600160401b03811161054e57600160401b811161054e577ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a089182548284558083106104f1575b509160005260206000208160031c9160005b8381106104b15750600719811690038061047357005b9260009360005b818110610488575050500155005b90919460206104a760019261049c896108aa565b908560021b906108bb565b960192910161047a565b6000805b600881106104ca57508382015560010161045d565b959060206104e86001926104dd856108aa565b908a60021b906108bb565b920196016104b5565b836000526020600020600780850160031c8201920160031c0190601c8460021b1680610533575b505b818110610527575061044b565b6000815560010161051a565b600019908183019182549160200360031b1c16905585610518565b634e487b7160e01b600052604160045260246000fd5b61056f81838661089a565b356001600160a01b03811691908290036100c15761058e81858861089a565b35303b156100c15760405192632647d9e560e01b8452600484015260248301526000604483015260008260648183305af19182156100b5576105d5926105da575b50610875565b6103fa565b6105e3906107c0565b886105cf565b6105fc6105f7858b8d61089a565b6108aa565b63ffffffff918216911611156106da5761061a6105f7848a8c61089a565b9260005b858110610635575061062f90610875565b926103ec565b828110156106c457601e19843603018160051b85013512156100c157600581901b8401358401803591906001600160401b0383116100c157602001918060051b360383136100c1578361068b916106bf9461089a565b35836000527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a09602052604060002055610875565b61061e565b634e487b7160e01b600052603260045260246000fd5b60405163e8817d7760e01b8152600490fd5b6106f96044928892610838565b6040516305e2ada360e41b81526004810193909352602483015250fd5b50604491604051916305e2ada360e41b835260048301526024820152fd5b60448385604051916305e2ada360e41b835260048301526024820152fd5b6040516305e2ada360e41b81526004810184905260006024820152604490fd5b60449060405190632bc93d7960e21b82523360048301526024820152fd5b9181601f840112156100c1578235916001600160401b0383116100c1576020808501948460051b0101116100c157565b6001600160401b03811161054e57604052565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614801561081e575b61080c57565b604051639f357e6b60e01b8152600490fd5b5060ff6000805160206108f3833981519152541615610806565b90156106c457803590601e19813603018212156100c15701803591906001600160401b0383116100c1576020018260051b360381136100c1579190565b60001981146108845760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156106c45760051b0190565b3563ffffffff811681036100c15790565b9060031b9163ffffffff809116831b921b1916179056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005a2646970667358221220a4a8c2771378ef85f1645f0c00afc9c37c5923d656f9bb7eaeb822bfcd39e7e864736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80635681682f146102dc578063c4d66de8146100d55763f80f01771461003d57600080fd5b346100c15760003660031901126100c1576100566107d3565b303b156100c157604051636d63b6b760e01b815260008160048183305af180156100b5576100c6575b50303b156100c157604051633d3eb75560e11b815260008160048183305af180156100b5576100aa57005b6100b3906107c0565b005b6040513d6000823e3d90fd5b600080fd5b6100cf906107c0565b3861007f565b346100c1576020806003193601126100c1576004356001600160a01b03811691908290036100c1576000805160206108f38339815191529182549160ff831660001461012c5760405162dc149f60e41b8152600490fd5b6060936001859460ff1916179055600080527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a078152604060002063ffffffff421663ffffffff198254161790557ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0c8260018060a01b03198254161790556000805160206108d383398151915290816000527f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e44908181526040600020846000528152604060002060019360ff1991858382541617905560405190868252838201528460408201527fe6c553997164af80f976feb439e6566231f261c8b41e3e5070f237f827fc4432978891a186867fdf419335cd51a12d91577b23bb1f2f1d297c4dd78f8c580b21e3d68c0742aa52806000528585526040600020886000528552604060002087858254161790556040519088825285820152866040820152a17f1f5a72ff210e1987f45ef6999da4be546bb5ea71f60de5cbc44d2ddb6c29d716928360005282526040600020856000528252836040600020918254161790556040519384528301526040820152a1005b346100c15760803660031901126100c1576004356001600160401b0381116100c15761030c903690600401610790565b906024356001600160401b0381116100c15761032c903690600401610790565b916044356001600160401b0381116100c15761034c903690600401610790565b90949093906064356001600160401b0381116100c157610370903690600401610790565b906103796107d3565b3360009081527f7eab7b82f3f21675de29d098b67b1bb6d0c69de2cb1ba0b9eb1dbc18d523752f60205260409020546000805160206108d38339815191529060ff1615610772575082156107525783830361073457828203610716576103df8282610838565b905087036106ec57600091825b8884106105e9575050505060005b8181106105645786866001600160401b03811161054e57600160401b811161054e577ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a089182548284558083106104f1575b509160005260206000208160031c9160005b8381106104b15750600719811690038061047357005b9260009360005b818110610488575050500155005b90919460206104a760019261049c896108aa565b908560021b906108bb565b960192910161047a565b6000805b600881106104ca57508382015560010161045d565b959060206104e86001926104dd856108aa565b908a60021b906108bb565b920196016104b5565b836000526020600020600780850160031c8201920160031c0190601c8460021b1680610533575b505b818110610527575061044b565b6000815560010161051a565b600019908183019182549160200360031b1c16905585610518565b634e487b7160e01b600052604160045260246000fd5b61056f81838661089a565b356001600160a01b03811691908290036100c15761058e81858861089a565b35303b156100c15760405192632647d9e560e01b8452600484015260248301526000604483015260008260648183305af19182156100b5576105d5926105da575b50610875565b6103fa565b6105e3906107c0565b886105cf565b6105fc6105f7858b8d61089a565b6108aa565b63ffffffff918216911611156106da5761061a6105f7848a8c61089a565b9260005b858110610635575061062f90610875565b926103ec565b828110156106c457601e19843603018160051b85013512156100c157600581901b8401358401803591906001600160401b0383116100c157602001918060051b360383136100c1578361068b916106bf9461089a565b35836000527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a09602052604060002055610875565b61061e565b634e487b7160e01b600052603260045260246000fd5b60405163e8817d7760e01b8152600490fd5b6106f96044928892610838565b6040516305e2ada360e41b81526004810193909352602483015250fd5b50604491604051916305e2ada360e41b835260048301526024820152fd5b60448385604051916305e2ada360e41b835260048301526024820152fd5b6040516305e2ada360e41b81526004810184905260006024820152604490fd5b60449060405190632bc93d7960e21b82523360048301526024820152fd5b9181601f840112156100c1578235916001600160401b0383116100c1576020808501948460051b0101116100c157565b6001600160401b03811161054e57604052565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614801561081e575b61080c57565b604051639f357e6b60e01b8152600490fd5b5060ff6000805160206108f3833981519152541615610806565b90156106c457803590601e19813603018212156100c15701803591906001600160401b0383116100c1576020018260051b360381136100c1579190565b60001981146108845760010190565b634e487b7160e01b600052601160045260246000fd5b91908110156106c45760051b0190565b3563ffffffff811681036100c15790565b9060031b9163ffffffff809116831b921b1916179056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005a2646970667358221220a4a8c2771378ef85f1645f0c00afc9c37c5923d656f9bb7eaeb822bfcd39e7e864736f6c63430008130033",
  "libraries": [
    "TDLib",
    "LTLib",
    "InitializerLib",
    "PausabilityLib",
    "RolesManagementLib",
    "AutocracyLib"
  ],
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "initialize(address)": {
        "params": {
          "owner": "An address who can end and rule autocracy, and mint inflation of LCS tokens."
        }
      },
      "setupInflation(address[],uint256[],uint32[],uint256[][])": {
        "params": {
          "amountsPerEpochs": "An amount of Locus Tokens to be minted per epoch.",
          "distributionDurationPoints": "Durations from the start of inflation.  (If time between epochs is constant, like month for example, then all of the values would be equal to month is seconds.)",
          "distributionReceivers": "Addresses of receivers (ex. Locus Staking or Vault Token Staking contracts.)",
          "distributionReceiversShares": "Shares of addresses of `distributionReceivers`."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "initialize(address)": {
        "notice": "An initializer function for Locus Token owner and starting state of the inflation."
      },
      "setupInflation(address[],uint256[],uint32[],uint256[][])": {
        "notice": "A setter function for Locus Token inflation receivers."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 133,
        "contract": "contracts/diamonds/locusToken/v1/LTInitializerFacet.sol:LTInitializerFacet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 136,
        "contract": "contracts/diamonds/locusToken/v1/LTInitializerFacet.sol:LTInitializerFacet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}