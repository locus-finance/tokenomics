{
  "address": "0x173FF25132edD0d10CcF95Fa92f7a29F8a6ee39A",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegatedCallsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "HasNoRole",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "l1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "l2",
          "type": "uint256"
        }
      ],
      "name": "IncorrectLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IntervalsMustBeSorted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "bps",
          "type": "uint16"
        }
      ],
      "name": "InvalidBPS",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "locusToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardDistributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "feeDurationPoints",
          "type": "uint32[]"
        },
        {
          "internalType": "uint16[]",
          "name": "feeBasePoints",
          "type": "uint16[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prepareDepositary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "undistributedAmountsReceiver",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "feeDurationPoints",
          "type": "uint32[]"
        },
        {
          "internalType": "uint16[]",
          "name": "feeBasePoints",
          "type": "uint16[]"
        }
      ],
      "name": "setFeesSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc10ade1ef4350098b04dc74f2ff03c17e9936232b837f75729a97605c9a07e0a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x729F2222aaCD99619B8B660b412baE9fCEa3d90F",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "15585148",
    "logsBloom": "0x
    "blockHash": "0xd0dc934cc9bfcb2fd40fab1db129c630ca04120d72cb9d0eedb647f8a3631118",
    "transactionHash": "0xc10ade1ef4350098b04dc74f2ff03c17e9936232b837f75729a97605c9a07e0a",
    "logs": [],
    "blockNumber": 155580218,
    "cumulativeGasUsed": "15585148",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "71a7c70c354f39a1f0f05051fd5a44bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegatedCallsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"HasNoRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2\",\"type\":\"uint256\"}],\"name\":\"IncorrectLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntervalsMustBeSorted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"InvalidBPS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"locusToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"feeDurationPoints\",\"type\":\"uint32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"feeBasePoints\",\"type\":\"uint16[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareDepositary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"undistributedAmountsReceiver\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"feeDurationPoints\",\"type\":\"uint32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"feeBasePoints\",\"type\":\"uint16[]\"}],\"name\":\"setFeesSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamonds/locusStaking/v1/LSInitializerFacet.sol\":\"LSInitializerFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PausabilityLib.sol\\\";\\r\\nimport \\\"../libraries/InitializerLib.sol\\\";\\r\\nimport \\\"../libraries/RolesManagementLib.sol\\\";\\r\\n\\r\\nabstract contract BaseFacet is Initializable {\\r\\n    error DelegatedCallsOnly();\\r\\n    \\r\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\r\\n    address internal immutable __self = address(this);\\r\\n\\r\\n    function enforceDelegatedOnly() internal view {\\r\\n        if (address(this) == __self || !InitializerLib.get().initialized) {\\r\\n            revert DelegatedCallsOnly();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\\r\\n    /// optimization - the modifier uses an internal function call.\\r\\n    modifier delegatedOnly {\\r\\n        enforceDelegatedOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier internalOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2a062649afde4b46419cf35b5662c3fa217d03656ebd83d83751c57fde0b3c90\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary InitializerLib {\\r\\n    error AlreadyInitialized();\\r\\n    error NotImplemented();\\r\\n\\r\\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.initializer\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() internal {\\r\\n        get().initialized = false;\\r\\n    }\\r\\n\\r\\n    function initialize() internal {\\r\\n        if (get().initialized) {\\r\\n            revert AlreadyInitialized();\\r\\n        } else {\\r\\n            get().initialized = true;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc0f1dacbaff19bbca3f59fe381f195906a7d5d87b17f27d5f81c8f3affbf4060\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PausabilityLib {\\r\\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.pausability\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool paused;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9b3a465f40e7bbced37337904db6f7acb116e3242a97f864b4b34d54bafb68d2\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary RolesManagementLib {\\r\\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\\r\\n\\r\\n    error HasNoRole(address who, bytes32 role);\\r\\n    error HasNoRoles(address who, bytes32[] roles);\\r\\n\\r\\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.roles\\\");\\r\\n\\r\\n    // roles to check with EOA\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\n\\r\\n    // A special role - must not be removed.\\r\\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\\r\\n\\r\\n    // roles to check with smart-contracts\\r\\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceRole(address who, bytes32 role) internal view {\\r\\n        if (role == INTERNAL_ROLE) {\\r\\n            if (who != address(this)) {\\r\\n                revert HasNoRole(who, INTERNAL_ROLE);\\r\\n            }\\r\\n        } else if (!get().roles[role][who]) {\\r\\n            revert HasNoRole(who, role);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\\r\\n        return get().roles[role][who];\\r\\n    }\\r\\n\\r\\n    function enforceSenderRole(bytes32 role) internal view {\\r\\n        enforceRole(msg.sender, role);\\r\\n    }\\r\\n\\r\\n    function grantRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = true; \\r\\n        emit RoleSet(who, role, true);\\r\\n    }\\r\\n\\r\\n    function revokeRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = false; \\r\\n        emit RoleSet(who, role, false);\\r\\n    }\\r\\n\\r\\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\\r\\n        bool result;\\r\\n        for (uint256 i = 0; i < roles.length; i++) {\\r\\n            if (roles[i] == INTERNAL_ROLE) {\\r\\n                result = result || who == address(this);\\r\\n            } else {\\r\\n                result = result || get().roles[roles[i]][who];\\r\\n            }\\r\\n        }\\r\\n        if (!result) {\\r\\n            revert HasNoRoles(who, roles);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\\r\\n        enforceEitherOfRoles(msg.sender, roles);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63362b8189cb9c1cec32aade5a5fdf3b2548761cf124dfe8ded723569ce2c00d\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/TDLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary TDLib {\\r\\n    error InvalidOffset(uint256 offset);\\r\\n    error IntervalsMustBeSorted();\\r\\n    error NothingWasFound();\\r\\n    error IncorrectLengths(uint256 l1, uint256 l2);\\r\\n\\r\\n    event ReceiverAltered(\\r\\n        address indexed receiver,\\r\\n        uint256 indexed share,\\r\\n        bool indexed isBlocked,\\r\\n        uint256 sumOfShares\\r\\n    );\\r\\n    event Distributed(\\r\\n        uint256 indexed distributedValue,\\r\\n        uint256 indexed tokensLeftAndSentToGovernance\\r\\n    );\\r\\n\\r\\n    bytes32 constant LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus.token_distribution\\\");\\r\\n\\r\\n    uint16 public constant MAX_BPS = 10000;\\r\\n\\r\\n    struct DistributionReceiver {\\r\\n        uint256 share;\\r\\n        uint256 previousShare;\\r\\n        address receiver;\\r\\n        bool isBlocked;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(address => uint32) startTimestamps;\\r\\n        uint32[] distributionDurationPoints;\\r\\n        mapping(uint256 => uint256) distributionDurationPointIdxToAmounts;\\r\\n        DistributionReceiver[] distributionReceivers;\\r\\n        uint256 sumOfShares;\\r\\n        address undistributedAmountsReceiver;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAmountToDistribute(\\r\\n        address entity\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 distributionAmount,\\r\\n            uint256 distributionDurationPointIdx\\r\\n        )\\r\\n    {\\r\\n        uint32 startStakingTime = get().startTimestamps[entity];\\r\\n        if (block.timestamp >= startStakingTime) {\\r\\n            uint32 timeCounter = startStakingTime;\\r\\n            uint256 distributionDurationPointsLen = get()\\r\\n                .distributionDurationPoints\\r\\n                .length;\\r\\n            uint256 idx;\\r\\n            for (idx; idx < distributionDurationPointsLen; idx++) {\\r\\n                uint32 distributionDurationPoint = get()\\r\\n                    .distributionDurationPoints[idx];\\r\\n                if (block.timestamp < timeCounter + distributionDurationPoint) {\\r\\n                    break;\\r\\n                } else {\\r\\n                    timeCounter += distributionDurationPoint;\\r\\n                }\\r\\n            }\\r\\n            distributionAmount = get().distributionDurationPointIdxToAmounts[\\r\\n                idx\\r\\n            ];\\r\\n            distributionDurationPointIdx = idx;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec0c54a4544c5bb3b0612f25c6e2f64ad6badd938305e80fcc914811cb6e9f0\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/LSLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary LSLib {\\r\\n    error InvalidBPS(uint16 bps);\\r\\n    error OnlyRewardsDistribution();\\r\\n    error CannotStakeZero();\\r\\n    error CannotWithdrawZero();\\r\\n    error RewardIsTooHigh(uint256 actualReward);\\r\\n    error CannotRecoverToken(address token, uint256 amount);\\r\\n    error ChangingRewardsDurationTooEarly(uint256 deltaInSeconds);\\r\\n    error NotImplemented();\\r\\n\\r\\n    event RewardAdded(uint256 indexed reward);\\r\\n    event Staked(address indexed user, uint256 indexed amount);\\r\\n    event Withdrawn(address indexed user, uint256 indexed amount, uint256 indexed feesTaken);\\r\\n    event RewardPaid(address indexed user, uint256 indexed reward, uint256 indexed feesTaken);\\r\\n    event RewardsDurationUpdated(uint256 indexed newDuration);\\r\\n    event Recovered(address indexed token, uint256 indexed amount);\\r\\n\\r\\n    bytes32 constant LOCUS_STAKING_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus_staking\\\");\\r\\n\\r\\n    bytes32 public constant REWARD_DISTRIBUTOR_ROLE = keccak256('REWARD_DISTRIBUTOR_ROLE');\\r\\n    bytes32 public constant ALLOWED_TO_STAKE_FOR_ROLE = keccak256('ALLOWED_TO_STAKE_FOR_ROLE');\\r\\n\\r\\n    uint256 public constant PRECISION = 1 ether;\\r\\n\\r\\n    struct ReferenceTypes {\\r\\n        mapping(address => uint256) userRewardPerTokenPaid;\\r\\n        mapping(address => uint256) rewards;\\r\\n        mapping(address => uint256) balanceOf;\\r\\n    }\\r\\n\\r\\n    struct Primitives {\\r\\n        IERC20Metadata rewardsToken;\\r\\n        IERC20Metadata stakingToken;\\r\\n        address locusToken;\\r\\n        uint256 periodFinish;\\r\\n        uint256 rewardRate;\\r\\n        uint256 rewardsDuration;\\r\\n        uint256 lastUpdateTime;\\r\\n        uint256 rewardPerTokenStored;\\r\\n        uint256 totalSupply;\\r\\n        uint256 totalReward;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        Primitives p;\\r\\n        ReferenceTypes rt;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_STAKING_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x284fefa1ceae887ab25ac19aecdc3f8e2c09c492a9c29a325ef1d5c20098a637\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/LSInitializerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"../LSLib.sol\\\";\\r\\nimport \\\"../../facetsFramework/diamondBase/facets/BaseFacet.sol\\\";\\r\\nimport \\\"../../facetsFramework/tokensDistributor/TDLib.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ILSInitializerFacet.sol\\\";\\r\\nimport \\\"./interfaces/ILSDepositaryFacet.sol\\\";\\r\\n\\r\\ncontract LSInitializerFacet is BaseFacet, ILSInitializerFacet {\\r\\n    function initialize(\\r\\n        address owner,\\r\\n        address locusToken,\\r\\n        address rewardDistributor,\\r\\n        address rewardsToken,\\r\\n        address stakingToken,\\r\\n        uint32[] memory feeDurationPoints,\\r\\n        uint16[] memory feeBasePoints\\r\\n    ) external override {\\r\\n        InitializerLib.initialize();\\r\\n\\r\\n        _setFeesSettings(owner, feeDurationPoints, feeBasePoints);\\r\\n\\r\\n        RolesManagementLib.grantRole(\\r\\n            rewardDistributor,\\r\\n            LSLib.REWARD_DISTRIBUTOR_ROLE\\r\\n        );\\r\\n        RolesManagementLib.grantRole(owner, RolesManagementLib.OWNER_ROLE);\\r\\n\\r\\n        LSLib.Primitives storage p = LSLib.get().p;\\r\\n        p.rewardsToken = IERC20Metadata(rewardsToken);\\r\\n        p.stakingToken = IERC20Metadata(stakingToken);\\r\\n        p.rewardsDuration = 4 weeks;\\r\\n        p.locusToken = locusToken;\\r\\n    }\\r\\n\\r\\n    function prepareDepositary() external override delegatedOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.OWNER_ROLE);\\r\\n        // WARNING: CONTAINS INITIALIZER CUSTOM MODIFIER, SO IT COULDN'T BE CALLED TWICE.\\r\\n        ILSDepositaryFacet(address(this))._initialize_LSDepositaryFacet();\\r\\n    }\\r\\n\\r\\n    function setFeesSettings(\\r\\n        address undistributedAmountsReceiver,\\r\\n        uint32[] memory feeDurationPoints,\\r\\n        uint16[] memory feeBasePoints\\r\\n    ) external override delegatedOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.OWNER_ROLE);\\r\\n        _setFeesSettings(undistributedAmountsReceiver, feeDurationPoints, feeBasePoints);\\r\\n    }\\r\\n\\r\\n    function _setFeesSettings(\\r\\n        address undistributedAmountsReceiver,\\r\\n        uint32[] memory feeDurationPoints,\\r\\n        uint16[] memory feeBasePoints\\r\\n    ) internal {\\r\\n        if (feeDurationPoints.length != feeBasePoints.length) {\\r\\n            revert TDLib.IncorrectLengths(\\r\\n                feeDurationPoints.length,\\r\\n                feeDurationPoints.length\\r\\n            );\\r\\n        }\\r\\n        TDLib.Storage storage s = TDLib.get();\\r\\n        uint32 maxFeePoint;\\r\\n        // just checking bps values and so they are sorted\\r\\n        for (uint256 i = 0; i < feeDurationPoints.length; i++) {\\r\\n            if (feeBasePoints[i] > TDLib.MAX_BPS) {\\r\\n                revert LSLib.InvalidBPS(feeBasePoints[i]);\\r\\n            } else {\\r\\n                s.distributionDurationPointIdxToAmounts[i] = feeBasePoints[i];\\r\\n            }\\r\\n            if (feeDurationPoints[i] >= maxFeePoint) {\\r\\n                maxFeePoint = feeDurationPoints[i];\\r\\n            } else {\\r\\n                revert TDLib.IntervalsMustBeSorted();\\r\\n            }\\r\\n        }\\r\\n        s.distributionDurationPoints = feeDurationPoints;\\r\\n        s.undistributedAmountsReceiver = undistributedAmountsReceiver;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2b65af3c20fa5aec8197bc98f67ccc91079a9ac0a1333da878f3d2a84f2e5436\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/interfaces/ILSDepositaryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILSDepositaryFacet {\\r\\n    function _initialize_LSDepositaryFacet() external;\\r\\n\\r\\n    function stake(uint256 amount) external;\\r\\n\\r\\n    function stakeFor(address staker, uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function exit() external;\\r\\n\\r\\n    function updateReward(address account) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x939a7f7999aa2b0a72fd7154310c3395fe2913338f29a0853609ce9da458ef66\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/interfaces/ILSInitializerFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILSInitializerFacet {\\r\\n    function initialize(\\r\\n        address owner,\\r\\n        address locusToken,\\r\\n        address rewardDistributor,\\r\\n        address rewardsToken,\\r\\n        address stakingToken,\\r\\n        uint32[] memory feePoints,\\r\\n        uint16[] memory feeBpsPerFeePointIdx\\r\\n    ) external;\\r\\n\\r\\n    function prepareDepositary() external;\\r\\n\\r\\n    function setFeesSettings(\\r\\n        address owner,\\r\\n        uint32[] memory feeDurationPoints,\\r\\n        uint16[] memory feeBasePoints\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x83566afcc82dc38442df43e925bd792f4106796d65abdcbefe5c9601e701c3c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a08060405234610023573060805261093690816100298239608051816104eb0152f35b600080fdfe60406080815260048036101561001457600080fd5b600091823560e01c9081630c15748b1461013b5781631f6dce26146100b757506349a61e4b1461004357600080fd5b346100b35760603660031901126100b35761005c6103a9565b6001600160401b036024358181116100af5761007b9036908501610414565b906044359081116100af576100ac936100969136910161047f565b9161009f6104e8565b6100a761054d565b6105f6565b80f35b8480fd5b5080fd5b9050346101375782600319360112610137576100d16104e8565b6100d961054d565b303b1561013757805163915f37c560e01b8152918383828183305af1801561012d57610103578380f35b6001600160401b03831161011a5750523880808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b8280fd5b905082346103a65760e03660031901126103a6576101576103a9565b6024356001600160a01b03818116918290036103a257604435928184168094036100af576064359382851680950361039e576084359280841680940361039a576001600160401b0360a435818111610396576101b69036908c01610414565b9060c435908111610396576101ce9036908c0161047f565b906000805160206108e1833981519152805460ff81166000146101fa578b5162dc149f60e41b81528d90fd5b94606096946102196001958e958e95888c9b60ff1916179055886105f6565b7fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b449908184527f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e4460209381855286862081875285528686209360ff1994898682541617905587519182528582015287878201527fe6c553997164af80f976feb439e6566231f261c8b41e3e5070f237f827fc44329a8b91a16000805160206108c18339815191528095528352848d20961695868d52825284848d20918254161790558251948552840152820152a17fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56b80546001600160a01b031990811690941790557fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56c8054841690911790556224ea007fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad570557fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56d805490921617905580f35b8880fd5b8680fd5b8580fd5b8380fd5b80fd5b600435906001600160a01b03821682036103bf57565b600080fd5b601f909101601f19168101906001600160401b038211908210176103e757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116103e75760051b60200190565b81601f820112156103bf5780359161042b836103fd565b9261043960405194856103c4565b808452602092838086019260051b8201019283116103bf578301905b828210610463575050505090565b813563ffffffff811681036103bf578152908301908301610455565b81601f820112156103bf57803591610496836103fd565b926104a460405194856103c4565b808452602092838086019260051b8201019283116103bf578301905b8282106104ce575050505090565b813561ffff811681036103bf5781529083019083016104c0565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610533575b61052157565b604051639f357e6b60e01b8152600490fd5b5060ff6000805160206108e183398151915254161561051b565b3360009081527f7eab7b82f3f21675de29d098b67b1bb6d0c69de2cb1ba0b9eb1dbc18d523752f60205260409020546000805160206108c18339815191529060ff16156105975750565b60449060405190632bc93d7960e21b82523360048301526024820152fd5b80518210156105c95760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9060031b9163ffffffff809116831b921b19161790565b929190918251825181036108a25750919260009384935b81518510156106f95761ffff956127108761062888886105b5565b511611156106545760248761063d88886105b5565b5160405163716c986560e11b815291166004820152fd5b909194929561066384866105b5565b5116836000527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0960205260406000205563ffffffff9081806106a586896105b5565b51169116116106e7576106b883866105b5565b51169160001981146106d157600101939094919461060d565b634e487b7160e01b600052601160045260246000fd5b60405163e8817d7760e01b8152600490fd5b81519095509193509091506001600160401b0382116103e757600160401b82116103e7577ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a08918254818455808210610845575b5060208092019260005281600020908060031c9260005b8481106108075750600719821690910390816107c0575b50507ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0c80546001600160a01b0319166001600160a01b0390951694909417909355505050565b9390600094855b8281106107de57505050500155388080808061077a565b90919295826107fc60019263ffffffff8a5116908560021b906105df565b9701939291016107c7565b6000805b60088110610820575084820155600101610763565b96908361083c60019263ffffffff855116908b60021b906105df565b9201970161080b565b836000526020600020600780840160031c8201920160031c0190601c8360021b1680610887575b505b81811061087b575061074c565b6000815560010161086e565b600019908183019182549160200360031b1c1690553861086c565b604490604051906305e2ada360e41b82528060048301526024820152fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005a26469706673582212201969e072c12b3a9411f0da805dca2c7b679ab4a3ce0969ad81cd3911997ff40d64736f6c63430008130033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c9081630c15748b1461013b5781631f6dce26146100b757506349a61e4b1461004357600080fd5b346100b35760603660031901126100b35761005c6103a9565b6001600160401b036024358181116100af5761007b9036908501610414565b906044359081116100af576100ac936100969136910161047f565b9161009f6104e8565b6100a761054d565b6105f6565b80f35b8480fd5b5080fd5b9050346101375782600319360112610137576100d16104e8565b6100d961054d565b303b1561013757805163915f37c560e01b8152918383828183305af1801561012d57610103578380f35b6001600160401b03831161011a5750523880808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b8280fd5b905082346103a65760e03660031901126103a6576101576103a9565b6024356001600160a01b03818116918290036103a257604435928184168094036100af576064359382851680950361039e576084359280841680940361039a576001600160401b0360a435818111610396576101b69036908c01610414565b9060c435908111610396576101ce9036908c0161047f565b906000805160206108e1833981519152805460ff81166000146101fa578b5162dc149f60e41b81528d90fd5b94606096946102196001958e958e95888c9b60ff1916179055886105f6565b7fb814ff4a26ea3ec5cd1fa579daad86324826254265f3acfec78303a19845b449908184527f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e4460209381855286862081875285528686209360ff1994898682541617905587519182528582015287878201527fe6c553997164af80f976feb439e6566231f261c8b41e3e5070f237f827fc44329a8b91a16000805160206108c18339815191528095528352848d20961695868d52825284848d20918254161790558251948552840152820152a17fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56b80546001600160a01b031990811690941790557fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56c8054841690911790556224ea007fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad570557fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56d805490921617905580f35b8880fd5b8680fd5b8580fd5b8380fd5b80fd5b600435906001600160a01b03821682036103bf57565b600080fd5b601f909101601f19168101906001600160401b038211908210176103e757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116103e75760051b60200190565b81601f820112156103bf5780359161042b836103fd565b9261043960405194856103c4565b808452602092838086019260051b8201019283116103bf578301905b828210610463575050505090565b813563ffffffff811681036103bf578152908301908301610455565b81601f820112156103bf57803591610496836103fd565b926104a460405194856103c4565b808452602092838086019260051b8201019283116103bf578301905b8282106104ce575050505090565b813561ffff811681036103bf5781529083019083016104c0565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610533575b61052157565b604051639f357e6b60e01b8152600490fd5b5060ff6000805160206108e183398151915254161561051b565b3360009081527f7eab7b82f3f21675de29d098b67b1bb6d0c69de2cb1ba0b9eb1dbc18d523752f60205260409020546000805160206108c18339815191529060ff16156105975750565b60449060405190632bc93d7960e21b82523360048301526024820152fd5b80518210156105c95760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9060031b9163ffffffff809116831b921b19161790565b929190918251825181036108a25750919260009384935b81518510156106f95761ffff956127108761062888886105b5565b511611156106545760248761063d88886105b5565b5160405163716c986560e11b815291166004820152fd5b909194929561066384866105b5565b5116836000527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0960205260406000205563ffffffff9081806106a586896105b5565b51169116116106e7576106b883866105b5565b51169160001981146106d157600101939094919461060d565b634e487b7160e01b600052601160045260246000fd5b60405163e8817d7760e01b8152600490fd5b81519095509193509091506001600160401b0382116103e757600160401b82116103e7577ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a08918254818455808210610845575b5060208092019260005281600020908060031c9260005b8481106108075750600719821690910390816107c0575b50507ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0c80546001600160a01b0319166001600160a01b0390951694909417909355505050565b9390600094855b8281106107de57505050500155388080808061077a565b90919295826107fc60019263ffffffff8a5116908560021b906105df565b9701939291016107c7565b6000805b60088110610820575084820155600101610763565b96908361083c60019263ffffffff855116908b60021b906105df565b9201970161080b565b836000526020600020600780840160031c8201920160031c0190601c8360021b1680610887575b505b81811061087b575061074c565b6000815560010161086e565b600019908183019182549160200360031b1c1690553861086c565b604490604051906305e2ada360e41b82528060048301526024820152fdfeb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005a26469706673582212201969e072c12b3a9411f0da805dca2c7b679ab4a3ce0969ad81cd3911997ff40d64736f6c63430008130033",
  "libraries": [
    "TDLib",
    "LSLib",
    "InitializerLib",
    "RolesManagementLib"
  ],
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/diamonds/locusStaking/v1/LSInitializerFacet.sol:LSInitializerFacet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/diamonds/locusStaking/v1/LSInitializerFacet.sol:LSInitializerFacet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}