{
  "address": "0x8959521A7E68f30d1f74322D2E667338fd882381",
  "abi": [
    {
      "inputs": [],
      "name": "DelegatedCallsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "HasNoRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_getCurrentSupply",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct ASLib.Supply",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentRate",
          "type": "uint256"
        }
      ],
      "name": "_getRValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rTransferAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ASLib.RValues",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "_getTValues",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tTransferAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ASLib.TValues",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "_getValues",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "rAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rTransferAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ASLib.RValues",
              "name": "r",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tTransferAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ASLib.TValues",
              "name": "t",
              "type": "tuple"
            }
          ],
          "internalType": "struct ASLib.Values",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrimitives",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tFeeTotal",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            }
          ],
          "internalType": "struct ASLib.Primitives",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcluded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "addTransferFee",
          "type": "bool"
        }
      ],
      "name": "reflectionFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenFromReflection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4cafdc649a37c81444013cad2ab939c4e6fcd5bcdea5a87e83e68e1fc4b46a9b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x729F2222aaCD99619B8B660b412baE9fCEa3d90F",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "11249952",
    "logsBloom": "0x
    "blockHash": "0x1288f00ff2720a0164a1a6b7ab4fc91a7375342edf6ee84508e60cb32a00b46c",
    "transactionHash": "0x4cafdc649a37c81444013cad2ab939c4e6fcd5bcdea5a87e83e68e1fc4b46a9b",
    "logs": [],
    "blockNumber": 189557990,
    "cumulativeGasUsed": "11249952",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "be00b6e3996275fb10413fbee959d9db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DelegatedCallsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"HasNoRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_getCurrentSupply\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ASLib.Supply\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentRate\",\"type\":\"uint256\"}],\"name\":\"_getRValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ASLib.RValues\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"_getTValues\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ASLib.TValues\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"_getValues\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ASLib.RValues\",\"name\":\"r\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ASLib.TValues\",\"name\":\"t\",\"type\":\"tuple\"}],\"internalType\":\"struct ASLib.Values\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimitives\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tFeeTotal\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"internalType\":\"struct ASLib.Primitives\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"addTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamonds/autoreflectiveStaking/v1/ASReflectionLoupeFacet.sol\":\"ASReflectionLoupeFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/diamonds/autoreflectiveStaking/ASLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary ASLib {\\r\\n    error CannotApproveFromZeroAddress();\\r\\n    error CannotApproveToZeroAddress();\\r\\n    error CannotTransferFromZeroAddress();\\r\\n    error CannotTransferToZeroAddress();\\r\\n    error AmountCannotBeZero();\\r\\n    error AddressIsExcludedFromFees();\\r\\n    error AlreadyExcluded(address who);\\r\\n    error AlreadyIncluded(address who);\\r\\n    error AmountIsLessThan(uint256 actual, uint256 expected);\\r\\n    error CannotRecognizeAddressesInExcludedList(address from, address to);\\r\\n\\r\\n    struct Supply {\\r\\n        uint256 rSupply;\\r\\n        uint256 tSupply;\\r\\n    }\\r\\n\\r\\n    struct Values {\\r\\n        RValues r;\\r\\n        TValues t;\\r\\n    }\\r\\n\\r\\n    struct RValues {\\r\\n        uint256 rAmount;\\r\\n        uint256 rTransferAmount;\\r\\n        uint256 rFee;\\r\\n    }\\r\\n\\r\\n    struct TValues {\\r\\n        uint256 tTransferAmount;\\r\\n        uint256 tFee;\\r\\n    }\\r\\n\\r\\n    bytes32 constant AUTOREFLECTIVE_STAKING_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.autoreflective_staking\\\");\\r\\n    \\r\\n    bytes32 public constant REWARD_DISTRIBUTOR_ROLE = keccak256(\\\"REWARD_DISTRIBUTOR_ROLE\\\");\\r\\n\\r\\n    string public constant NAME_PREFIX = \\\"Locus Staking\\\";\\r\\n    string public constant SYMBOL_PREFIX = \\\"st\\\";\\r\\n\\r\\n    struct ReferenceTypes {\\r\\n        mapping (address => uint256) rOwned;\\r\\n        mapping (address => uint256) tOwned;\\r\\n        mapping (address => mapping (address => uint256)) allowance;\\r\\n        EnumerableSet.AddressSet excluded;\\r\\n    }\\r\\n\\r\\n    struct Primitives {\\r\\n        address token;\\r\\n        uint256 tTotal;\\r\\n        uint256 rTotal;\\r\\n        uint256 tFeeTotal;\\r\\n        string name;\\r\\n        string symbol;\\r\\n        uint8 decimals;\\r\\n        uint256 totalStaked;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        Primitives p;\\r\\n        ReferenceTypes rt;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = AUTOREFLECTIVE_STAKING_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf2cd760f6d03b11eef126cd06419f7eec9a5b02531ee4d995aa0f153210f4a87\",\"license\":\"MIT\"},\"contracts/diamonds/autoreflectiveStaking/v1/ASReflectionLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IASReflectionLoupeFacet.sol\\\";\\r\\nimport \\\"./interfaces/IASFeeAdvisorFacet.sol\\\";\\r\\nimport \\\"../../facetsFramework/diamondBase/facets/BaseFacet.sol\\\";\\r\\nimport \\\"../ASLib.sol\\\";\\r\\n\\r\\ncontract ASReflectionLoupeFacet is BaseFacet, IASReflectionLoupeFacet {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    function isExcluded(\\r\\n        address account\\r\\n    ) external view override delegatedOnly returns (bool) {\\r\\n        return ASLib.get().rt.excluded.contains(account);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(\\r\\n        uint256 tAmount,\\r\\n        bool addTransferFee\\r\\n    ) external view override delegatedOnly returns (uint256) {\\r\\n        if (!addTransferFee) {\\r\\n            return this._getValues(tAmount).r.rAmount;\\r\\n        } else {\\r\\n            return this._getValues(tAmount).r.rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(\\r\\n        uint256 rAmount\\r\\n    ) external view override delegatedOnly returns (uint256) {\\r\\n        return rAmount / this._getRate();\\r\\n    }\\r\\n\\r\\n    function _getValues(\\r\\n        uint256 tAmount\\r\\n    ) external view internalOnly returns (ASLib.Values memory) {\\r\\n        ASLib.TValues memory tValues = this._getTValues(tAmount);\\r\\n        uint256 currentRate = this._getRate();\\r\\n        ASLib.RValues memory rValues = this._getRValues(\\r\\n            tAmount,\\r\\n            tValues.tFee,\\r\\n            currentRate\\r\\n        );\\r\\n        return\\r\\n            ASLib.Values({\\r\\n                r: ASLib.RValues({\\r\\n                    rAmount: rValues.rAmount,\\r\\n                    rTransferAmount: rValues.rTransferAmount,\\r\\n                    rFee: rValues.rFee\\r\\n                }),\\r\\n                t: ASLib.TValues({\\r\\n                    tTransferAmount: tValues.tTransferAmount,\\r\\n                    tFee: tValues.tFee\\r\\n                })\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _getTValues(\\r\\n        uint256 tAmount\\r\\n    ) external view override internalOnly returns (ASLib.TValues memory) {\\r\\n        uint256 tFee = IASFeeAdvisorFacet(address(this)).advise(tAmount);\\r\\n        uint256 tTransferAmount = tAmount - tFee;\\r\\n        return ASLib.TValues({tTransferAmount: tTransferAmount, tFee: tFee});\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 currentRate\\r\\n    ) external view override internalOnly returns (ASLib.RValues memory) {\\r\\n        uint256 rAmount = tAmount * currentRate;\\r\\n        uint256 rFee = tFee * currentRate;\\r\\n        uint256 rTransferAmount = rAmount - rFee;\\r\\n        return\\r\\n            ASLib.RValues({\\r\\n                rAmount: rAmount,\\r\\n                rTransferAmount: rTransferAmount,\\r\\n                rFee: rFee\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _getRate() external view override internalOnly returns (uint256) {\\r\\n        ASLib.Supply memory supply = this._getCurrentSupply();\\r\\n        return supply.rSupply / supply.tSupply;\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        internalOnly\\r\\n        returns (ASLib.Supply memory)\\r\\n    {\\r\\n        ASLib.Primitives storage p = ASLib.get().p;\\r\\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\\r\\n        uint256 rSupply = p.rTotal;\\r\\n        uint256 tSupply = p.tTotal;\\r\\n        uint256 excludedSize = rt.excluded.length();\\r\\n        for (uint256 i = 0; i < excludedSize; i++) {\\r\\n            address excludedAddr = rt.excluded.at(i);\\r\\n            if (\\r\\n                rt.rOwned[excludedAddr] > rSupply ||\\r\\n                rt.tOwned[excludedAddr] > tSupply\\r\\n            ) {\\r\\n                return ASLib.Supply({rSupply: p.rTotal, tSupply: p.tTotal});\\r\\n            }\\r\\n            rSupply -= rt.rOwned[excludedAddr];\\r\\n            tSupply -= rt.tOwned[excludedAddr];\\r\\n        }\\r\\n        if (rSupply < p.rTotal / p.tTotal) {\\r\\n            return ASLib.Supply({rSupply: p.rTotal, tSupply: p.tTotal});\\r\\n        }\\r\\n        return ASLib.Supply({rSupply: rSupply, tSupply: tSupply});\\r\\n    }\\r\\n\\r\\n    function getPrimitives() external view override delegatedOnly returns (ASLib.Primitives memory) {\\r\\n        return ASLib.get().p;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc3c20c8a58e128ba6a92a8489e0c5be8ce15e4ab01bc8b3e57adff690a70fada\",\"license\":\"MIT\"},\"contracts/diamonds/autoreflectiveStaking/v1/interfaces/IASFeeAdvisorFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IASFeeAdvisorFacet {\\r\\n    function advise(uint256 amount) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf61f844ffb074822c2bb2f5fdcd855b7629b9b27c41e5f6972d05ad00568a59\",\"license\":\"MIT\"},\"contracts/diamonds/autoreflectiveStaking/v1/interfaces/IASReflectionLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"../../ASLib.sol\\\";\\r\\n\\r\\ninterface IASReflectionLoupeFacet {\\r\\n    function isExcluded(address account) external view returns (bool);\\r\\n\\r\\n    function reflectionFromToken(\\r\\n        uint256 tAmount,\\r\\n        bool addTransferFee\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function tokenFromReflection(\\r\\n        uint256 rAmount\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function _getValues(\\r\\n        uint256 tAmount\\r\\n    ) external view returns (ASLib.Values memory);\\r\\n\\r\\n    function _getTValues(\\r\\n        uint256 tAmount\\r\\n    ) external view returns (ASLib.TValues memory);\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 currentRate\\r\\n    ) external view returns (ASLib.RValues memory);\\r\\n\\r\\n    function _getRate() external view returns (uint256);\\r\\n\\r\\n    function _getCurrentSupply() external view returns (ASLib.Supply memory);\\r\\n\\r\\n    function getPrimitives() external view returns (ASLib.Primitives memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xe5c8a192bcc06eeb8b7af7d862a7f3ad03c65790d075bfb5ff5914a9d820e1c8\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PausabilityLib.sol\\\";\\r\\nimport \\\"../libraries/InitializerLib.sol\\\";\\r\\nimport \\\"../libraries/RolesManagementLib.sol\\\";\\r\\n\\r\\nabstract contract BaseFacet is Initializable {\\r\\n    error DelegatedCallsOnly();\\r\\n    \\r\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\r\\n    address internal immutable __self = address(this);\\r\\n\\r\\n    function enforceDelegatedOnly() internal view {\\r\\n        if (address(this) == __self || !InitializerLib.get().initialized) {\\r\\n            revert DelegatedCallsOnly();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\\r\\n    /// optimization - the modifier uses an internal function call.\\r\\n    modifier delegatedOnly {\\r\\n        enforceDelegatedOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier internalOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2a062649afde4b46419cf35b5662c3fa217d03656ebd83d83751c57fde0b3c90\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary InitializerLib {\\r\\n    error AlreadyInitialized();\\r\\n    error NotImplemented();\\r\\n\\r\\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.initializer\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() internal {\\r\\n        get().initialized = false;\\r\\n    }\\r\\n\\r\\n    function initialize() internal {\\r\\n        if (get().initialized) {\\r\\n            revert AlreadyInitialized();\\r\\n        } else {\\r\\n            get().initialized = true;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc0f1dacbaff19bbca3f59fe381f195906a7d5d87b17f27d5f81c8f3affbf4060\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PausabilityLib {\\r\\n    error OnlyWhenNotPaused();\\r\\n    \\r\\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.pausability\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool paused;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x99306f533b5797bd58d92b2ac976324d14b61b7b426c90083f2f060f75863686\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary RolesManagementLib {\\r\\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\\r\\n\\r\\n    error HasNoRole(address who, bytes32 role);\\r\\n    error HasNoRoles(address who, bytes32[] roles);\\r\\n\\r\\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.roles\\\");\\r\\n\\r\\n    // roles to check with EOA\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\n\\r\\n    // A special role - must not be removed.\\r\\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\\r\\n\\r\\n    // roles to check with smart-contracts\\r\\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceRole(address who, bytes32 role) internal view {\\r\\n        if (role == INTERNAL_ROLE) {\\r\\n            if (who != address(this)) {\\r\\n                revert HasNoRole(who, INTERNAL_ROLE);\\r\\n            }\\r\\n        } else if (!get().roles[role][who]) {\\r\\n            revert HasNoRole(who, role);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\\r\\n        return get().roles[role][who];\\r\\n    }\\r\\n\\r\\n    function enforceSenderRole(bytes32 role) internal view {\\r\\n        enforceRole(msg.sender, role);\\r\\n    }\\r\\n\\r\\n    function grantRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = true; \\r\\n        emit RoleSet(who, role, true);\\r\\n    }\\r\\n\\r\\n    function revokeRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = false; \\r\\n        emit RoleSet(who, role, false);\\r\\n    }\\r\\n\\r\\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\\r\\n        bool result;\\r\\n        for (uint256 i = 0; i < roles.length; i++) {\\r\\n            if (roles[i] == INTERNAL_ROLE) {\\r\\n                result = result || who == address(this);\\r\\n            } else {\\r\\n                result = result || get().roles[roles[i]][who];\\r\\n            }\\r\\n        }\\r\\n        if (!result) {\\r\\n            revert HasNoRoles(who, roles);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\\r\\n        enforceEitherOfRoles(msg.sender, roles);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63362b8189cb9c1cec32aade5a5fdf3b2548761cf124dfe8ded723569ce2c00d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100235730608052610ed99081610029823960805181610d880152f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c908163119021601461087e575080632d838119146108055780634549b039146107d25780637821b3321461043b57806394e10784146103a357806397a9d5601461035a578063c2264c6a146102e9578063cba0e996146102825763d4780e361461008257600080fd5b346102025760208060031936011261020257600435906040516100a4816109a7565b6100ac610b9a565b815281604051916100bc836109a7565b6000835260008284015201526100d0610dfc565b60405190628c810b60e51b8252826004830152604082602481305afa91821561020e57600092610247575b5060405163253841e160e21b81528181600481305afa90811561020e5760009161021a575b5081830190815160405195636113263560e11b8752600487015260248601526044850152606084606481305afa92831561020e576000936101cd575b60a09450835193604084820151910151906040519561017a876109f4565b865284860152604085015251905160405191610195836109a7565b825282820152816040516101a8816109a7565b848152019081526101bc604051809461098e565b518051606084015201516080820152f35b925060603d8111610207575b6101e38186610a0f565b8401936060818603126102025760a0946101fc91610a32565b9261015c565b600080fd5b503d6101d9565b6040513d6000823e3d90fd5b90508181813d8311610240575b6102318183610a0f565b81010312610202575138610120565b503d610227565b90915060403d60401161027b575b61025f8183610a0f565b81016040828203126102025761027491610a64565b90386100fb565b503d610255565b34610202576020366003190112610202576004356001600160a01b03811690819003610202576102b0610d85565b6000527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea573760205260206040600020541515604051908152f35b34610202576060366003190112610202576060604435610307610b9a565b50610310610dfc565b61032861031f82600435610bdc565b91602435610bdc565b6103328183610bb9565b6040519261033f846109f4565b835260208301526040820152610358604051809261098e565bf35b34610202576000366003190112610202576000602060405161037b816109a7565b8281520152610388610dfc565b61039f610393610c61565b60405191829182610938565b0390f35b34610202576000366003190112610202576103bc610dfc565b604080516304bd4eab60e51b81529081600481305afa90811561020e576000916103fb575b60206103f38382815191015190610b7a565b604051908152f35b905060403d604011610434575b6104128183610a0f565b81016040828203126102025761042d6103f391602093610a64565b91506103e1565b503d610408565b3461020257600036600319011261020257600060e060405161045c816109d8565b82815282602082015282604082015282606082015260606080820152606060a08201528260c0820152015261048f610d85565b60405161049b816109d8565b60018060a01b037faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572b54168152600080516020610e44833981519152549060208101918252600080516020610e6483398151915254604082019081527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572e5490606083019182526040519060007faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572f908154908160011c92600183169283156107c8575b6020851084146107415784875286939081156107a6575060011461075f575b5061058892500383610a0f565b60808401918252604051916000600080516020610e8483398151915254908160011c6001831615610757575b6020811060018416146107415780865285926001811690811561071d57506001146106b3575b50916105ed6106a29260ff940386610a0f565b60a08701948552827faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea573154169560c088019687527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea5732549460e08901958652604051998a9960208b5260018060a01b0390511660208b01525160408a0152516060890152516080880152519361068f610100958660a08a015261012089019061094e565b9051878203601f190160c089015261094e565b93511660e085015251908301520390f35b600080516020610e84833981519152600090815291507fc5edd07ed7cb68ba984125264e65437624d3b41b2045185865a4ddeb7f61ac085b81831061070157505081016020016105ed6105da565b6020919350806001915483858a010152019101909185926106eb565b60ff191660208086019190915291151560051b840190910191506105ed90506105da565b634e487b7160e01b600052602260045260246000fd5b607f166105b4565b90506000929192526020600020906000915b81831061078a575050906020610588928201018861057b565b6020919350806001915483858901015201910190918492610771565b90506020925061058894915060ff191682840152151560051b8201018861057b565b93607f169361055c565b34610202576040366003190112610202576024358015158103610202576103f36020916107fd610d85565b600435610ac4565b34610202576020806003193601126102025761081f610d85565b60405163253841e160e21b81528181600481305afa801561020e5760009061084f575b6103f39150600435610b7a565b508181813d8311610877575b6108658183610a0f565b81010312610202576103f39051610842565b503d61085b565b346102025760208060031936011261020257600081600435936108a0816109a7565b82815201526108ad610dfc565b604051632c19f8f360e01b815260048101839052918183602481305afa92831561020e57600093610907575b50916108e88161039f94610bb9565b91604051926108f6846109a7565b835282015260405191829182610938565b92508183813d8311610931575b61091e8183610a0f565b81010312610202579151916108e86108d9565b503d610914565b9190916020806040830194805184520151910152565b919082519283825260005b84811061097a575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610959565b6040809180518452602081015160208501520151910152565b604081019081106001600160401b038211176109c257604052565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b038211176109c257604052565b606081019081106001600160401b038211176109c257604052565b601f909101601f19168101906001600160401b038211908210176109c257604052565b919082606091031261020257604051610a4a816109f4565b604080829480518452602081015160208501520151910152565b919082604091031261020257604051610a7c816109a7565b6020808294805184520151910152565b9060a08282031261020257610abc90606060405193610aaa856109a7565b610ab48382610a32565b855201610a64565b602082015290565b90610b285760405190636a3c071b60e11b8252600482015260a081602481305afa90811561020e57600091610afa575b50515190565b610b1b915060a03d8111610b21575b610b138183610a0f565b810190610a8c565b38610af4565b503d610b09565b60405190636a3c071b60e11b8252600482015260a081602481305afa801561020e57602091600091610b5c575b5051015190565b610b74915060a03d8111610b2157610b138183610a0f565b38610b55565b8115610b84570490565b634e487b7160e01b600052601260045260246000fd5b60405190610ba7826109f4565b60006040838281528260208201520152565b91908203918211610bc657565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610bc657565b6001600160a01b031660009081527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea57336020526040902090565b6001600160a01b031660009081527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea57346020526040902090565b600080516020610e648339815191525480600080516020610e448339815191525490817faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea573680546000915b818310610cee57505050610cbf8183610b7a565b8410610cde57505060405191610cd4836109a7565b8252602082015290565b60405193509150610cd4836109a7565b9091948160005260209660018060a01b0387896000200154169781610d128a610bef565b54118015610d73575b610d55575090610d34610d3b610d4193610d348b610bef565b5490610bb9565b98610c28565b946000198114610bc6576001019190610cab565b95975050505050915060405192610d6b846109a7565b835282015290565b5082610d7e8a610c28565b5411610d1b565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610dd0575b610dbe57565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005541615610db8565b303303610e0557565b604051632bc93d7960e21b81523360048201527fddd94edc7da5bca8f576c77964a4737ba5172c728e2d539e672f0229d1e9ec2d6024820152604490fdfeaf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572caf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572daf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea5730a2646970667358221220a8753d90affbba55083fd4be2787415247a93a776cdf69b41454250c3daa136364736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c908163119021601461087e575080632d838119146108055780634549b039146107d25780637821b3321461043b57806394e10784146103a357806397a9d5601461035a578063c2264c6a146102e9578063cba0e996146102825763d4780e361461008257600080fd5b346102025760208060031936011261020257600435906040516100a4816109a7565b6100ac610b9a565b815281604051916100bc836109a7565b6000835260008284015201526100d0610dfc565b60405190628c810b60e51b8252826004830152604082602481305afa91821561020e57600092610247575b5060405163253841e160e21b81528181600481305afa90811561020e5760009161021a575b5081830190815160405195636113263560e11b8752600487015260248601526044850152606084606481305afa92831561020e576000936101cd575b60a09450835193604084820151910151906040519561017a876109f4565b865284860152604085015251905160405191610195836109a7565b825282820152816040516101a8816109a7565b848152019081526101bc604051809461098e565b518051606084015201516080820152f35b925060603d8111610207575b6101e38186610a0f565b8401936060818603126102025760a0946101fc91610a32565b9261015c565b600080fd5b503d6101d9565b6040513d6000823e3d90fd5b90508181813d8311610240575b6102318183610a0f565b81010312610202575138610120565b503d610227565b90915060403d60401161027b575b61025f8183610a0f565b81016040828203126102025761027491610a64565b90386100fb565b503d610255565b34610202576020366003190112610202576004356001600160a01b03811690819003610202576102b0610d85565b6000527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea573760205260206040600020541515604051908152f35b34610202576060366003190112610202576060604435610307610b9a565b50610310610dfc565b61032861031f82600435610bdc565b91602435610bdc565b6103328183610bb9565b6040519261033f846109f4565b835260208301526040820152610358604051809261098e565bf35b34610202576000366003190112610202576000602060405161037b816109a7565b8281520152610388610dfc565b61039f610393610c61565b60405191829182610938565b0390f35b34610202576000366003190112610202576103bc610dfc565b604080516304bd4eab60e51b81529081600481305afa90811561020e576000916103fb575b60206103f38382815191015190610b7a565b604051908152f35b905060403d604011610434575b6104128183610a0f565b81016040828203126102025761042d6103f391602093610a64565b91506103e1565b503d610408565b3461020257600036600319011261020257600060e060405161045c816109d8565b82815282602082015282604082015282606082015260606080820152606060a08201528260c0820152015261048f610d85565b60405161049b816109d8565b60018060a01b037faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572b54168152600080516020610e44833981519152549060208101918252600080516020610e6483398151915254604082019081527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572e5490606083019182526040519060007faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572f908154908160011c92600183169283156107c8575b6020851084146107415784875286939081156107a6575060011461075f575b5061058892500383610a0f565b60808401918252604051916000600080516020610e8483398151915254908160011c6001831615610757575b6020811060018416146107415780865285926001811690811561071d57506001146106b3575b50916105ed6106a29260ff940386610a0f565b60a08701948552827faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea573154169560c088019687527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea5732549460e08901958652604051998a9960208b5260018060a01b0390511660208b01525160408a0152516060890152516080880152519361068f610100958660a08a015261012089019061094e565b9051878203601f190160c089015261094e565b93511660e085015251908301520390f35b600080516020610e84833981519152600090815291507fc5edd07ed7cb68ba984125264e65437624d3b41b2045185865a4ddeb7f61ac085b81831061070157505081016020016105ed6105da565b6020919350806001915483858a010152019101909185926106eb565b60ff191660208086019190915291151560051b840190910191506105ed90506105da565b634e487b7160e01b600052602260045260246000fd5b607f166105b4565b90506000929192526020600020906000915b81831061078a575050906020610588928201018861057b565b6020919350806001915483858901015201910190918492610771565b90506020925061058894915060ff191682840152151560051b8201018861057b565b93607f169361055c565b34610202576040366003190112610202576024358015158103610202576103f36020916107fd610d85565b600435610ac4565b34610202576020806003193601126102025761081f610d85565b60405163253841e160e21b81528181600481305afa801561020e5760009061084f575b6103f39150600435610b7a565b508181813d8311610877575b6108658183610a0f565b81010312610202576103f39051610842565b503d61085b565b346102025760208060031936011261020257600081600435936108a0816109a7565b82815201526108ad610dfc565b604051632c19f8f360e01b815260048101839052918183602481305afa92831561020e57600093610907575b50916108e88161039f94610bb9565b91604051926108f6846109a7565b835282015260405191829182610938565b92508183813d8311610931575b61091e8183610a0f565b81010312610202579151916108e86108d9565b503d610914565b9190916020806040830194805184520151910152565b919082519283825260005b84811061097a575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610959565b6040809180518452602081015160208501520151910152565b604081019081106001600160401b038211176109c257604052565b634e487b7160e01b600052604160045260246000fd5b61010081019081106001600160401b038211176109c257604052565b606081019081106001600160401b038211176109c257604052565b601f909101601f19168101906001600160401b038211908210176109c257604052565b919082606091031261020257604051610a4a816109f4565b604080829480518452602081015160208501520151910152565b919082604091031261020257604051610a7c816109a7565b6020808294805184520151910152565b9060a08282031261020257610abc90606060405193610aaa856109a7565b610ab48382610a32565b855201610a64565b602082015290565b90610b285760405190636a3c071b60e11b8252600482015260a081602481305afa90811561020e57600091610afa575b50515190565b610b1b915060a03d8111610b21575b610b138183610a0f565b810190610a8c565b38610af4565b503d610b09565b60405190636a3c071b60e11b8252600482015260a081602481305afa801561020e57602091600091610b5c575b5051015190565b610b74915060a03d8111610b2157610b138183610a0f565b38610b55565b8115610b84570490565b634e487b7160e01b600052601260045260246000fd5b60405190610ba7826109f4565b60006040838281528260208201520152565b91908203918211610bc657565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610bc657565b6001600160a01b031660009081527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea57336020526040902090565b6001600160a01b031660009081527faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea57346020526040902090565b600080516020610e648339815191525480600080516020610e448339815191525490817faf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea573680546000915b818310610cee57505050610cbf8183610b7a565b8410610cde57505060405191610cd4836109a7565b8252602082015290565b60405193509150610cd4836109a7565b9091948160005260209660018060a01b0387896000200154169781610d128a610bef565b54118015610d73575b610d55575090610d34610d3b610d4193610d348b610bef565b5490610bb9565b98610c28565b946000198114610bc6576001019190610cab565b95975050505050915060405192610d6b846109a7565b835282015290565b5082610d7e8a610c28565b5411610d1b565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610dd0575b610dbe57565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005541615610db8565b303303610e0557565b604051632bc93d7960e21b81523360048201527fddd94edc7da5bca8f576c77964a4737ba5172c728e2d539e672f0229d1e9ec2d6024820152604490fdfeaf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572caf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea572daf04b09135d90f3f033b0b36587eb83b773d1e2f0f54936e3b4630a67fea5730a2646970667358221220a8753d90affbba55083fd4be2787415247a93a776cdf69b41454250c3daa136364736f6c63430008130033",
  "libraries": [
    "ASLib",
    "InitializerLib",
    "RolesManagementLib",
    "TDLib",
    "DelayedSendingsQueueLib"
  ],
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/diamonds/autoreflectiveStaking/v1/ASReflectionLoupeFacet.sol:ASReflectionLoupeFacet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/diamonds/autoreflectiveStaking/v1/ASReflectionLoupeFacet.sol:ASReflectionLoupeFacet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}