{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/diamonds/autoreflectiveStaking/ASLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\r\nlibrary ASLib {\r\n    error CannotApproveFromZeroAddress();\r\n    error CannotApproveToZeroAddress();\r\n    error CannotTransferFromZeroAddress();\r\n    error CannotTransferToZeroAddress();\r\n    error AmountCannotBeZero();\r\n    error AddressIsExcludedFromFees();\r\n    error AlreadyExcluded(address who);\r\n    error AlreadyIncluded(address who);\r\n    error AmountIsLessThan(uint256 actual, uint256 expected);\r\n    error CannotRecognizeAddressesInExcludedList(address from, address to);\r\n\r\n    struct Supply {\r\n        uint256 rSupply;\r\n        uint256 tSupply;\r\n    }\r\n\r\n    struct Values {\r\n        RValues r;\r\n        TValues t;\r\n    }\r\n\r\n    struct RValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rFee;\r\n    }\r\n\r\n    struct TValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n    }\r\n\r\n    bytes32 constant AUTOREFLECTIVE_STAKING_STORAGE_POSITION =\r\n        keccak256(\"diamond.standard.diamond.storage.autoreflective_staking\");\r\n\r\n    string public constant NAME_PREFIX = \"Locus Staking\";\r\n    string public constant SYMBOL_PREFIX = \"st\";\r\n\r\n    struct ReferenceTypes {\r\n        mapping (address => uint256) rOwned;\r\n        mapping (address => uint256) tOwned;\r\n        mapping (address => mapping (address => uint256)) allowance;\r\n        EnumerableSet.AddressSet excluded;\r\n    }\r\n\r\n    struct Primitives {\r\n        address rewardToken;\r\n        address stakingToken;\r\n        uint256 totalReward;\r\n        uint256 tTotal;\r\n        uint256 rTotal;\r\n        uint256 tFeeTotal;\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n    }\r\n\r\n    struct Storage {\r\n        Primitives p;\r\n        ReferenceTypes rt;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = AUTOREFLECTIVE_STAKING_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n}"
    },
    "contracts/diamonds/autoreflectiveStaking/DiamondAutoreflectiveStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\nimport \"../facetsFramework/diamondBase/interfaces/IRolesManagement.sol\";\r\n\r\nimport \"./v1/interfaces/IASInitializerFacet.sol\";\r\nimport \"./v1/interfaces/IASDepositaryFacet.sol\";\r\nimport \"./v1/interfaces/IASEip20Facet.sol\";\r\nimport \"./v1/interfaces/IASReflectionFacet.sol\";\r\nimport \"./v1/interfaces/IASReflectionLoupeFacet.sol\";\r\nimport \"./v1/interfaces/IASFeeAdvisorFacet.sol\";\r\n\r\n/// @notice IMPORTANT: all of the collective diamond interfaces MUST be prefixed with \"Diamond\" word.\r\n/// @dev This MUST aggregate all of the faucets interfaces, to be able to grasp a full view of ABI in one place.\r\ninterface DiamondAutoreflectiveStaking is \r\n    IRolesManagement,\r\n    IASInitializerFacet,\r\n    IASDepositaryFacet,\r\n    IASEip20Facet,\r\n    IASReflectionFacet,\r\n    IASReflectionLoupeFacet,\r\n    IASFeeAdvisorFacet\r\n{}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/ASDepositaryFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport \"../../facetsFramework/diamondBase/facets/BaseFacet.sol\";\r\nimport \"../ASLib.sol\";\r\nimport \"./interfaces/IASReflectionFacet.sol\";\r\nimport \"./interfaces/IASDepositaryFacet.sol\";\r\n\r\ncontract ASDepositaryFacet is IASDepositaryFacet, BaseFacet {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function stake(uint256 amount) external override delegatedOnly {\r\n        IASReflectionFacet(address(this))._mintTo(msg.sender, amount);\r\n        IERC20(ASLib.get().p.stakingToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        emit Staked(amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external override delegatedOnly {\r\n        ASLib.Primitives storage p = ASLib.get().p;\r\n        IASReflectionFacet(address(this))._burnFrom(msg.sender, amount);\r\n        IERC20(p.rewardToken).safeTransfer(msg.sender, amount);\r\n        emit Withdrawn(amount);\r\n    }\r\n\r\n    function notifyRewardAmount(\r\n        uint256 amount\r\n    ) external override delegatedOnly {\r\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.OWNER_ROLE);\r\n        ASLib.Primitives storage p = ASLib.get().p;\r\n        IERC20(p.rewardToken).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount\r\n        );\r\n        p.totalReward += amount;\r\n        p.tTotal += amount;\r\n        IASReflectionFacet(address(this))._updateTotalReflection();\r\n        emit RewardAdded(amount);\r\n    }\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/ASEip20Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport \"../../facetsFramework/diamondBase/facets/BaseFacet.sol\";\r\nimport \"./interfaces/IASReflectionFacet.sol\";\r\nimport \"./interfaces/IASReflectionLoupeFacet.sol\";\r\nimport \"./interfaces/IASEip20Facet.sol\";\r\nimport \"../ASLib.sol\";\r\n\r\ncontract ASEip20Facet is BaseFacet, IASEip20Facet {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    function totalSupply()\r\n        external\r\n        view\r\n        override\r\n        delegatedOnly\r\n        returns (uint256)\r\n    {\r\n        return ASLib.get().p.tTotal;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) external view override delegatedOnly returns (uint256) {\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        if (rt.excluded.contains(account)) return rt.tOwned[account];\r\n        return\r\n            IASReflectionLoupeFacet(address(this)).tokenFromReflection(\r\n                rt.rOwned[account]\r\n            );\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) external override delegatedOnly returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view override delegatedOnly returns (uint256) {\r\n        return ASLib.get().rt.allowance[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(from, to, amount);\r\n        _approve(\r\n            from,\r\n            msg.sender,\r\n            ASLib.get().rt.allowance[from][msg.sender] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return ASLib.get().p.name;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return ASLib.get().p.symbol;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return ASLib.get().p.decimals;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external override delegatedOnly returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            ASLib.get().rt.allowance[msg.sender][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external override delegatedOnly returns (bool) {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            ASLib.get().rt.allowance[msg.sender][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _emitTransferEvent(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external override internalOnly {\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        if (owner == address(0)) revert ASLib.CannotApproveFromZeroAddress();\r\n        if (spender == address(0)) revert ASLib.CannotApproveToZeroAddress();\r\n        ASLib.get().rt.allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        if (sender == address(0)) revert ASLib.CannotTransferFromZeroAddress();\r\n        if (recipient == address(0)) revert ASLib.CannotTransferToZeroAddress();\r\n        if (amount == 0) revert ASLib.AmountCannotBeZero();\r\n\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n\r\n        if (rt.excluded.contains(sender) && !rt.excluded.contains(recipient)) {\r\n            IASReflectionFacet(address(this))._transferFromExcluded(\r\n                sender,\r\n                recipient,\r\n                amount\r\n            );\r\n        } else if (\r\n            !rt.excluded.contains(sender) && rt.excluded.contains(recipient)\r\n        ) {\r\n            IASReflectionFacet(address(this))._transferToExcluded(\r\n                sender,\r\n                recipient,\r\n                amount\r\n            );\r\n        } else if (\r\n            !rt.excluded.contains(sender) && !rt.excluded.contains(recipient)\r\n        ) {\r\n            IASReflectionFacet(address(this))._transferStandard(\r\n                sender,\r\n                recipient,\r\n                amount\r\n            );\r\n        } else if (\r\n            rt.excluded.contains(sender) && rt.excluded.contains(recipient)\r\n        ) {\r\n            IASReflectionFacet(address(this))._transferBothExcluded(\r\n                sender,\r\n                recipient,\r\n                amount\r\n            );\r\n        } else {\r\n            revert ASLib.CannotRecognizeAddressesInExcludedList(\r\n                sender,\r\n                recipient\r\n            );\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/ASFeeAdvisorFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"../ASLib.sol\";\r\nimport \"../../facetsFramework/diamondBase/facets/BaseFacet.sol\";\r\nimport \"./interfaces/IASFeeAdvisorFacet.sol\";\r\n\r\ncontract ASFeeAdvisorFacet is BaseFacet, IASFeeAdvisorFacet {\r\n    /// @notice Returns the amount of fee based on who and what amount be transferred and placed fee upon. For now returns constantly zero.\r\n    /// @param amount An amount of tokens of an entity which the advise about fees be based on.\r\n    function advise(uint256 amount) external override pure returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/ASInitializerFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nimport \"./interfaces/IASInitializerFacet.sol\";\r\nimport \"./interfaces/IASEip20Facet.sol\";\r\nimport \"../ASLib.sol\";\r\nimport \"../../facetsFramework/diamondBase/facets/BaseFacet.sol\";\r\n\r\ncontract ASInitializerFacet is BaseFacet, IASInitializerFacet {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function initialize(\r\n        address owner,\r\n        address stakingToken,\r\n        address rewardToken\r\n    ) external override {\r\n        InitializerLib.initialize();\r\n        RolesManagementLib.grantRole(owner, RolesManagementLib.OWNER_ROLE);\r\n        ASLib.Primitives storage p = ASLib.get().p;\r\n        p.rewardToken = rewardToken;\r\n        p.stakingToken = stakingToken;\r\n        p.name = string(\r\n            abi.encodePacked(ASLib.NAME_PREFIX, \" via autoreflection\")\r\n        );\r\n        p.symbol = string(abi.encodePacked(ASLib.SYMBOL_PREFIX, \"LOCUS\"));\r\n        p.decimals = 18;\r\n    }\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/ASReflectionFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport \"../../facetsFramework/diamondBase/facets/BaseFacet.sol\";\r\nimport \"./interfaces/IASReflectionFacet.sol\";\r\nimport \"./interfaces/IASReflectionLoupeFacet.sol\";\r\nimport \"./interfaces/IASEip20Facet.sol\";\r\nimport \"../ASLib.sol\";\r\n\r\ncontract ASReflectionFacet is IASReflectionFacet, BaseFacet {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    function _mintTo(\r\n        address who,\r\n        uint256 tAmount\r\n    ) external override internalOnly {\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        ASLib.Primitives storage p = ASLib.get().p;\r\n        p.tTotal += tAmount;\r\n        this._updateTotalReflection();\r\n        if (p.tTotal == 0 && p.rTotal == 0) {\r\n            rt.rOwned[who] = p.rTotal;\r\n            IASEip20Facet(address(this))._emitTransferEvent(\r\n                address(0),\r\n                who,\r\n                tAmount\r\n            );\r\n        } else {\r\n            ASLib.Values memory values = IASReflectionLoupeFacet(address(this))\r\n                ._getValues(tAmount);\r\n            if (rt.excluded.contains(who)) {\r\n                rt.tOwned[who] += values.t.tTransferAmount;\r\n                rt.rOwned[who] += values.r.rTransferAmount;\r\n            } else {\r\n                rt.rOwned[who] += values.r.rTransferAmount;\r\n            }\r\n            _reflectFee(values.r.rFee, values.t.tFee);\r\n            IASEip20Facet(address(this))._emitTransferEvent(\r\n                address(0),\r\n                who,\r\n                values.t.tTransferAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function _burnFrom(\r\n        address who,\r\n        uint256 tAmount\r\n    ) external override internalOnly {\r\n        ASLib.Values memory values = IASReflectionLoupeFacet(address(this))\r\n            ._getValues(tAmount);\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        ASLib.get().p.tTotal -= tAmount;\r\n        this._updateTotalReflection();\r\n        if (rt.excluded.contains(who)) {\r\n            rt.tOwned[who] -= tAmount;\r\n            rt.rOwned[who] -= values.r.rAmount;\r\n        } else {\r\n            rt.rOwned[who] -= values.r.rTransferAmount;\r\n        }\r\n        _reflectFee(values.r.rFee, values.t.tFee);\r\n        IASEip20Facet(address(this))._emitTransferEvent(\r\n            who,\r\n            address(0),\r\n            values.t.tTransferAmount\r\n        );\r\n    }\r\n\r\n    function _updateTotalReflection() external override internalOnly {\r\n        ASLib.Primitives storage p = ASLib.get().p;\r\n        p.rTotal = type(uint256).max - (type(uint256).max % p.tTotal);\r\n    }\r\n\r\n    function excludeAccount(address account) external override delegatedOnly {\r\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.OWNER_ROLE);\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        if (!rt.excluded.add(account)) revert ASLib.AlreadyExcluded(account);\r\n        if (rt.rOwned[account] > 0) {\r\n            rt.tOwned[account] = IASReflectionLoupeFacet(address(this))\r\n                .tokenFromReflection(rt.rOwned[account]);\r\n            emit AddressStatus(account, true);\r\n        }\r\n    }\r\n\r\n    function includeAccount(address account) external override delegatedOnly {\r\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.OWNER_ROLE);\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        if (!rt.excluded.remove(account)) revert ASLib.AlreadyIncluded(account);\r\n        rt.tOwned[account] = 0;\r\n        emit AddressStatus(account, false);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) external override internalOnly {\r\n        ASLib.Values memory values = IASReflectionLoupeFacet(address(this))\r\n            ._getValues(tAmount);\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        rt.rOwned[sender] -= values.r.rAmount;\r\n        rt.rOwned[recipient] += values.r.rTransferAmount;\r\n        _reflectFee(values.r.rFee, values.t.tFee);\r\n        IASEip20Facet(address(this))._emitTransferEvent(\r\n            sender,\r\n            recipient,\r\n            values.t.tTransferAmount\r\n        );\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) external override internalOnly {\r\n        ASLib.Values memory values = IASReflectionLoupeFacet(address(this))\r\n            ._getValues(tAmount);\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        rt.rOwned[sender] -= values.r.rAmount;\r\n        rt.tOwned[recipient] += values.t.tTransferAmount;\r\n        rt.rOwned[recipient] += values.r.rTransferAmount;\r\n        _reflectFee(values.r.rFee, values.t.tFee);\r\n        IASEip20Facet(address(this))._emitTransferEvent(\r\n            sender,\r\n            recipient,\r\n            values.t.tTransferAmount\r\n        );\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) external override internalOnly {\r\n        ASLib.Values memory values = IASReflectionLoupeFacet(address(this))\r\n            ._getValues(tAmount);\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        rt.tOwned[sender] -= tAmount;\r\n        rt.rOwned[sender] -= values.r.rAmount;\r\n        rt.rOwned[recipient] += values.r.rTransferAmount;\r\n        _reflectFee(values.r.rFee, values.t.tFee);\r\n        IASEip20Facet(address(this))._emitTransferEvent(\r\n            sender,\r\n            recipient,\r\n            values.t.tTransferAmount\r\n        );\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) external override internalOnly {\r\n        ASLib.Values memory values = IASReflectionLoupeFacet(address(this))\r\n            ._getValues(tAmount);\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        rt.tOwned[sender] -= tAmount;\r\n        rt.rOwned[sender] -= values.r.rAmount;\r\n        rt.tOwned[recipient] += values.t.tTransferAmount;\r\n        rt.rOwned[recipient] += values.r.rTransferAmount;\r\n        _reflectFee(values.r.rFee, values.t.tFee);\r\n        IASEip20Facet(address(this))._emitTransferEvent(\r\n            sender,\r\n            recipient,\r\n            values.t.tTransferAmount\r\n        );\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) internal {\r\n        ASLib.Primitives storage p = ASLib.get().p;\r\n        p.rTotal -= rFee;\r\n        p.tFeeTotal += tFee;\r\n        emit FeeReflected(tFee);\r\n    }\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/ASReflectionLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\n\r\nimport \"./interfaces/IASReflectionLoupeFacet.sol\";\r\nimport \"./interfaces/IASFeeAdvisorFacet.sol\";\r\nimport \"../../facetsFramework/diamondBase/facets/BaseFacet.sol\";\r\nimport \"../ASLib.sol\";\r\n\r\ncontract ASReflectionLoupeFacet is BaseFacet, IASReflectionLoupeFacet {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    function isExcluded(\r\n        address account\r\n    ) external view override delegatedOnly returns (bool) {\r\n        return ASLib.get().rt.excluded.contains(account);\r\n    }\r\n\r\n    function reflectionFromToken(\r\n        uint256 tAmount,\r\n        bool addTransferFee\r\n    ) external view override delegatedOnly returns (uint256) {\r\n        if (!addTransferFee) {\r\n            return this._getValues(tAmount).r.rAmount;\r\n        } else {\r\n            return this._getValues(tAmount).r.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(\r\n        uint256 rAmount\r\n    ) external view override delegatedOnly returns (uint256) {\r\n        return rAmount / this._getRate();\r\n    }\r\n\r\n    function _getValues(\r\n        uint256 tAmount\r\n    ) external view internalOnly returns (ASLib.Values memory) {\r\n        ASLib.TValues memory tValues = this._getTValues(tAmount);\r\n        uint256 currentRate = this._getRate();\r\n        ASLib.RValues memory rValues = this._getRValues(\r\n            tAmount,\r\n            tValues.tFee,\r\n            currentRate\r\n        );\r\n        return\r\n            ASLib.Values({\r\n                r: ASLib.RValues({\r\n                    rAmount: rValues.rAmount,\r\n                    rTransferAmount: rValues.rTransferAmount,\r\n                    rFee: rValues.rFee\r\n                }),\r\n                t: ASLib.TValues({\r\n                    tTransferAmount: tValues.tTransferAmount,\r\n                    tFee: tValues.tFee\r\n                })\r\n            });\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount\r\n    ) external view override internalOnly returns (ASLib.TValues memory) {\r\n        uint256 tFee = IASFeeAdvisorFacet(address(this)).advise(tAmount);\r\n        uint256 tTransferAmount = tAmount - tFee;\r\n        return ASLib.TValues({tTransferAmount: tTransferAmount, tFee: tFee});\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 currentRate\r\n    ) external view override internalOnly returns (ASLib.RValues memory) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee;\r\n        return\r\n            ASLib.RValues({\r\n                rAmount: rAmount,\r\n                rTransferAmount: rTransferAmount,\r\n                rFee: rFee\r\n            });\r\n    }\r\n\r\n    function _getRate() external view override internalOnly returns (uint256) {\r\n        ASLib.Supply memory supply = this._getCurrentSupply();\r\n        return supply.rSupply / supply.tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply()\r\n        external\r\n        view\r\n        override\r\n        internalOnly\r\n        returns (ASLib.Supply memory)\r\n    {\r\n        ASLib.Primitives storage p = ASLib.get().p;\r\n        ASLib.ReferenceTypes storage rt = ASLib.get().rt;\r\n        uint256 rSupply = p.rTotal;\r\n        uint256 tSupply = p.tTotal;\r\n        uint256 excludedSize = rt.excluded.length();\r\n        for (uint256 i = 0; i < excludedSize; i++) {\r\n            address excludedAddr = rt.excluded.at(i);\r\n            if (\r\n                rt.rOwned[excludedAddr] > rSupply ||\r\n                rt.tOwned[excludedAddr] > tSupply\r\n            ) {\r\n                return ASLib.Supply({rSupply: p.rTotal, tSupply: p.tTotal});\r\n            }\r\n            rSupply -= rt.rOwned[excludedAddr];\r\n            tSupply -= rt.tOwned[excludedAddr];\r\n        }\r\n        if (rSupply < p.rTotal / p.tTotal) {\r\n            return ASLib.Supply({rSupply: p.rTotal, tSupply: p.tTotal});\r\n        }\r\n        return ASLib.Supply({rSupply: rSupply, tSupply: tSupply});\r\n    }\r\n\r\n    function getPrimitives() external view override delegatedOnly returns (ASLib.Primitives memory) {\r\n        return ASLib.get().p;\r\n    }\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/interfaces/IASDepositaryFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IASDepositaryFacet {\r\n    event Staked(uint256 indexed amount);\r\n    event Withdrawn(uint256 indexed amount);\r\n    event RewardAdded(uint256 indexed amount);\r\n\r\n    function stake(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function notifyRewardAmount(uint256 amount) external;\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/interfaces/IASEip20Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\ninterface IASEip20Facet is IERC20Metadata {\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external returns (bool);\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external returns (bool);\r\n\r\n    function _emitTransferEvent(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/interfaces/IASFeeAdvisorFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IASFeeAdvisorFacet {\r\n    function advise(uint256 amount) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/interfaces/IASInitializerFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IASInitializerFacet {\r\n    /// @notice An initializer function for Locus Token owner and starting state of the inflation.\r\n    /// @param owner An address for the governing purposes.\r\n    /// @param stakingToken A token that should be staked in.\r\n    /// @param rewardToken A token that should be distributed through the staking mechanism.\r\n    function initialize(\r\n        address owner,\r\n        address stakingToken,\r\n        address rewardToken\r\n    ) external;\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/interfaces/IASReflectionFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IASReflectionFacet {\r\n    event FeeReflected(uint256 indexed amount);\r\n    event AddressStatus(address indexed who, bool indexed isExcluded);\r\n\r\n    function _burnFrom(address who, uint256 tAmount) external;\r\n\r\n    function _mintTo(address who, uint256 tAmount) external;\r\n\r\n    function excludeAccount(address account) external;\r\n\r\n    function includeAccount(address account) external;\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) external;\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) external;\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) external;\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) external;\r\n\r\n    function _updateTotalReflection() external;\r\n}\r\n"
    },
    "contracts/diamonds/autoreflectiveStaking/v1/interfaces/IASReflectionLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"../../ASLib.sol\";\r\n\r\ninterface IASReflectionLoupeFacet {\r\n    function isExcluded(address account) external view returns (bool);\r\n\r\n    function reflectionFromToken(\r\n        uint256 tAmount,\r\n        bool addTransferFee\r\n    ) external view returns (uint256);\r\n\r\n    function tokenFromReflection(\r\n        uint256 rAmount\r\n    ) external view returns (uint256);\r\n\r\n    function _getValues(\r\n        uint256 tAmount\r\n    ) external view returns (ASLib.Values memory);\r\n\r\n    function _getTValues(\r\n        uint256 tAmount\r\n    ) external view returns (ASLib.TValues memory);\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 currentRate\r\n    ) external view returns (ASLib.RValues memory);\r\n\r\n    function _getRate() external view returns (uint256);\r\n\r\n    function _getCurrentSupply() external view returns (ASLib.Supply memory);\r\n\r\n    function getPrimitives() external view returns (ASLib.Primitives memory);\r\n}\r\n"
    },
    "contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\nimport \"../libraries/PausabilityLib.sol\";\r\nimport \"../libraries/InitializerLib.sol\";\r\nimport \"../libraries/RolesManagementLib.sol\";\r\n\r\nabstract contract BaseFacet is Initializable {\r\n    error DelegatedCallsOnly();\r\n    \r\n    /// @dev An address of the actual contract instance. The original address as part of the context.\r\n    address internal immutable __self = address(this);\r\n\r\n    function enforceDelegatedOnly() internal view {\r\n        if (address(this) == __self || !InitializerLib.get().initialized) {\r\n            revert DelegatedCallsOnly();\r\n        }\r\n    }\r\n\r\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\r\n    /// optimization - the modifier uses an internal function call.\r\n    modifier delegatedOnly {\r\n        enforceDelegatedOnly();\r\n        _;\r\n    }\r\n\r\n    modifier internalOnly {\r\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\r\n        _;\r\n    }\r\n}"
    },
    "contracts/diamonds/facetsFramework/diamondBase/interfaces/IRolesManagement.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IRolesManagement {\r\n    function revokeRoles(address[] calldata entities, bytes32[] calldata roles) external;\r\n    function grantRoles(address[] calldata entities, bytes32[] calldata roles) external;\r\n    function grantRole(address who, bytes32 role) external;\r\n    function revokeRole(address who, bytes32 role) external;\r\n    function hasRole(address who, bytes32 role) external view returns (bool);\r\n}"
    },
    "contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nlibrary InitializerLib {\r\n    error AlreadyInitialized();\r\n    error NotImplemented();\r\n\r\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage.locus.initializer\");\r\n\r\n    struct Storage {\r\n        bool initialized;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n\r\n    function reset() internal {\r\n        get().initialized = false;\r\n    }\r\n\r\n    function initialize() internal {\r\n        if (get().initialized) {\r\n            revert AlreadyInitialized();\r\n        } else {\r\n            get().initialized = true;\r\n        }\r\n    }\r\n}"
    },
    "contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nlibrary PausabilityLib {\r\n    error OnlyWhenNotPaused();\r\n    \r\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage.locus.pausability\");\r\n\r\n    struct Storage {\r\n        bool paused;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n}"
    },
    "contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nlibrary RolesManagementLib {\r\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\r\n\r\n    error HasNoRole(address who, bytes32 role);\r\n    error HasNoRoles(address who, bytes32[] roles);\r\n\r\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage.locus.roles\");\r\n\r\n    // roles to check with EOA\r\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\r\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\r\n\r\n    // A special role - must not be removed.\r\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\r\n\r\n    // roles to check with smart-contracts\r\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\r\n\r\n    struct Storage {\r\n        mapping(bytes32 => mapping(address => bool)) roles;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n\r\n    function enforceRole(address who, bytes32 role) internal view {\r\n        if (role == INTERNAL_ROLE) {\r\n            if (who != address(this)) {\r\n                revert HasNoRole(who, INTERNAL_ROLE);\r\n            }\r\n        } else if (!get().roles[role][who]) {\r\n            revert HasNoRole(who, role);\r\n        }\r\n        \r\n    }\r\n\r\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\r\n        return get().roles[role][who];\r\n    }\r\n\r\n    function enforceSenderRole(bytes32 role) internal view {\r\n        enforceRole(msg.sender, role);\r\n    }\r\n\r\n    function grantRole(address who, bytes32 role) internal {\r\n        get().roles[role][who] = true; \r\n        emit RoleSet(who, role, true);\r\n    }\r\n\r\n    function revokeRole(address who, bytes32 role) internal {\r\n        get().roles[role][who] = false; \r\n        emit RoleSet(who, role, false);\r\n    }\r\n\r\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\r\n        bool result;\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n            if (roles[i] == INTERNAL_ROLE) {\r\n                result = result || who == address(this);\r\n            } else {\r\n                result = result || get().roles[roles[i]][who];\r\n            }\r\n        }\r\n        if (!result) {\r\n            revert HasNoRoles(who, roles);\r\n        }\r\n    }\r\n\r\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\r\n        enforceEitherOfRoles(msg.sender, roles);\r\n    }\r\n}"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}