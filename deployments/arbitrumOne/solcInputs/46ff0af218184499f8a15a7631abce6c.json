{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\n\r\nimport \"../libraries/PausabilityLib.sol\";\r\nimport \"../libraries/InitializerLib.sol\";\r\nimport \"../libraries/RolesManagementLib.sol\";\r\n\r\nabstract contract BaseFacet is Initializable {\r\n    error DelegatedCallsOnly();\r\n    \r\n    /// @dev An address of the actual contract instance. The original address as part of the context.\r\n    address internal immutable __self = address(this);\r\n\r\n    function enforceDelegatedOnly() internal view {\r\n        if (address(this) == __self || !InitializerLib.get().initialized) {\r\n            revert DelegatedCallsOnly();\r\n        }\r\n    }\r\n\r\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\r\n    /// optimization - the modifier uses an internal function call.\r\n    modifier delegatedOnly {\r\n        enforceDelegatedOnly();\r\n        _;\r\n    }\r\n\r\n    modifier internalOnly {\r\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\r\n        _;\r\n    }\r\n}"
    },
    "contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nlibrary InitializerLib {\r\n    error AlreadyInitialized();\r\n    error NotImplemented();\r\n\r\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage.locus.initializer\");\r\n\r\n    struct Storage {\r\n        bool initialized;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n\r\n    function reset() internal {\r\n        get().initialized = false;\r\n    }\r\n\r\n    function initialize() internal {\r\n        if (get().initialized) {\r\n            revert AlreadyInitialized();\r\n        } else {\r\n            get().initialized = true;\r\n        }\r\n    }\r\n}"
    },
    "contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nlibrary PausabilityLib {\r\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage.locus.pausability\");\r\n\r\n    struct Storage {\r\n        bool paused;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n}"
    },
    "contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nlibrary RolesManagementLib {\r\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\r\n\r\n    error HasNoRole(address who, bytes32 role);\r\n    error HasNoRoles(address who, bytes32[] roles);\r\n\r\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage.locus.roles\");\r\n\r\n    // roles to check with EOA\r\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\r\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\r\n\r\n    // A special role - must not be removed.\r\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\r\n\r\n    // roles to check with smart-contracts\r\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\r\n\r\n    struct Storage {\r\n        mapping(bytes32 => mapping(address => bool)) roles;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n\r\n    function enforceRole(address who, bytes32 role) internal view {\r\n        if (role == INTERNAL_ROLE) {\r\n            if (who != address(this)) {\r\n                revert HasNoRole(who, INTERNAL_ROLE);\r\n            }\r\n        } else if (!get().roles[role][who]) {\r\n            revert HasNoRole(who, role);\r\n        }\r\n        \r\n    }\r\n\r\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\r\n        return get().roles[role][who];\r\n    }\r\n\r\n    function enforceSenderRole(bytes32 role) internal view {\r\n        enforceRole(msg.sender, role);\r\n    }\r\n\r\n    function grantRole(address who, bytes32 role) internal {\r\n        get().roles[role][who] = true; \r\n        emit RoleSet(who, role, true);\r\n    }\r\n\r\n    function revokeRole(address who, bytes32 role) internal {\r\n        get().roles[role][who] = false; \r\n        emit RoleSet(who, role, false);\r\n    }\r\n\r\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\r\n        bool result;\r\n        for (uint256 i = 0; i < roles.length; i++) {\r\n            if (roles[i] == INTERNAL_ROLE) {\r\n                result = result || who == address(this);\r\n            } else {\r\n                result = result || get().roles[roles[i]][who];\r\n            }\r\n        }\r\n        if (!result) {\r\n            revert HasNoRoles(who, roles);\r\n        }\r\n    }\r\n\r\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\r\n        enforceEitherOfRoles(msg.sender, roles);\r\n    }\r\n}"
    },
    "contracts/diamonds/facetsFramework/tokensDistributor/TDLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\r\nlibrary TDLib {\r\n    error InvalidOffset(uint256 offset);\r\n    error IntervalsMustBeSorted();\r\n    error NothingWasFound();\r\n    error IncorrectLengths(uint256 l1, uint256 l2);\r\n\r\n    event ReceiverAltered(\r\n        address indexed receiver,\r\n        uint256 indexed share,\r\n        bool indexed isBlocked,\r\n        uint256 sumOfShares\r\n    );\r\n    event Distributed(\r\n        uint256 indexed distributedValue,\r\n        uint256 indexed tokensLeftAndSentToGovernance\r\n    );\r\n\r\n    bytes32 constant LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION =\r\n        keccak256(\"diamond.standard.diamond.storage.locus.token_distribution\");\r\n\r\n    uint16 public constant MAX_BPS = 10000;\r\n\r\n    struct DistributionReceiver {\r\n        uint256 share;\r\n        uint256 previousShare;\r\n        address receiver;\r\n        bool isBlocked;\r\n    }\r\n\r\n    struct Storage {\r\n        mapping(address => uint32) startTimestamps;\r\n        uint32[] distributionDurationPoints;\r\n        mapping(uint256 => uint256) distributionDurationPointIdxToAmounts;\r\n        DistributionReceiver[] distributionReceivers;\r\n        uint256 sumOfShares;\r\n        address undistributedAmountsReceiver;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n\r\n    function getAmountToDistribute(\r\n        address entity\r\n    ) internal view returns (uint256 distributionAmount, uint256 distributionDurationPointIdx) {\r\n        uint32 startStakingTime = get().startTimestamps[entity];\r\n        if (block.timestamp > startStakingTime) {\r\n            uint32 timeCounter = startStakingTime;\r\n            uint256 distributionDurationPointsLen = get()\r\n                .distributionDurationPoints\r\n                .length;\r\n            uint256 idx;\r\n            for (idx; idx < distributionDurationPointsLen; idx++) {\r\n                uint32 distributionDurationPoint = get()\r\n                    .distributionDurationPoints[idx];\r\n                if (block.timestamp < timeCounter + distributionDurationPoint) {\r\n                    break;\r\n                } else {\r\n                    timeCounter += distributionDurationPoint;\r\n                }\r\n            }\r\n            distributionAmount = get().distributionDurationPointIdxToAmounts[\r\n                idx\r\n            ];\r\n            distributionDurationPointIdx = idx;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/diamonds/facetsFramework/tokensDistributor/v1/interfaces/ITDManagementFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\ninterface ITDManagementFacet {\r\n    function addReceiver(\r\n        address feeReceiver,\r\n        uint256 share,\r\n        bool status\r\n    ) external;\r\n\r\n    function setReceiverShare(address feeReceiver, uint256 share) external;\r\n\r\n    function setReceiverStatus(address feeReceiver, bool status) external;\r\n}\r\n"
    },
    "contracts/diamonds/locusToken/LTLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\r\nlibrary LTLib {\r\n    error EpochIsDistributed(uint256 epochNumber);\r\n\r\n    event EpochAmountIsEmptyOrInflationHasntStarted();\r\n\r\n    bytes32 constant LOCUS_TOKEN_STORAGE_POSITION =\r\n        keccak256(\"diamond.standard.diamond.storage.locus_token\");\r\n\r\n    bytes32 public constant ALLOWANCE_FREE_ROLE = keccak256('ALLOWANCE_FREE_ROLE');\r\n\r\n    string public constant originalName = \"Locus Token\";\r\n    string public constant originalSymbol = \"LCS\";\r\n\r\n    uint256 public constant INITIAL_SUPPLY = 15_000_000 ether;\r\n\r\n    struct Storage {\r\n        mapping(uint256 => bool) isEpochsInflationDistributed;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = LOCUS_TOKEN_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n}"
    },
    "contracts/diamonds/locusToken/v1/autocracy/interfaces/ILTAutocracyFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface ILTAutocracyFacet {\r\n    function establishAutocracy() external;\r\n\r\n    function defeatAutocracyForever() external;\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function mint(address who, uint256 amount) external;\r\n\r\n    function areAutocratsReign() external view returns (bool);\r\n}\r\n"
    },
    "contracts/diamonds/locusToken/v1/autocracy/libraries/AutocracyLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\r\nlibrary AutocracyLib {\r\n    bytes32 constant LOCUS_TOKEN_AUTOCRACY_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage.locus_token.autocracy\");\r\n\r\n    bytes32 public constant AUTOCRAT_ROLE = keccak256('AUTOCRAT_ROLE');\r\n    bytes32 public constant REVOLUTIONARY_ROLE = keccak256('REVOLUTIONARY_ROLE');\r\n\r\n    struct Storage {\r\n        // True - then the tokens can be transferrable only to a restricted set of addresses.\r\n        bool isAutocracyEnabled;\r\n    }\r\n\r\n    function get() internal pure returns (Storage storage s) {\r\n        bytes32 position = LOCUS_TOKEN_AUTOCRACY_STORAGE_POSITION;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n}"
    },
    "contracts/diamonds/locusToken/v1/interfaces/ILTERC20Facet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILTERC20Facet is IERC20 {\r\n    function mintTo(address account, uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function delegateTo(address delegatee) external;\r\n\r\n    /// @notice To be able to vote for something by themselves a holder must call it first to delegate\r\n    /// all voting power they have to themselves.\r\n    function enablePolitics() external;\r\n\r\n    function getVotingPower(address account) external view returns (uint256);\r\n    \r\n    function getPastVotingPower(address account, uint256 timepoint) external view returns (uint256);\r\n\r\n    function getDelegatee(address account) external view returns (address);\r\n\r\n    function setupTokenInfo() external;\r\n}\r\n"
    },
    "contracts/diamonds/locusToken/v1/interfaces/ILTInitializerFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface ILTInitializerFacet {\r\n    /// @notice An initializer function for Locus Token owner and starting state of the inflation.\r\n    /// @param owner An address who can end and rule autocracy, and mint inflation of LCS tokens.\r\n    function initialize(address owner) external;\r\n\r\n    /// @notice A setter function for Locus Token inflation receivers.\r\n    /// @param distributionReceivers Addresses of receivers (ex. Locus Staking or Vault Token Staking contracts.)\r\n    /// @param distributionReceiversShares Shares of addresses of `distributionReceivers`.\r\n    /// @param distributionDurationPoints Durations from the start of inflation. \r\n    /// (If time between epochs is constant, like month for example, then all of the values would be equal to month is seconds.)\r\n    /// @param amountsPerEpochs An amount of Locus Tokens to be minted per epoch.\r\n    function setupInflation(\r\n        address[] calldata distributionReceivers,\r\n        uint256[] calldata distributionReceiversShares,\r\n        uint32[] calldata distributionDurationPoints,\r\n        uint256[][] calldata amountsPerEpochs\r\n    ) external;\r\n\r\n    function setupTokenInfoAndEstablishAutocracy() external;\r\n}\r\n"
    },
    "contracts/diamonds/locusToken/v1/LTInitializerFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./interfaces/ILTERC20Facet.sol\";\r\nimport \"./interfaces/ILTInitializerFacet.sol\";\r\nimport \"../LTLib.sol\";\r\nimport \"../../facetsFramework/diamondBase/facets/BaseFacet.sol\";\r\nimport \"../../facetsFramework/tokensDistributor/TDLib.sol\";\r\nimport \"../../facetsFramework/tokensDistributor/v1/interfaces/ITDManagementFacet.sol\";\r\n\r\nimport \"./autocracy/interfaces/ILTAutocracyFacet.sol\";\r\nimport \"./autocracy/libraries/AutocracyLib.sol\";\r\n\r\ncontract LTInitializerFacet is BaseFacet, ILTInitializerFacet {\r\n    function initialize(address owner) external override {\r\n        InitializerLib.initialize();\r\n        TDLib.Storage storage s = TDLib.get();\r\n        // Initialize the start of inflation.\r\n        // address(0) is utilized because for every receiver we have one time of inflation start.\r\n        s.startTimestamps[address(0)] = uint32(block.timestamp);\r\n        s.undistributedAmountsReceiver = owner;\r\n\r\n        RolesManagementLib.grantRole(owner, RolesManagementLib.OWNER_ROLE);\r\n        RolesManagementLib.grantRole(owner, AutocracyLib.REVOLUTIONARY_ROLE);\r\n        RolesManagementLib.grantRole(owner, AutocracyLib.AUTOCRAT_ROLE);\r\n    }\r\n\r\n    function setupTokenInfoAndEstablishAutocracy() external override delegatedOnly {\r\n        ILTERC20Facet(address(this)).setupTokenInfo();\r\n        ILTAutocracyFacet(address(this)).establishAutocracy();\r\n    }\r\n\r\n    function setupInflation(\r\n        address[] calldata distributionReceivers,\r\n        uint256[] calldata distributionReceiversShares,\r\n        uint32[] calldata distributionDurationPoints,\r\n        uint256[][] calldata amountsPerEpochs\r\n    ) external override delegatedOnly {\r\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.OWNER_ROLE);\r\n        if (distributionReceivers.length == 0) {\r\n            revert TDLib.IncorrectLengths(distributionReceivers.length, 0);\r\n        }\r\n        if (\r\n            distributionReceivers.length != distributionReceiversShares.length\r\n        ) {\r\n            revert TDLib.IncorrectLengths(\r\n                distributionReceivers.length,\r\n                distributionReceiversShares.length\r\n            );\r\n        }\r\n        if (amountsPerEpochs.length != distributionReceivers.length) {\r\n            revert TDLib.IncorrectLengths(\r\n                amountsPerEpochs.length,\r\n                distributionReceivers.length\r\n            );\r\n        }\r\n        if (distributionDurationPoints.length != amountsPerEpochs[0].length) {\r\n            revert TDLib.IncorrectLengths(\r\n                distributionDurationPoints.length,\r\n                amountsPerEpochs[0].length\r\n            );\r\n        }\r\n\r\n        TDLib.Storage storage s = TDLib.get();\r\n        uint32 maxDistributionPoint;\r\n        for (uint256 i = 0; i < distributionDurationPoints.length; i++) {\r\n            if (distributionDurationPoints[i] > maxDistributionPoint) {\r\n                maxDistributionPoint = distributionDurationPoints[i];\r\n            } else {\r\n                revert TDLib.IntervalsMustBeSorted();\r\n            }\r\n\r\n            // Greedily initialize the storage.\r\n            for (uint256 j = 0; j < distributionReceivers.length; j++) {\r\n                // It has to be equal to a sum of tokens belonging to every distribution receiver per epoch.\r\n                // This maps a duration points (an interval from startTimestamp[...] to a certain point in time represented by the duration of the interval)\r\n                // to an amount that has to be distributed to each epoch.\r\n                s.distributionDurationPointIdxToAmounts[i] = amountsPerEpochs[j][i];\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < distributionReceivers.length; i++) {\r\n            ITDManagementFacet(address(this)).addReceiver(\r\n                distributionReceivers[i],\r\n                distributionReceiversShares[i],\r\n                false\r\n            );\r\n        }\r\n        s.distributionDurationPoints = distributionDurationPoints;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}