{
  "address": "0x8c192b7B04682421136cAb91beFAe09817f30C1d",
  "abi": [
    {
      "inputs": [],
      "name": "DelegatedCallsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        }
      ],
      "name": "HasNoRoles",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isBlocked",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sumOfShares",
          "type": "uint256"
        }
      ],
      "name": "ReceiverAltered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributionReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "addReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributionReceiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "setReceiverShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributionReceiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setReceiverStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5aa78fc3b97abe34a35ea775be2242a9488902495088c3dbe069329bd0d8c5a6",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x729F2222aaCD99619B8B660b412baE9fCEa3d90F",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "3726658",
    "logsBloom": "0x
    "blockHash": "0x02d0af1ef58baa05b29441889d97443d4dbdf82138f453fd9826435a31ba6e30",
    "transactionHash": "0x5aa78fc3b97abe34a35ea775be2242a9488902495088c3dbe069329bd0d8c5a6",
    "logs": [],
    "blockNumber": 153447074,
    "cumulativeGasUsed": "4235327",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f2cbd77dff83ddf9a9c16b855b9827fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DelegatedCallsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"}],\"name\":\"HasNoRoles\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isBlocked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sumOfShares\",\"type\":\"uint256\"}],\"name\":\"ReceiverAltered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributionReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributionReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"setReceiverShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributionReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setReceiverStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamonds/facetsFramework/tokensDistributor/v1/TDManagementFacet.sol\":\"TDManagementFacet\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PausabilityLib.sol\\\";\\r\\nimport \\\"../libraries/InitializerLib.sol\\\";\\r\\nimport \\\"../libraries/RolesManagementLib.sol\\\";\\r\\n\\r\\nabstract contract BaseFacet is Initializable {\\r\\n    error DelegatedCallsOnly();\\r\\n    \\r\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\r\\n    address internal immutable __self = address(this);\\r\\n\\r\\n    function enforceDelegatedOnly() internal view {\\r\\n        if (address(this) == __self || !InitializerLib.get().initialized) {\\r\\n            revert DelegatedCallsOnly();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\\r\\n    /// optimization - the modifier uses an internal function call.\\r\\n    modifier delegatedOnly {\\r\\n        enforceDelegatedOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier internalOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1a7f82f43a565fedfbd30dc7dd2c7166d065707634a7a2a8c9191525e5903363\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary InitializerLib {\\r\\n    error AlreadyInitialized();\\r\\n    error NotImplemented();\\r\\n\\r\\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.initializer\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() internal {\\r\\n        get().initialized = false;\\r\\n    }\\r\\n\\r\\n    function initialize() internal {\\r\\n        if (get().initialized) {\\r\\n            revert AlreadyInitialized();\\r\\n        } else {\\r\\n            get().initialized = true;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x28a20d1e0e0cfcbbe6c6e10bcdf2e138c97a92dfd34a5b2c5c9950c5b982dd3b\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PausabilityLib {\\r\\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.pausability\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool paused;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x90d5c29c2a59d08c67dd52c46c4af90e83e886c64a1a160e20c8aaa95febf356\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary RolesManagementLib {\\r\\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\\r\\n\\r\\n    error HasNoRole(address who, bytes32 role);\\r\\n    error HasNoRoles(address who, bytes32[] roles);\\r\\n\\r\\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.roles\\\");\\r\\n\\r\\n    // roles to check with EOA\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\n\\r\\n    // A special role - must not be removed.\\r\\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\\r\\n\\r\\n    // roles to check with smart-contracts\\r\\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceRole(address who, bytes32 role) internal view {\\r\\n        if (role == INTERNAL_ROLE) {\\r\\n            if (who != address(this)) {\\r\\n                revert HasNoRole(who, INTERNAL_ROLE);\\r\\n            }\\r\\n        } else if (!get().roles[role][who]) {\\r\\n            revert HasNoRole(who, role);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\\r\\n        return get().roles[role][who];\\r\\n    }\\r\\n\\r\\n    function enforceSenderRole(bytes32 role) internal view {\\r\\n        enforceRole(msg.sender, role);\\r\\n    }\\r\\n\\r\\n    function grantRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = true; \\r\\n        emit RoleSet(who, role, true);\\r\\n    }\\r\\n\\r\\n    function revokeRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = false; \\r\\n        emit RoleSet(who, role, false);\\r\\n    }\\r\\n\\r\\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\\r\\n        bool result;\\r\\n        for (uint256 i = 0; i < roles.length; i++) {\\r\\n            if (roles[i] == INTERNAL_ROLE) {\\r\\n                result = result || who == address(this);\\r\\n            } else {\\r\\n                result = result || get().roles[roles[i]][who];\\r\\n            }\\r\\n        }\\r\\n        if (!result) {\\r\\n            revert HasNoRoles(who, roles);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\\r\\n        enforceEitherOfRoles(msg.sender, roles);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3fd994c63d349747c7444e147045bb062e84980fa3bc01bd2af32ec00b8943b6\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/TDLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary TDLib {\\r\\n    error InvalidOffset(uint256 offset);\\r\\n    error IntervalsMustBeSorted();\\r\\n    error NothingWasFound();\\r\\n    error IncorrectLengths(uint256 l1, uint256 l2);\\r\\n\\r\\n    event ReceiverAltered(\\r\\n        address indexed receiver,\\r\\n        uint256 indexed share,\\r\\n        bool indexed isBlocked,\\r\\n        uint256 sumOfShares\\r\\n    );\\r\\n    event Distributed(\\r\\n        uint256 indexed distributedValue,\\r\\n        uint256 indexed tokensLeftAndSentToGovernance\\r\\n    );\\r\\n\\r\\n    bytes32 constant LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus.token_distribution\\\");\\r\\n\\r\\n    uint16 public constant MAX_BPS = 10000;\\r\\n\\r\\n    struct DistributionReceiver {\\r\\n        uint256 share;\\r\\n        uint256 previousShare;\\r\\n        address receiver;\\r\\n        bool isBlocked;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(address => uint32) startTimestamps;\\r\\n        uint32[] distributionDurationPoints;\\r\\n        mapping(uint256 => uint256) distributionDurationPointIdxToAmounts;\\r\\n        DistributionReceiver[] distributionReceivers;\\r\\n        uint256 sumOfShares;\\r\\n        address undistributedAmountsReceiver;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAmountToDistribute(\\r\\n        address entity\\r\\n    ) internal view returns (uint256 distributionAmount, uint256 distributionDurationPointIdx) {\\r\\n        uint32 startStakingTime = get().startTimestamps[entity];\\r\\n        if (block.timestamp > startStakingTime) {\\r\\n            uint32 timeCounter = startStakingTime;\\r\\n            uint256 distributionDurationPointsLen = get()\\r\\n                .distributionDurationPoints\\r\\n                .length;\\r\\n            uint256 idx;\\r\\n            for (idx; idx < distributionDurationPointsLen; idx++) {\\r\\n                uint32 distributionDurationPoint = get()\\r\\n                    .distributionDurationPoints[idx];\\r\\n                if (block.timestamp < timeCounter + distributionDurationPoint) {\\r\\n                    break;\\r\\n                } else {\\r\\n                    timeCounter += distributionDurationPoint;\\r\\n                }\\r\\n            }\\r\\n            distributionAmount = get().distributionDurationPointIdxToAmounts[\\r\\n                idx\\r\\n            ];\\r\\n            distributionDurationPointIdx = idx;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9124aa344752d583558cc7b9e051be04f1cd4cce0b1b2a3446109f0ae160787\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/v1/TDManagementFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/ITDManagementFacet.sol\\\";\\nimport \\\"../../diamondBase/facets/BaseFacet.sol\\\";\\nimport \\\"../TDLib.sol\\\";\\n\\ncontract TDManagementFacet is BaseFacet, ITDManagementFacet {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    function addReceiver(\\n        address distributionReceiver,\\n        uint256 share,\\n        bool status\\n    ) external override delegatedOnly {\\n        _enforceSenderOwnerOrInternal();\\n        TDLib.get().distributionReceivers.push(\\n            TDLib.DistributionReceiver({\\n                previousShare: 0,\\n                share: share,\\n                receiver: distributionReceiver,\\n                isBlocked: status\\n            })\\n        );\\n        TDLib.get().sumOfShares += share;\\n        emit TDLib.ReceiverAltered(\\n            distributionReceiver,\\n            share,\\n            status,\\n            TDLib.get().sumOfShares\\n        );\\n    }\\n\\n    function setReceiverShare(\\n        address distributionReceiver,\\n        uint256 share\\n    ) external override delegatedOnly {\\n        _enforceSenderOwnerOrInternal();\\n        uint256 len = TDLib.get().distributionReceivers.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            TDLib.DistributionReceiver storage containedReceiver = TDLib\\n                .get()\\n                .distributionReceivers[i];\\n            if (containedReceiver.receiver == distributionReceiver) {\\n                uint256 containedReceiverShare = containedReceiver.share;\\n                if (containedReceiverShare != share) {\\n                    if (containedReceiverShare > share) {\\n                        TDLib.get().sumOfShares -=\\n                            containedReceiverShare -\\n                            share;\\n                    } else {\\n                        TDLib.get().sumOfShares +=\\n                            share -\\n                            containedReceiverShare;\\n                    }\\n                    containedReceiver.share = share;\\n                }\\n                emit TDLib.ReceiverAltered(\\n                    distributionReceiver,\\n                    share,\\n                    containedReceiver.isBlocked,\\n                    TDLib.get().sumOfShares\\n                );\\n                return;\\n            }\\n        }\\n    }\\n\\n    function setReceiverStatus(\\n        address distributionReceiver,\\n        bool status\\n    ) external override delegatedOnly {\\n        _enforceSenderOwnerOrInternal();\\n        uint256 len = TDLib.get().distributionReceivers.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            TDLib.DistributionReceiver storage containedReceiver = TDLib\\n                .get()\\n                .distributionReceivers[i];\\n            if (containedReceiver.receiver == distributionReceiver) {\\n                if (containedReceiver.isBlocked != status) {\\n                    containedReceiver.isBlocked = status;\\n                    if (status) {\\n                        uint256 previousShare = containedReceiver.share;\\n                        containedReceiver.previousShare = previousShare;\\n                        containedReceiver.share = 0;\\n                        TDLib.get().sumOfShares -= previousShare;\\n                    } else {\\n                        uint256 _share = containedReceiver.previousShare;\\n                        containedReceiver.previousShare = 0;\\n                        containedReceiver.share = _share;\\n                        TDLib.get().sumOfShares += _share;\\n                    }\\n                }\\n                emit TDLib.ReceiverAltered(\\n                    distributionReceiver,\\n                    containedReceiver.share,\\n                    status,\\n                    TDLib.get().sumOfShares\\n                );\\n                return;\\n            }\\n        }\\n    }\\n\\n    function _enforceSenderOwnerOrInternal() internal view {\\n        bytes32[] memory roles = new bytes32[](2);\\n        roles[0] = RolesManagementLib.OWNER_ROLE;\\n        roles[1] = RolesManagementLib.INTERNAL_ROLE;\\n        RolesManagementLib.enforceSenderEitherOfRoles(roles);\\n    }\\n}\\n\",\"keccak256\":\"0xf9cea2db26f039680f42ffba28002a2cb02304b3384eaa81113b6bf782606a8b\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/v1/interfaces/ITDManagementFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ITDManagementFacet {\\r\\n    function addReceiver(\\r\\n        address feeReceiver,\\r\\n        uint256 share,\\r\\n        bool status\\r\\n    ) external;\\r\\n\\r\\n    function setReceiverShare(address feeReceiver, uint256 share) external;\\r\\n\\r\\n    function setReceiverStatus(address feeReceiver, bool status) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x347636e0b837036ba2829291617d223be56c85bdd82cd8e41e6b86f7dfe8d411\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100235730608052610794908161002882396080518161029a0152f35b5f80fdfe6040608081526004361015610012575f80fd5b5f90813560e01c80632647d9e5146100ab5780636d8256fa1461007f5763b8667a1c1461003d575f80fd5b3461007b5736600319011261007857610054610204565b6024358015158103610074576100719161006c610297565b610431565b80f35b8280fd5b80fd5b5080fd5b503461007b573660031901126100785761007161009a610204565b6100a2610297565b60243590610329565b503461007b57606036600319011261007b576100c5610204565b6024359060443592831515809403610200576100df610297565b6100e761055b565b805191608083016001600160401b038111848210176101ec578252838352602083018681526001600160a01b03918216848401818152606086018881525f8051602061071f8339815191528054939792959194919390600160401b8210156101d8576001820190556101589061021e565b9290926101c457926002602096935f805160206106ff83398151915298969361019f965182555160018201550192511660018060a01b031983541617825551151590610259565b5f8051602061073f833981519152906101b9868354610276565b80925551908152a480f35b634e487b7160e01b8b5260048b905260248bfd5b634e487b7160e01b8c52604160045260248cfd5b634e487b7160e01b87526041600452602487fd5b8480fd5b600435906001600160a01b038216820361021a57565b5f80fd5b5f8051602061071f8339815191528054821015610245575f52600360205f20910201905f90565b634e487b7160e01b5f52603260045260245ffd5b805460ff60a01b191691151560a01b60ff60a01b16919091179055565b9190820180921161028357565b634e487b7160e01b5f52601160045260245ffd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480156102e2575b6102d057565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a0055416156102ca565b5f1981146102835760010190565b9190820391821161028357565b61033161055b565b5f8051602061071f83398151915254915f5b8381106103505750505050565b6103598161021e565b506002810180546001600160a01b038681169391168314610385575050506103809061030e565b610343565b84955060ff9492965080919350548281036103d0575b5050505460a01c16915f805160206106ff83398151915260205f8051602061073f8339815191525494604051958652151594a4565b8280821115610407576103e29161031c565b6103fb5f8051602061073f83398151915291825461031c565b90555b55825f8061039b565b906104119161031c565b61042a5f8051602061073f833981519152918254610276565b90556103fe565b61043961055b565b5f8051602061071f83398151915254915f805b84811061045a575050505050565b6104638161021e565b506002810180546001600160a01b038781169392919081168414610493575050505061048e9061030e565b61044c565b9195935091955060ff965082151596879160a01c161515036104dd575b50505054905f805160206106ff83398151915260205f8051602061073f83398151915254604051908152a4565b816104e791610259565b1561051b5781549081600184015582556105105f8051602061073f83398151915291825461031c565b90555b5f80806104b0565b6001820190815491558082556105405f8051602061073f833981519152918254610276565b9055610513565b80518210156102455760209160051b010190565b60408051606081016001600160401b038111828210176106ea578252600281526020918282019080368337825115610245577fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8252825193600194851015610245577fddd94edc7da5bca8f576c77964a4737ba5172c728e2d539e672f0229d1e9ec2d808386015285805f9283925b61064b575b505050156105fe575050505050565b908094929451936359e2c34760e11b855260448501913360048701526024860152518091526064840194915f5b8281106106385785870386fd5b835187529581019592810192840161062b565b90919287518410156106e15781610662858a610547565b510361068a578015610681575b610679909361030e565b9190816105ea565b5033301461066f565b801561069a57610679909361030e565b506106a58388610547565b515f9081527f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e44855285812033825285528590205460ff1661066f565b928291506105ef565b634e487b7160e01b5f52604160045260245ffdfe30854b8e7daa947169d432a39b38215fd59fa6282ae4dda344bbfdcb07024e77f8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0af8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0ba2646970667358221220fecabb71bdc7353c3c8ff5666ea1d0fcdb25f6630c89558e1da43cf485b406b364736f6c63430008140033",
  "deployedBytecode": "0x6040608081526004361015610012575f80fd5b5f90813560e01c80632647d9e5146100ab5780636d8256fa1461007f5763b8667a1c1461003d575f80fd5b3461007b5736600319011261007857610054610204565b6024358015158103610074576100719161006c610297565b610431565b80f35b8280fd5b80fd5b5080fd5b503461007b573660031901126100785761007161009a610204565b6100a2610297565b60243590610329565b503461007b57606036600319011261007b576100c5610204565b6024359060443592831515809403610200576100df610297565b6100e761055b565b805191608083016001600160401b038111848210176101ec578252838352602083018681526001600160a01b03918216848401818152606086018881525f8051602061071f8339815191528054939792959194919390600160401b8210156101d8576001820190556101589061021e565b9290926101c457926002602096935f805160206106ff83398151915298969361019f965182555160018201550192511660018060a01b031983541617825551151590610259565b5f8051602061073f833981519152906101b9868354610276565b80925551908152a480f35b634e487b7160e01b8b5260048b905260248bfd5b634e487b7160e01b8c52604160045260248cfd5b634e487b7160e01b87526041600452602487fd5b8480fd5b600435906001600160a01b038216820361021a57565b5f80fd5b5f8051602061071f8339815191528054821015610245575f52600360205f20910201905f90565b634e487b7160e01b5f52603260045260245ffd5b805460ff60a01b191691151560a01b60ff60a01b16919091179055565b9190820180921161028357565b634e487b7160e01b5f52601160045260245ffd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480156102e2575b6102d057565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a0055416156102ca565b5f1981146102835760010190565b9190820391821161028357565b61033161055b565b5f8051602061071f83398151915254915f5b8381106103505750505050565b6103598161021e565b506002810180546001600160a01b038681169391168314610385575050506103809061030e565b610343565b84955060ff9492965080919350548281036103d0575b5050505460a01c16915f805160206106ff83398151915260205f8051602061073f8339815191525494604051958652151594a4565b8280821115610407576103e29161031c565b6103fb5f8051602061073f83398151915291825461031c565b90555b55825f8061039b565b906104119161031c565b61042a5f8051602061073f833981519152918254610276565b90556103fe565b61043961055b565b5f8051602061071f83398151915254915f805b84811061045a575050505050565b6104638161021e565b506002810180546001600160a01b038781169392919081168414610493575050505061048e9061030e565b61044c565b9195935091955060ff965082151596879160a01c161515036104dd575b50505054905f805160206106ff83398151915260205f8051602061073f83398151915254604051908152a4565b816104e791610259565b1561051b5781549081600184015582556105105f8051602061073f83398151915291825461031c565b90555b5f80806104b0565b6001820190815491558082556105405f8051602061073f833981519152918254610276565b9055610513565b80518210156102455760209160051b010190565b60408051606081016001600160401b038111828210176106ea578252600281526020918282019080368337825115610245577fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e8252825193600194851015610245577fddd94edc7da5bca8f576c77964a4737ba5172c728e2d539e672f0229d1e9ec2d808386015285805f9283925b61064b575b505050156105fe575050505050565b908094929451936359e2c34760e11b855260448501913360048701526024860152518091526064840194915f5b8281106106385785870386fd5b835187529581019592810192840161062b565b90919287518410156106e15781610662858a610547565b510361068a578015610681575b610679909361030e565b9190816105ea565b5033301461066f565b801561069a57610679909361030e565b506106a58388610547565b515f9081527f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e44855285812033825285528590205460ff1661066f565b928291506105ef565b634e487b7160e01b5f52604160045260245ffdfe30854b8e7daa947169d432a39b38215fd59fa6282ae4dda344bbfdcb07024e77f8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0af8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0ba2646970667358221220fecabb71bdc7353c3c8ff5666ea1d0fcdb25f6630c89558e1da43cf485b406b364736f6c63430008140033",
  "libraries": [
    "TDLib",
    "LTLib",
    "InitializerLib",
    "PausabilityLib",
    "RolesManagementLib",
    "AutocracyLib"
  ],
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}