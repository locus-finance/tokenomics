{
  "address": "0x34533AD2A4a6bA7C7877B36fc6f737A046270d44",
  "abi": [
    {
      "inputs": [],
      "name": "DelegatedCallsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "HasNoRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "areAutocratsReign",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defeatAutocracyForever",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "establishAutocracy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x59f9656ba5ebbebae2244010b89690b72ad5f42db275f03dd861d4eb301343f1",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x729F2222aaCD99619B8B660b412baE9fCEa3d90F",
    "contractAddress": null,
    "transactionIndex": 19,
    "gasUsed": "4399476",
    "logsBloom": "0x
    "blockHash": "0xc726eaf5970df7038ae7b77e85192dabd9caed60cf8a414a280ec20f13b25584",
    "transactionHash": "0x59f9656ba5ebbebae2244010b89690b72ad5f42db275f03dd861d4eb301343f1",
    "logs": [],
    "blockNumber": 153445437,
    "cumulativeGasUsed": "19466205",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8fc5e0e21590d56561f202f7e414b5a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DelegatedCallsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"HasNoRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"areAutocratsReign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defeatAutocracyForever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"establishAutocracy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamonds/locusToken/v1/autocracy/LTAutocracyFacet.sol\":\"LTAutocracyFacet\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PausabilityLib.sol\\\";\\r\\nimport \\\"../libraries/InitializerLib.sol\\\";\\r\\nimport \\\"../libraries/RolesManagementLib.sol\\\";\\r\\n\\r\\nabstract contract BaseFacet is Initializable {\\r\\n    error DelegatedCallsOnly();\\r\\n    \\r\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\r\\n    address internal immutable __self = address(this);\\r\\n\\r\\n    function enforceDelegatedOnly() internal view {\\r\\n        if (address(this) == __self || !InitializerLib.get().initialized) {\\r\\n            revert DelegatedCallsOnly();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\\r\\n    /// optimization - the modifier uses an internal function call.\\r\\n    modifier delegatedOnly {\\r\\n        enforceDelegatedOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier internalOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1a7f82f43a565fedfbd30dc7dd2c7166d065707634a7a2a8c9191525e5903363\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary InitializerLib {\\r\\n    error AlreadyInitialized();\\r\\n    error NotImplemented();\\r\\n\\r\\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.initializer\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() internal {\\r\\n        get().initialized = false;\\r\\n    }\\r\\n\\r\\n    function initialize() internal {\\r\\n        if (get().initialized) {\\r\\n            revert AlreadyInitialized();\\r\\n        } else {\\r\\n            get().initialized = true;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x28a20d1e0e0cfcbbe6c6e10bcdf2e138c97a92dfd34a5b2c5c9950c5b982dd3b\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PausabilityLib {\\r\\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.pausability\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool paused;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x90d5c29c2a59d08c67dd52c46c4af90e83e886c64a1a160e20c8aaa95febf356\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary RolesManagementLib {\\r\\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\\r\\n\\r\\n    error HasNoRole(address who, bytes32 role);\\r\\n    error HasNoRoles(address who, bytes32[] roles);\\r\\n\\r\\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.roles\\\");\\r\\n\\r\\n    // roles to check with EOA\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\n\\r\\n    // A special role - must not be removed.\\r\\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\\r\\n\\r\\n    // roles to check with smart-contracts\\r\\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceRole(address who, bytes32 role) internal view {\\r\\n        if (role == INTERNAL_ROLE) {\\r\\n            if (who != address(this)) {\\r\\n                revert HasNoRole(who, INTERNAL_ROLE);\\r\\n            }\\r\\n        } else if (!get().roles[role][who]) {\\r\\n            revert HasNoRole(who, role);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\\r\\n        return get().roles[role][who];\\r\\n    }\\r\\n\\r\\n    function enforceSenderRole(bytes32 role) internal view {\\r\\n        enforceRole(msg.sender, role);\\r\\n    }\\r\\n\\r\\n    function grantRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = true; \\r\\n        emit RoleSet(who, role, true);\\r\\n    }\\r\\n\\r\\n    function revokeRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = false; \\r\\n        emit RoleSet(who, role, false);\\r\\n    }\\r\\n\\r\\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\\r\\n        bool result;\\r\\n        for (uint256 i = 0; i < roles.length; i++) {\\r\\n            if (roles[i] == INTERNAL_ROLE) {\\r\\n                result = result || who == address(this);\\r\\n            } else {\\r\\n                result = result || get().roles[roles[i]][who];\\r\\n            }\\r\\n        }\\r\\n        if (!result) {\\r\\n            revert HasNoRoles(who, roles);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\\r\\n        enforceEitherOfRoles(msg.sender, roles);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3fd994c63d349747c7444e147045bb062e84980fa3bc01bd2af32ec00b8943b6\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/autocracy/LTAutocracyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\\\";\\r\\n\\r\\nimport \\\"../../../facetsFramework/diamondBase/facets/BaseFacet.sol\\\";\\r\\nimport \\\"./libraries/AutocracyLib.sol\\\";\\r\\nimport \\\"../interfaces/ILTERC20Facet.sol\\\";\\r\\nimport \\\"./interfaces/ILTAutocracyFacet.sol\\\";\\r\\n\\r\\ncontract LTAutocracyFacet is BaseFacet, ILTAutocracyFacet {\\r\\n    using LibDiamond for LibDiamond.DiamondStorage;\\r\\n\\r\\n    function burn(uint256 amount) external override delegatedOnly {\\r\\n        RolesManagementLib.enforceSenderRole(AutocracyLib.AUTOCRAT_ROLE);\\r\\n        ILTERC20Facet(address(this)).burnFrom(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function mint(address who, uint256 amount) external override delegatedOnly {\\r\\n        RolesManagementLib.enforceSenderRole(AutocracyLib.AUTOCRAT_ROLE);\\r\\n        ILTERC20Facet(address(this)).mintTo(who, amount);\\r\\n    }\\r\\n\\r\\n    function establishAutocracy() external override internalOnly {\\r\\n        AutocracyLib.get().isAutocracyEnabled = true;\\r\\n    }\\r\\n\\r\\n    function areAutocratsReign() external view override delegatedOnly returns (bool) {\\r\\n        return AutocracyLib.get().isAutocracyEnabled;\\r\\n    }\\r\\n\\r\\n    function defeatAutocracyForever() external override delegatedOnly {\\r\\n        RolesManagementLib.enforceSenderRole(AutocracyLib.REVOLUTIONARY_ROLE);\\r\\n        AutocracyLib.get().isAutocracyEnabled = false;\\r\\n        LibDiamond.diamondStorage().removeFunction(__self, this.defeatAutocracyForever.selector);\\r\\n        LibDiamond.diamondStorage().removeFunction(__self, this.establishAutocracy.selector);\\r\\n        LibDiamond.diamondStorage().removeFunction(__self, this.mint.selector);\\r\\n        LibDiamond.diamondStorage().removeFunction(__self, this.burn.selector);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf89687d41be1b8199ef9219f9754f9b2a755754e7ad494522838ae520dceefef\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/autocracy/interfaces/ILTAutocracyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface ILTAutocracyFacet {\\r\\n    function establishAutocracy() external;\\r\\n\\r\\n    function defeatAutocracyForever() external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function mint(address who, uint256 amount) external;\\r\\n\\r\\n    function areAutocratsReign() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xfbae47d81f4cb248e7213711c70f9a6b2cefcb865fdb8ed7d151556daa06b312\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/autocracy/libraries/AutocracyLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary AutocracyLib {\\r\\n    bytes32 constant LOCUS_TOKEN_AUTOCRACY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus_token.autocracy\\\");\\r\\n\\r\\n    bytes32 public constant AUTOCRAT_ROLE = keccak256('AUTOCRAT_ROLE');\\r\\n    bytes32 public constant REVOLUTIONARY_ROLE = keccak256('REVOLUTIONARY_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        // True - then the tokens can be transferrable only to a restricted set of addresses.\\r\\n        bool isAutocracyEnabled;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_AUTOCRACY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc57d4d6afde421bd2a17429363f40d5cf42b7cdc18c0c3a69ac4b8a69019026d\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/interfaces/ILTERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ILTERC20Facet is IERC20 {\\r\\n    function mintTo(address account, uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n\\r\\n    function delegateTo(address delegatee) external;\\r\\n\\r\\n    /// @notice To be able to vote for something by themselves a holder must call it first to delegate\\r\\n    /// all voting power they have to themselves.\\r\\n    function enablePolitics() external;\\r\\n\\r\\n    function getVotingPower(address account) external view returns (uint256);\\r\\n    \\r\\n    function getPastVotingPower(address account, uint256 timepoint) external view returns (uint256);\\r\\n\\r\\n    function getDelegatee(address account) external view returns (address);\\r\\n\\r\\n    function setupTokenInfo() external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf27eeb7ba50807c19e341c106952865ff5fa96a8433e9f1dac5ac8215f93ba11\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0xc00c16bfa30a3fa5f3dc684f7f8ba62c259962b25f647d9588739458989717fc\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x2205345e83eb86f5281f159a9215a096cb6d404782619f9b8e9d7a4a46c32a37\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0806040523461002a5730608052610c39908161002f82396080518181816102a80152610a7e0152f35b5f80fdfe60406080815260049081361015610014575f80fd5b5f91823560e01c90816306402cb31461020e57816340c10f191461018c5783826342966c681461010b575081637a7d6eaa14610093575063ce305b6614610059575f80fd5b3461008f578160031936011261008f57602090610074610a7b565b60ff5f80516020610bc4833981519152541690519015158152f35b5080fd5b919050346101075782600319360112610107573033036100ca575f80516020610bc4833981519152805460ff191660011790558280f35b604492505190632bc93d7960e21b825233908201527fddd94edc7da5bca8f576c77964a4737ba5172c728e2d539e672f0229d1e9ec2d6024820152fd5b8280fd5b8091843461018857602036600319011261018857610127610a7b565b61012f610af2565b303b1561018857826101579282518094819263079cc67960e41b835280359033908401610a60565b038183305af190811561017f575061016c5750f35b61017590610a39565b61017c5780f35b80fd5b513d84823e3d90fd5b5050fd5b9190503461010757806003193601126101075781359183906001600160a01b038416840361008f576101bc610a7b565b6101c4610af2565b303b1561008f5782516308934a5f60e31b815293849182916101ec9160243591908401610a60565b038183305af190811561017f5750610202575080f35b61020b90610a39565b80f35b83833461008f578160031936011261008f57610228610a7b565b7fdf419335cd51a12d91577b23bb1f2f1d297c4dd78f8c580b21e3d68c0742aa528083526020907f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e448252828420338552825260ff838520541615610a1b57505f80516020610bc4833981519152805460ff191690556001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821680156109b85730811461095e576306402cb360e01b8086527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c808452858720548388527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d808652878920549096935f1993928483019260a082901c908411610685578b888b838e888e960361090f575b50505090525050878752888a20805480156105f05785019061039061037e8383610b6b565b63ffffffff82549160031b1b19169055565b55895281865288888120551561087e575b633d3eb75560e11b80895281865287892054858a52878752888a205484810192919060a082901c908411610685578b888b838e888e960361082f575b50505090525050878752888a20805480156105f05785019061040261037e8383610b6b565b55895281865288888120551561079e575b6340c10f1960e01b80895281865287892054858a52878752888a205484810192919060a082901c908411610685578b888b838e888e960361074f575b50505090525050878752888a20805480156105f05785019061047461037e8383610b6b565b558952818652888881205515610698575b630852cd8d60e31b80895281865287892054858a52878752888a20548481019392919060a082901c908511610685578b888b838e898e9603610603575b50505090525050878752888a20805480156105f0578501906104e761037e8383610b6b565b55895285528787812055156104fa578680f35b5f80516020610be4833981519152918254908282019182116105dd578489528686526001888a2001549180830361058c575b5050508154801561057957879850906001969594939291019061056661055183610ba0565b81549060018060a01b039060031b1b19169055565b5585525282200155808280808080808680f35b634e487b7160e01b885260318952602488fd5b61059590610ba0565b90549060031b1c166105c9816105aa84610ba0565b90919082549060031b9160018060a01b03809116831b921b1916179055565b88528585526001878920015588808061052c565b634e487b7160e01b895260118a52602489fd5b634e487b7160e01b8c5260318d5260248cfd5b846106339385610650975280885261061d8c848420610b6b565b90549060031b1c60e01b97889683525220610b6b565b90919063ffffffff83549160031b9260e01c831b921b1916179055565b6001600160e01b0319168b52828852898b2080546001600160a01b03199092169187169190911790558b878b888b848e6104c2565b634e487b7160e01b8c5260118d5260248cfd5b5f80516020610be4833981519152805483810190811161073c57858a528787528460018a8c2001549180830361070a575b505050805480156106f7578301906106e361055183610ba0565b558388528585528760018882200155610485565b634e487b7160e01b8a5260318b5260248afd5b61071390610ba0565b90549060031b1c16610728816105aa84610ba0565b8a528787526001898b2001558a84816106c9565b634e487b7160e01b8a5260118b5260248afd5b846106339385610769975280885261061d8b848420610b6b565b6001600160e01b0319168b52838852898b2080546001600160a01b03199092169187169190911790558b878b888b848e61044f565b5f80516020610be4833981519152805483810190811161073c57858a528787528460018a8c200154918083036107fd575b505050805480156106f7578301906107e961055183610ba0565b558388528585528760018882200155610413565b61080690610ba0565b90549060031b1c1661081b816105aa84610ba0565b8a528787526001898b2001558a84816107cf565b846106339385610849975280885261061d8b848420610b6b565b6001600160e01b0319168b52838852898b2080546001600160a01b03199092169187169190911790558b878b888b848e6103dd565b5f80516020610be4833981519152805483810190811161073c57858a528787528460018a8c200154918083036108dd575b505050805480156106f7578301906108c961055183610ba0565b5583885285855287600188822001556103a1565b6108e690610ba0565b90549060031b1c166108fb816105aa84610ba0565b8a528787526001898b2001558a84816108af565b846106339385610929975280885261061d8b848420610b6b565b6001600160e01b0319168b52838852898b2080546001600160a01b03199092169187169190911790558b878b888b848e610359565b835162461bcd60e51b8152808701839052602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608490fd5b835162461bcd60e51b8152808701839052603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e636044820152761d1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd604a1b6064820152608490fd5b8251632bc93d7960e21b815233818701526024810191909152604490fd5b6001600160401b038111610a4c57604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160a01b039091168152602081019190915260400190565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610ac6575b610ab457565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005541615610aae565b335f9081527fdaf4e0039e06efc15f0aa13f58517bb65a6ff7e78ed13e11b7ffe6007794165360205260409020547f1f5a72ff210e1987f45ef6999da4be546bb5ea71f60de5cbc44d2ddb6c29d7169060ff1615610b4d5750565b60449060405190632bc93d7960e21b82523360048301526024820152fd5b9190918054831015610b8c575f52601c60205f208360031c019260021b1690565b634e487b7160e01b5f52603260045260245ffd5b5f80516020610be48339815191528054821015610b8c575f5260205f2001905f9056fe432da9d83f78bf82285a328b443d450767ef001f46d2f35595c0324c1126b967c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131ea2646970667358221220b72d86a9a630aa7741586c4dcfdf810582211928b912d9087372f744c6b12d8864736f6c63430008140033",
  "deployedBytecode": "0x60406080815260049081361015610014575f80fd5b5f91823560e01c90816306402cb31461020e57816340c10f191461018c5783826342966c681461010b575081637a7d6eaa14610093575063ce305b6614610059575f80fd5b3461008f578160031936011261008f57602090610074610a7b565b60ff5f80516020610bc4833981519152541690519015158152f35b5080fd5b919050346101075782600319360112610107573033036100ca575f80516020610bc4833981519152805460ff191660011790558280f35b604492505190632bc93d7960e21b825233908201527fddd94edc7da5bca8f576c77964a4737ba5172c728e2d539e672f0229d1e9ec2d6024820152fd5b8280fd5b8091843461018857602036600319011261018857610127610a7b565b61012f610af2565b303b1561018857826101579282518094819263079cc67960e41b835280359033908401610a60565b038183305af190811561017f575061016c5750f35b61017590610a39565b61017c5780f35b80fd5b513d84823e3d90fd5b5050fd5b9190503461010757806003193601126101075781359183906001600160a01b038416840361008f576101bc610a7b565b6101c4610af2565b303b1561008f5782516308934a5f60e31b815293849182916101ec9160243591908401610a60565b038183305af190811561017f5750610202575080f35b61020b90610a39565b80f35b83833461008f578160031936011261008f57610228610a7b565b7fdf419335cd51a12d91577b23bb1f2f1d297c4dd78f8c580b21e3d68c0742aa528083526020907f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e448252828420338552825260ff838520541615610a1b57505f80516020610bc4833981519152805460ff191690556001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821680156109b85730811461095e576306402cb360e01b8086527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c808452858720548388527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d808652878920549096935f1993928483019260a082901c908411610685578b888b838e888e960361090f575b50505090525050878752888a20805480156105f05785019061039061037e8383610b6b565b63ffffffff82549160031b1b19169055565b55895281865288888120551561087e575b633d3eb75560e11b80895281865287892054858a52878752888a205484810192919060a082901c908411610685578b888b838e888e960361082f575b50505090525050878752888a20805480156105f05785019061040261037e8383610b6b565b55895281865288888120551561079e575b6340c10f1960e01b80895281865287892054858a52878752888a205484810192919060a082901c908411610685578b888b838e888e960361074f575b50505090525050878752888a20805480156105f05785019061047461037e8383610b6b565b558952818652888881205515610698575b630852cd8d60e31b80895281865287892054858a52878752888a20548481019392919060a082901c908511610685578b888b838e898e9603610603575b50505090525050878752888a20805480156105f0578501906104e761037e8383610b6b565b55895285528787812055156104fa578680f35b5f80516020610be4833981519152918254908282019182116105dd578489528686526001888a2001549180830361058c575b5050508154801561057957879850906001969594939291019061056661055183610ba0565b81549060018060a01b039060031b1b19169055565b5585525282200155808280808080808680f35b634e487b7160e01b885260318952602488fd5b61059590610ba0565b90549060031b1c166105c9816105aa84610ba0565b90919082549060031b9160018060a01b03809116831b921b1916179055565b88528585526001878920015588808061052c565b634e487b7160e01b895260118a52602489fd5b634e487b7160e01b8c5260318d5260248cfd5b846106339385610650975280885261061d8c848420610b6b565b90549060031b1c60e01b97889683525220610b6b565b90919063ffffffff83549160031b9260e01c831b921b1916179055565b6001600160e01b0319168b52828852898b2080546001600160a01b03199092169187169190911790558b878b888b848e6104c2565b634e487b7160e01b8c5260118d5260248cfd5b5f80516020610be4833981519152805483810190811161073c57858a528787528460018a8c2001549180830361070a575b505050805480156106f7578301906106e361055183610ba0565b558388528585528760018882200155610485565b634e487b7160e01b8a5260318b5260248afd5b61071390610ba0565b90549060031b1c16610728816105aa84610ba0565b8a528787526001898b2001558a84816106c9565b634e487b7160e01b8a5260118b5260248afd5b846106339385610769975280885261061d8b848420610b6b565b6001600160e01b0319168b52838852898b2080546001600160a01b03199092169187169190911790558b878b888b848e61044f565b5f80516020610be4833981519152805483810190811161073c57858a528787528460018a8c200154918083036107fd575b505050805480156106f7578301906107e961055183610ba0565b558388528585528760018882200155610413565b61080690610ba0565b90549060031b1c1661081b816105aa84610ba0565b8a528787526001898b2001558a84816107cf565b846106339385610849975280885261061d8b848420610b6b565b6001600160e01b0319168b52838852898b2080546001600160a01b03199092169187169190911790558b878b888b848e6103dd565b5f80516020610be4833981519152805483810190811161073c57858a528787528460018a8c200154918083036108dd575b505050805480156106f7578301906108c961055183610ba0565b5583885285855287600188822001556103a1565b6108e690610ba0565b90549060031b1c166108fb816105aa84610ba0565b8a528787526001898b2001558a84816108af565b846106339385610929975280885261061d8b848420610b6b565b6001600160e01b0319168b52838852898b2080546001600160a01b03199092169187169190911790558b878b888b848e610359565b835162461bcd60e51b8152808701839052602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201526d3a30b1363290333ab731ba34b7b760911b6064820152608490fd5b835162461bcd60e51b8152808701839052603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e636044820152761d1a5bdb881d1a185d08191bd95cdb89dd08195e1a5cdd604a1b6064820152608490fd5b8251632bc93d7960e21b815233818701526024810191909152604490fd5b6001600160401b038111610a4c57604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160a01b039091168152602081019190915260400190565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610ac6575b610ab457565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005541615610aae565b335f9081527fdaf4e0039e06efc15f0aa13f58517bb65a6ff7e78ed13e11b7ffe6007794165360205260409020547f1f5a72ff210e1987f45ef6999da4be546bb5ea71f60de5cbc44d2ddb6c29d7169060ff1615610b4d5750565b60449060405190632bc93d7960e21b82523360048301526024820152fd5b9190918054831015610b8c575f52601c60205f208360031c019260021b1690565b634e487b7160e01b5f52603260045260245ffd5b5f80516020610be48339815191528054821015610b8c575f5260205f2001905f9056fe432da9d83f78bf82285a328b443d450767ef001f46d2f35595c0324c1126b967c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131ea2646970667358221220b72d86a9a630aa7741586c4dcfdf810582211928b912d9087372f744c6b12d8864736f6c63430008140033",
  "libraries": [
    "LTLib",
    "InitializerLib",
    "PausabilityLib",
    "RolesManagementLib",
    "AutocracyLib"
  ],
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}