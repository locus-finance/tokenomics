{
  "address": "0x4D680A6461d4d16F5c22AD628EC531b7D17D2E7f",
  "abi": [
    {
      "inputs": [],
      "name": "DelegatedCallsOnly",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPRInAbsoluteValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrimitives",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20Metadata",
              "name": "rewardsToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20Metadata",
              "name": "stakingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "periodFinish",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerTokenStored",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalReward",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "wrappedStLocusToken",
              "type": "address"
            }
          ],
          "internalType": "struct LSLib.Primitives",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDuration",
          "type": "uint256"
        }
      ],
      "name": "getProjectedAPR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xae7e7db59a9e59616432954f1d1735b5a39c2d02b64c2f6d8c1ac8e9cafe64dd",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x729F2222aaCD99619B8B660b412baE9fCEa3d90F",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "11656638",
    "logsBloom": "0x
    "blockHash": "0x0a9515940e3282161b4dc08a3438c7d9c045d10e7a74cad943641fb08b2f94a7",
    "transactionHash": "0xae7e7db59a9e59616432954f1d1735b5a39c2d02b64c2f6d8c1ac8e9cafe64dd",
    "logs": [],
    "blockNumber": 178428619,
    "cumulativeGasUsed": "11656638",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "157efd5c9b8df67cf4dd36d065d7f4f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DelegatedCallsOnly\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPRInAbsoluteValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimitives\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wrappedStLocusToken\",\"type\":\"address\"}],\"internalType\":\"struct LSLib.Primitives\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDuration\",\"type\":\"uint256\"}],\"name\":\"getProjectedAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamonds/locusStaking/v1/LSLoupeFacet.sol\":\"LSLoupeFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PausabilityLib.sol\\\";\\r\\nimport \\\"../libraries/InitializerLib.sol\\\";\\r\\nimport \\\"../libraries/RolesManagementLib.sol\\\";\\r\\n\\r\\nabstract contract BaseFacet is Initializable {\\r\\n    error DelegatedCallsOnly();\\r\\n    \\r\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\r\\n    address internal immutable __self = address(this);\\r\\n\\r\\n    function enforceDelegatedOnly() internal view {\\r\\n        if (address(this) == __self || !InitializerLib.get().initialized) {\\r\\n            revert DelegatedCallsOnly();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\\r\\n    /// optimization - the modifier uses an internal function call.\\r\\n    modifier delegatedOnly {\\r\\n        enforceDelegatedOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier internalOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2a062649afde4b46419cf35b5662c3fa217d03656ebd83d83751c57fde0b3c90\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary InitializerLib {\\r\\n    error AlreadyInitialized();\\r\\n    error NotImplemented();\\r\\n\\r\\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.initializer\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() internal {\\r\\n        get().initialized = false;\\r\\n    }\\r\\n\\r\\n    function initialize() internal {\\r\\n        if (get().initialized) {\\r\\n            revert AlreadyInitialized();\\r\\n        } else {\\r\\n            get().initialized = true;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc0f1dacbaff19bbca3f59fe381f195906a7d5d87b17f27d5f81c8f3affbf4060\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PausabilityLib {\\r\\n    error OnlyWhenNotPaused();\\r\\n    \\r\\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.pausability\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool paused;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x99306f533b5797bd58d92b2ac976324d14b61b7b426c90083f2f060f75863686\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary RolesManagementLib {\\r\\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\\r\\n\\r\\n    error HasNoRole(address who, bytes32 role);\\r\\n    error HasNoRoles(address who, bytes32[] roles);\\r\\n\\r\\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.roles\\\");\\r\\n\\r\\n    // roles to check with EOA\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\n\\r\\n    // A special role - must not be removed.\\r\\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\\r\\n\\r\\n    // roles to check with smart-contracts\\r\\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceRole(address who, bytes32 role) internal view {\\r\\n        if (role == INTERNAL_ROLE) {\\r\\n            if (who != address(this)) {\\r\\n                revert HasNoRole(who, INTERNAL_ROLE);\\r\\n            }\\r\\n        } else if (!get().roles[role][who]) {\\r\\n            revert HasNoRole(who, role);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\\r\\n        return get().roles[role][who];\\r\\n    }\\r\\n\\r\\n    function enforceSenderRole(bytes32 role) internal view {\\r\\n        enforceRole(msg.sender, role);\\r\\n    }\\r\\n\\r\\n    function grantRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = true; \\r\\n        emit RoleSet(who, role, true);\\r\\n    }\\r\\n\\r\\n    function revokeRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = false; \\r\\n        emit RoleSet(who, role, false);\\r\\n    }\\r\\n\\r\\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\\r\\n        bool result;\\r\\n        for (uint256 i = 0; i < roles.length; i++) {\\r\\n            if (roles[i] == INTERNAL_ROLE) {\\r\\n                result = result || who == address(this);\\r\\n            } else {\\r\\n                result = result || get().roles[roles[i]][who];\\r\\n            }\\r\\n        }\\r\\n        if (!result) {\\r\\n            revert HasNoRoles(who, roles);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\\r\\n        enforceEitherOfRoles(msg.sender, roles);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63362b8189cb9c1cec32aade5a5fdf3b2548761cf124dfe8ded723569ce2c00d\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/TDLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary TDLib {\\r\\n    error InvalidOffset(uint256 offset);\\r\\n    error IntervalsMustBeSorted();\\r\\n    error NothingWasFound();\\r\\n    error IncorrectLengths(uint256 l1, uint256 l2);\\r\\n\\r\\n    event ReceiverAltered(\\r\\n        address indexed receiver,\\r\\n        uint256 indexed share,\\r\\n        bool indexed isBlocked,\\r\\n        uint256 sumOfShares\\r\\n    );\\r\\n    event Distributed(\\r\\n        uint256 indexed distributedValue,\\r\\n        uint256 indexed tokensLeftAndSentToGovernance\\r\\n    );\\r\\n\\r\\n    bytes32 constant LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus.token_distribution\\\");\\r\\n\\r\\n    uint16 public constant MAX_BPS = 10000;\\r\\n\\r\\n    struct DistributionReceiver {\\r\\n        uint256 share;\\r\\n        uint256 previousShare;\\r\\n        address receiver;\\r\\n        bool isBlocked;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(address => uint32) startTimestamps;\\r\\n        uint32[] distributionDurationPoints;\\r\\n        mapping(uint256 => uint256) distributionDurationPointIdxToAmounts;\\r\\n        DistributionReceiver[] distributionReceivers;\\r\\n        uint256 sumOfShares;\\r\\n        address undistributedAmountsReceiver;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAmountToDistribute(\\r\\n        address entity\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 distributionAmount,\\r\\n            uint256 distributionDurationPointIdx\\r\\n        )\\r\\n    {\\r\\n        uint32 startStakingTime = get().startTimestamps[entity];\\r\\n        if (block.timestamp >= startStakingTime) {\\r\\n            uint32 timeCounter = startStakingTime;\\r\\n            uint256 distributionDurationPointsLen = get()\\r\\n                .distributionDurationPoints\\r\\n                .length;\\r\\n            uint256 idx;\\r\\n            for (idx; idx < distributionDurationPointsLen; idx++) {\\r\\n                uint32 distributionDurationPoint = get()\\r\\n                    .distributionDurationPoints[idx];\\r\\n                if (block.timestamp < timeCounter + distributionDurationPoint) {\\r\\n                    break;\\r\\n                } else {\\r\\n                    timeCounter += distributionDurationPoint;\\r\\n                }\\r\\n            }\\r\\n            distributionAmount = get().distributionDurationPointIdxToAmounts[\\r\\n                idx\\r\\n            ];\\r\\n            distributionDurationPointIdx = idx;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec0c54a4544c5bb3b0612f25c6e2f64ad6badd938305e80fcc914811cb6e9f0\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/LSLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary LSLib {\\r\\n    error InvalidBPS(uint16 bps);\\r\\n    error OnlyRewardsDistribution();\\r\\n    error CannotStakeZero();\\r\\n    error CannotWithdrawZero();\\r\\n    error RewardIsTooHigh(uint256 actualReward);\\r\\n    error CannotRecoverToken(address token, uint256 amount);\\r\\n    error ChangingRewardsDurationTooEarly(uint256 deltaInSeconds);\\r\\n    error NotImplemented();\\r\\n\\r\\n    event RewardAdded(uint256 indexed reward);\\r\\n    event Staked(address indexed user, uint256 indexed amount);\\r\\n    event SentOut(\\r\\n        address indexed token,\\r\\n        address indexed user,\\r\\n        uint256 indexed amount,\\r\\n        uint256 feesTaken\\r\\n    );\\r\\n    event RewardsDurationUpdated(uint256 indexed newDuration);\\r\\n    event Recovered(address indexed token, uint256 indexed amount);\\r\\n\\r\\n    bytes32 constant LOCUS_STAKING_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus_staking\\\");\\r\\n\\r\\n    bytes32 public constant REWARD_DISTRIBUTOR_ROLE =\\r\\n        keccak256(\\\"REWARD_DISTRIBUTOR_ROLE\\\");\\r\\n    bytes32 public constant ALLOWED_TO_STAKE_FOR_ROLE =\\r\\n        keccak256(\\\"ALLOWED_TO_STAKE_FOR_ROLE\\\");\\r\\n\\r\\n    uint256 public constant PRECISION = 1 ether;\\r\\n\\r\\n    struct ReferenceTypes {\\r\\n        mapping(address => uint256) userRewardPerTokenPaid;\\r\\n        mapping(address => uint256) rewards;\\r\\n        mapping(address => uint256) balanceOf;\\r\\n    }\\r\\n\\r\\n    struct Primitives {\\r\\n        IERC20Metadata rewardsToken;\\r\\n        IERC20Metadata stakingToken;\\r\\n        uint256 periodFinish;\\r\\n        uint256 rewardRate;\\r\\n        uint256 rewardsDuration;\\r\\n        uint256 lastUpdateTime;\\r\\n        uint256 rewardPerTokenStored;\\r\\n        uint256 totalSupply;\\r\\n        uint256 totalReward;\\r\\n        address wrappedStLocusToken;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        Primitives p;\\r\\n        ReferenceTypes rt;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_STAKING_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7a2935290a6ae6b758a53476ad48419fce098a638add9b8b3804bfb2dfb1bc08\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/LSLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"../LSLib.sol\\\";\\r\\nimport \\\"../../facetsFramework/diamondBase/facets/BaseFacet.sol\\\";\\r\\nimport \\\"../../facetsFramework/tokensDistributor/TDLib.sol\\\";\\r\\nimport \\\"./interfaces/ILSLoupeFacet.sol\\\";\\r\\n\\r\\ncontract LSLoupeFacet is BaseFacet, ILSLoupeFacet {\\r\\n    function lastTimeRewardApplicable()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        delegatedOnly\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            block.timestamp < LSLib.get().p.periodFinish\\r\\n                ? block.timestamp\\r\\n                : LSLib.get().p.periodFinish;\\r\\n    }\\r\\n\\r\\n    function rewardPerToken()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        delegatedOnly\\r\\n        returns (uint256)\\r\\n    {\\r\\n        LSLib.Primitives memory p = LSLib.get().p;\\r\\n        if (p.totalSupply == 0) {\\r\\n            return p.rewardPerTokenStored;\\r\\n        }\\r\\n        return\\r\\n            p.rewardPerTokenStored +\\r\\n            (((lastTimeRewardApplicable() - p.lastUpdateTime) *\\r\\n                p.rewardRate *\\r\\n                LSLib.PRECISION) / p.totalSupply);\\r\\n    }\\r\\n\\r\\n    function earned(\\r\\n        address account\\r\\n    ) external view override delegatedOnly returns (uint256) {\\r\\n        LSLib.ReferenceTypes storage rt = LSLib.get().rt;\\r\\n        return\\r\\n            (rt.balanceOf[account] *\\r\\n                (rewardPerToken() - rt.userRewardPerTokenPaid[account])) /\\r\\n            LSLib.PRECISION +\\r\\n            rt.rewards[account];\\r\\n    }\\r\\n\\r\\n    function getTotalReward()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        delegatedOnly\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return LSLib.get().p.totalReward;\\r\\n    }\\r\\n\\r\\n    function getRewardForDuration()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        delegatedOnly\\r\\n        returns (uint256)\\r\\n    {\\r\\n        LSLib.Primitives memory p = LSLib.get().p;\\r\\n        return p.rewardRate * p.rewardsDuration;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override delegatedOnly returns (uint256) {\\r\\n        return LSLib.get().p.totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) external view override delegatedOnly returns (uint256) {\\r\\n        return LSLib.get().rt.balanceOf[account];\\r\\n    }\\r\\n\\r\\n    function decimals() external view override delegatedOnly returns (uint8) {\\r\\n        return LSLib.get().p.stakingToken.decimals();\\r\\n    }\\r\\n\\r\\n    function getProjectedAPR(\\r\\n        uint256 rewardRate,\\r\\n        uint256 rewardDuration\\r\\n    ) external view override delegatedOnly returns (uint256) {\\r\\n        return _getProjectedAPR(rewardRate, rewardDuration);\\r\\n    }\\r\\n\\r\\n    function getAPR() external view override delegatedOnly returns (uint256) {\\r\\n        LSLib.Primitives memory p = LSLib.get().p;\\r\\n        return _getProjectedAPR(p.rewardRate, p.rewardsDuration);\\r\\n    }\\r\\n\\r\\n    function getAPRInAbsoluteValue()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        delegatedOnly\\r\\n        returns (uint256)\\r\\n    {\\r\\n        LSLib.Primitives memory p = LSLib.get().p;\\r\\n        return\\r\\n            _getProjectedAPRInAbsoluteValue(p.rewardRate, p.rewardsDuration) /\\r\\n            LSLib.PRECISION;\\r\\n    }\\r\\n\\r\\n    function _getProjectedAPRInAbsoluteValue(\\r\\n        uint256 rewardRate,\\r\\n        uint256 rewardDuration\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 accumulatedRewardsIfOneTokenStakedWithPrecision)\\r\\n    {\\r\\n        LSLib.Primitives memory p = LSLib.get().p;\\r\\n        uint256 oneToken = 10 ** IERC20Metadata(address(this)).decimals();\\r\\n        accumulatedRewardsIfOneTokenStakedWithPrecision =\\r\\n            oneToken *\\r\\n            ((rewardRate * rewardDuration * LSLib.PRECISION) / p.totalSupply);\\r\\n    }\\r\\n\\r\\n    function _getProjectedAPR(\\r\\n        uint256 rewardRate,\\r\\n        uint256 rewardDuration\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 oneToken = 10 ** IERC20Metadata(address(this)).decimals();\\r\\n        uint256 accumulatedRewardsIfOneTokenStakedWithPrecision = _getProjectedAPRInAbsoluteValue(\\r\\n                rewardRate,\\r\\n                rewardDuration\\r\\n            );\\r\\n        return\\r\\n            ((TDLib.MAX_BPS * accumulatedRewardsIfOneTokenStakedWithPrecision) /\\r\\n                oneToken) / LSLib.PRECISION;\\r\\n    }\\r\\n\\r\\n    function getPrimitives()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (LSLib.Primitives memory)\\r\\n    {\\r\\n        return LSLib.get().p;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x094ad22720f282269f6643cab23c46b3ad8273f4c612fe0d19288a00d77f0dbf\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/interfaces/ILSLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"../../LSLib.sol\\\";\\r\\n\\r\\ninterface ILSLoupeFacet {\\r\\n    function getPrimitives() external view returns (LSLib.Primitives memory);\\r\\n\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function getTotalReward() external view returns (uint256);\\r\\n\\r\\n    function getRewardForDuration() external view returns (uint256);\\r\\n\\r\\n    function getAPR() external view returns (uint256);\\r\\n\\r\\n    function getProjectedAPR(\\r\\n        uint256 rewardRate,\\r\\n        uint256 rewardDuration\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function getAPRInAbsoluteValue() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x457cee0f9a648f1e05799445ed0a9db1f4b1f9c7be7ac3e53186fac2cb772cb3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a080604052346100235730608052610a13908161002982396080518161050c0152f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c80628cc2621461044557806318160ddd146104125780631c1f78eb146103db578063313ce5671461033857806370a08231146102bf5780637821b332146101f15780637d1fcbfa146101be57806380faa57d146101795780638c57d6c61461014f578063c89d5b8b14610118578063cd3daf9d146100ed5763fddac91e146100a257600080fd5b346100e957816003193601126100e9576020906100bd610509565b670de0b6b3a76400006100e16100d16105d5565b6080606082015191015190610863565b049051908152f35b5080fd5b50346100e957816003193601126100e957602090610109610509565b610111610792565b9051908152f35b50346100e957816003193601126100e957602090610134610509565b61011161013f6105d5565b60806060820151910151906108fd565b50346100e957806003193601126100e95760209061016b610509565b6101116024356004356108fd565b50346100e957816003193601126100e957602091610195610509565b5060008051602061099e83398151915254428111156101b8575042905b51908152f35b906101b2565b50346100e957816003193601126100e9576020906101da610509565b60008051602061097e833981519152549051908152f35b50346100e957816003193601126100e9578051610140929161021282610580565b82825282602083015282818301528260608301528260808301528260a08301528260c08301528260e083015261010092808484015261012080930152816102576105d5565b82519460018060a01b03938483511687528460208401511660208801528083015190870152606082015160608701526080820151608087015260a082015160a087015260c082015160c087015260e082015160e0870152808201519086015201511690820152f35b50346100e95760203660031901126100e957600435916001600160a01b0383168303610335575061032d6020926102f4610509565b6001600160a01b031660009081527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5776020526040902090565b549051908152f35b80fd5b50346100e957816003193601126100e957600490610354610509565b6000805160206109be83398151915254815163313ce56760e01b81529260209184919082906001600160a01b03165afa9182156103d1576020939261039f575b5060ff905191168152f35b60ff9192506103c390843d81116103ca575b6103bb81836105b2565b810190610834565b9190610394565b503d6103b1565b81513d85823e3d90fd5b50346100e957816003193601126100e9576020906103f7610509565b6101116104026105d5565b6080606082015191015190610752565b50346100e957816003193601126100e95760209061042e610509565b60008051602061095e833981519152549051908152f35b50346100e95760203660031901126100e9576004356001600160a01b03811690818103610505579082602094670de0b6b3a76400006104d661048c610111966102f4610509565b54610495610509565b6104d06104a0610792565b8786527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5758b52868620549061072f565b90610752565b049281527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5768652205490610785565b8380fd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610554575b61054257565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a00554161561053c565b61014081019081106001600160401b0382111761059c57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761059c57604052565b604051906105e282610580565b7fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56b546001600160a01b0390811683526000805160206109be833981519152548116602084015260008051602061099e8339815191525460408401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56e5460608401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56f5460808401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5705460a08401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5715460c084015260008051602061095e8339815191525460e084015260008051602061097e833981519152546101008401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5745416610120830152565b9190820391821161073c57565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561073c57565b811561076f570490565b634e487b7160e01b600052601260045260246000fd5b9190820180921161073c57565b61079a6105d5565b60e081019081511561082b576107ed60c0820151916107b7610509565b60008051602061099e83398151915254804210600014610820575060606107e4425b60a08401519061072f565b91015190610752565b91670de0b6b3a76400009283810293818504149015171561073c5761081d92610817915190610765565b90610785565b90565b6107e46060916107d9565b60c09150015190565b9081602091031261084d575160ff8116810361084d5790565b600080fd5b60ff16604d811161073c57600a0a90565b61086b6105d5565b60405163313ce56760e01b81529092602082600481305afa9182156108f1576108a6926108a0916000916108d3575b50610852565b92610752565b91670de0b6b3a76400009283810293818504149015171561073c5761081d9260e06104d092015190610765565b6108eb915060203d81116103ca576103bb81836105b2565b3861089a565b6040513d6000823e3d90fd5b60405163313ce56760e01b81529091602082600481305afa9182156108f15761093792610931916000916108d35750610852565b92610863565b612710908082029182040361073c57670de0b6b3a76400009161095991610765565b049056fed48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad572d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad573d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56dd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56ca26469706673582212205e64d0ba21db7087b9df08a75c55ad811b068d782fd9a9b31765aa90e656845264736f6c63430008130033",
  "deployedBytecode": "0x604060808152600436101561001357600080fd5b600090813560e01c80628cc2621461044557806318160ddd146104125780631c1f78eb146103db578063313ce5671461033857806370a08231146102bf5780637821b332146101f15780637d1fcbfa146101be57806380faa57d146101795780638c57d6c61461014f578063c89d5b8b14610118578063cd3daf9d146100ed5763fddac91e146100a257600080fd5b346100e957816003193601126100e9576020906100bd610509565b670de0b6b3a76400006100e16100d16105d5565b6080606082015191015190610863565b049051908152f35b5080fd5b50346100e957816003193601126100e957602090610109610509565b610111610792565b9051908152f35b50346100e957816003193601126100e957602090610134610509565b61011161013f6105d5565b60806060820151910151906108fd565b50346100e957806003193601126100e95760209061016b610509565b6101116024356004356108fd565b50346100e957816003193601126100e957602091610195610509565b5060008051602061099e83398151915254428111156101b8575042905b51908152f35b906101b2565b50346100e957816003193601126100e9576020906101da610509565b60008051602061097e833981519152549051908152f35b50346100e957816003193601126100e9578051610140929161021282610580565b82825282602083015282818301528260608301528260808301528260a08301528260c08301528260e083015261010092808484015261012080930152816102576105d5565b82519460018060a01b03938483511687528460208401511660208801528083015190870152606082015160608701526080820151608087015260a082015160a087015260c082015160c087015260e082015160e0870152808201519086015201511690820152f35b50346100e95760203660031901126100e957600435916001600160a01b0383168303610335575061032d6020926102f4610509565b6001600160a01b031660009081527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5776020526040902090565b549051908152f35b80fd5b50346100e957816003193601126100e957600490610354610509565b6000805160206109be83398151915254815163313ce56760e01b81529260209184919082906001600160a01b03165afa9182156103d1576020939261039f575b5060ff905191168152f35b60ff9192506103c390843d81116103ca575b6103bb81836105b2565b810190610834565b9190610394565b503d6103b1565b81513d85823e3d90fd5b50346100e957816003193601126100e9576020906103f7610509565b6101116104026105d5565b6080606082015191015190610752565b50346100e957816003193601126100e95760209061042e610509565b60008051602061095e833981519152549051908152f35b50346100e95760203660031901126100e9576004356001600160a01b03811690818103610505579082602094670de0b6b3a76400006104d661048c610111966102f4610509565b54610495610509565b6104d06104a0610792565b8786527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5758b52868620549061072f565b90610752565b049281527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5768652205490610785565b8380fd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610554575b61054257565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a00554161561053c565b61014081019081106001600160401b0382111761059c57604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761059c57604052565b604051906105e282610580565b7fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56b546001600160a01b0390811683526000805160206109be833981519152548116602084015260008051602061099e8339815191525460408401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56e5460608401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56f5460808401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5705460a08401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5715460c084015260008051602061095e8339815191525460e084015260008051602061097e833981519152546101008401527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5745416610120830152565b9190820391821161073c57565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561073c57565b811561076f570490565b634e487b7160e01b600052601260045260246000fd5b9190820180921161073c57565b61079a6105d5565b60e081019081511561082b576107ed60c0820151916107b7610509565b60008051602061099e83398151915254804210600014610820575060606107e4425b60a08401519061072f565b91015190610752565b91670de0b6b3a76400009283810293818504149015171561073c5761081d92610817915190610765565b90610785565b90565b6107e46060916107d9565b60c09150015190565b9081602091031261084d575160ff8116810361084d5790565b600080fd5b60ff16604d811161073c57600a0a90565b61086b6105d5565b60405163313ce56760e01b81529092602082600481305afa9182156108f1576108a6926108a0916000916108d3575b50610852565b92610752565b91670de0b6b3a76400009283810293818504149015171561073c5761081d9260e06104d092015190610765565b6108eb915060203d81116103ca576103bb81836105b2565b3861089a565b6040513d6000823e3d90fd5b60405163313ce56760e01b81529091602082600481305afa9182156108f15761093792610931916000916108d35750610852565b92610863565b612710908082029182040361073c57670de0b6b3a76400009161095991610765565b049056fed48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad572d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad573d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56dd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56ca26469706673582212205e64d0ba21db7087b9df08a75c55ad811b068d782fd9a9b31765aa90e656845264736f6c63430008130033",
  "libraries": [
    "TDLib",
    "LSLib",
    "InitializerLib",
    "RolesManagementLib",
    "DelayedSendingsQueueLib"
  ],
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 133,
        "contract": "contracts/diamonds/locusStaking/v1/LSLoupeFacet.sol:LSLoupeFacet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 136,
        "contract": "contracts/diamonds/locusStaking/v1/LSLoupeFacet.sol:LSLoupeFacet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}