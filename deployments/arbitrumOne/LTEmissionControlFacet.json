{
  "address": "0xeFd0f59F5F65871a03F43Cc523f4F49CFE834bF2",
  "abi": [
    {
      "inputs": [],
      "name": "DelegatedCallsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochNumber",
          "type": "uint256"
        }
      ],
      "name": "EpochIsDistributed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "HasNoRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EpochAmountIsEmptyOrInflationHasntStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "mintInflation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5a7d94a39e537f0f703fbc9bb03bca772abc21e27f7b69536c5d31c797becbb",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x729F2222aaCD99619B8B660b412baE9fCEa3d90F",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2091296",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2daa5e2b4ef593dc3ea933c1921b7863b35a8a9bb4b1548c9fa13f00f78ef50b",
    "transactionHash": "0xd5a7d94a39e537f0f703fbc9bb03bca772abc21e27f7b69536c5d31c797becbb",
    "logs": [],
    "blockNumber": 153445421,
    "cumulativeGasUsed": "2091296",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f2cbd77dff83ddf9a9c16b855b9827fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DelegatedCallsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"EpochIsDistributed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"HasNoRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EpochAmountIsEmptyOrInflationHasntStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"mintInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamonds/locusToken/v1/LTEmissionControlFacet.sol\":\"LTEmissionControlFacet\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PausabilityLib.sol\\\";\\r\\nimport \\\"../libraries/InitializerLib.sol\\\";\\r\\nimport \\\"../libraries/RolesManagementLib.sol\\\";\\r\\n\\r\\nabstract contract BaseFacet is Initializable {\\r\\n    error DelegatedCallsOnly();\\r\\n    \\r\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\r\\n    address internal immutable __self = address(this);\\r\\n\\r\\n    function enforceDelegatedOnly() internal view {\\r\\n        if (address(this) == __self || !InitializerLib.get().initialized) {\\r\\n            revert DelegatedCallsOnly();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\\r\\n    /// optimization - the modifier uses an internal function call.\\r\\n    modifier delegatedOnly {\\r\\n        enforceDelegatedOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier internalOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1a7f82f43a565fedfbd30dc7dd2c7166d065707634a7a2a8c9191525e5903363\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary InitializerLib {\\r\\n    error AlreadyInitialized();\\r\\n    error NotImplemented();\\r\\n\\r\\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.initializer\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() internal {\\r\\n        get().initialized = false;\\r\\n    }\\r\\n\\r\\n    function initialize() internal {\\r\\n        if (get().initialized) {\\r\\n            revert AlreadyInitialized();\\r\\n        } else {\\r\\n            get().initialized = true;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x28a20d1e0e0cfcbbe6c6e10bcdf2e138c97a92dfd34a5b2c5c9950c5b982dd3b\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PausabilityLib {\\r\\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.pausability\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool paused;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x90d5c29c2a59d08c67dd52c46c4af90e83e886c64a1a160e20c8aaa95febf356\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary RolesManagementLib {\\r\\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\\r\\n\\r\\n    error HasNoRole(address who, bytes32 role);\\r\\n    error HasNoRoles(address who, bytes32[] roles);\\r\\n\\r\\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.roles\\\");\\r\\n\\r\\n    // roles to check with EOA\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\n\\r\\n    // A special role - must not be removed.\\r\\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\\r\\n\\r\\n    // roles to check with smart-contracts\\r\\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceRole(address who, bytes32 role) internal view {\\r\\n        if (role == INTERNAL_ROLE) {\\r\\n            if (who != address(this)) {\\r\\n                revert HasNoRole(who, INTERNAL_ROLE);\\r\\n            }\\r\\n        } else if (!get().roles[role][who]) {\\r\\n            revert HasNoRole(who, role);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\\r\\n        return get().roles[role][who];\\r\\n    }\\r\\n\\r\\n    function enforceSenderRole(bytes32 role) internal view {\\r\\n        enforceRole(msg.sender, role);\\r\\n    }\\r\\n\\r\\n    function grantRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = true; \\r\\n        emit RoleSet(who, role, true);\\r\\n    }\\r\\n\\r\\n    function revokeRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = false; \\r\\n        emit RoleSet(who, role, false);\\r\\n    }\\r\\n\\r\\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\\r\\n        bool result;\\r\\n        for (uint256 i = 0; i < roles.length; i++) {\\r\\n            if (roles[i] == INTERNAL_ROLE) {\\r\\n                result = result || who == address(this);\\r\\n            } else {\\r\\n                result = result || get().roles[roles[i]][who];\\r\\n            }\\r\\n        }\\r\\n        if (!result) {\\r\\n            revert HasNoRoles(who, roles);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\\r\\n        enforceEitherOfRoles(msg.sender, roles);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3fd994c63d349747c7444e147045bb062e84980fa3bc01bd2af32ec00b8943b6\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/TDLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary TDLib {\\r\\n    error InvalidOffset(uint256 offset);\\r\\n    error IntervalsMustBeSorted();\\r\\n    error NothingWasFound();\\r\\n    error IncorrectLengths(uint256 l1, uint256 l2);\\r\\n\\r\\n    event ReceiverAltered(\\r\\n        address indexed receiver,\\r\\n        uint256 indexed share,\\r\\n        bool indexed isBlocked,\\r\\n        uint256 sumOfShares\\r\\n    );\\r\\n    event Distributed(\\r\\n        uint256 indexed distributedValue,\\r\\n        uint256 indexed tokensLeftAndSentToGovernance\\r\\n    );\\r\\n\\r\\n    bytes32 constant LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus.token_distribution\\\");\\r\\n\\r\\n    uint16 public constant MAX_BPS = 10000;\\r\\n\\r\\n    struct DistributionReceiver {\\r\\n        uint256 share;\\r\\n        uint256 previousShare;\\r\\n        address receiver;\\r\\n        bool isBlocked;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(address => uint32) startTimestamps;\\r\\n        uint32[] distributionDurationPoints;\\r\\n        mapping(uint256 => uint256) distributionDurationPointIdxToAmounts;\\r\\n        DistributionReceiver[] distributionReceivers;\\r\\n        uint256 sumOfShares;\\r\\n        address undistributedAmountsReceiver;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAmountToDistribute(\\r\\n        address entity\\r\\n    ) internal view returns (uint256 distributionAmount, uint256 distributionDurationPointIdx) {\\r\\n        uint32 startStakingTime = get().startTimestamps[entity];\\r\\n        if (block.timestamp > startStakingTime) {\\r\\n            uint32 timeCounter = startStakingTime;\\r\\n            uint256 distributionDurationPointsLen = get()\\r\\n                .distributionDurationPoints\\r\\n                .length;\\r\\n            uint256 idx;\\r\\n            for (idx; idx < distributionDurationPointsLen; idx++) {\\r\\n                uint32 distributionDurationPoint = get()\\r\\n                    .distributionDurationPoints[idx];\\r\\n                if (block.timestamp < timeCounter + distributionDurationPoint) {\\r\\n                    break;\\r\\n                } else {\\r\\n                    timeCounter += distributionDurationPoint;\\r\\n                }\\r\\n            }\\r\\n            distributionAmount = get().distributionDurationPointIdxToAmounts[\\r\\n                idx\\r\\n            ];\\r\\n            distributionDurationPointIdx = idx;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe9124aa344752d583558cc7b9e051be04f1cd4cce0b1b2a3446109f0ae160787\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/v1/interfaces/ITDLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"../../TDLib.sol\\\";\\r\\n\\r\\ninterface ITDLoupeFacet {\\r\\n    function getReceiversByAddresses(\\r\\n        uint256 offset,\\r\\n        uint256 windowSize,\\r\\n        address[] memory addresses\\r\\n    ) external view returns (uint256[] memory indicies);\\r\\n\\r\\n    function getReceiversByShares(\\r\\n        uint256 offset,\\r\\n        uint256 windowSize,\\r\\n        uint256[] memory shares\\r\\n    ) external view returns (uint256[] memory indicies);\\r\\n\\r\\n    function getReceiversByStatuses(\\r\\n        uint256 offset,\\r\\n        uint256 windowSize,\\r\\n        bool[] memory statuses\\r\\n    ) external view returns (uint256[] memory indicies);\\r\\n}\\r\\n\",\"keccak256\":\"0x310bef6f5a0b4b83e7735d11376ef577aff2362a3719a55fa0ee4c910796909a\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/v1/interfaces/ITDProcessFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ITDProcessFacet {\\r\\n    function distribute(\\r\\n        uint256 amount,\\r\\n        IERC20 token\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbd4bf00d85b3d886baf700ec4eadc984e43a8b66a005efd1df77ea9ae3949c2a\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/LTLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary LTLib {\\r\\n    error EpochIsDistributed(uint256 epochNumber);\\r\\n\\r\\n    event EpochAmountIsEmptyOrInflationHasntStarted();\\r\\n\\r\\n    bytes32 constant LOCUS_TOKEN_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus_token\\\");\\r\\n\\r\\n    bytes32 public constant ALLOWANCE_FREE_ROLE = keccak256('ALLOWANCE_FREE_ROLE');\\r\\n\\r\\n    string public constant originalName = \\\"Locus Token\\\";\\r\\n    string public constant originalSymbol = \\\"LCS\\\";\\r\\n\\r\\n    uint256 public constant INITIAL_SUPPLY = 15_000_000 ether;\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(uint256 => bool) isEpochsInflationDistributed;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf153f5383ab3f95836b4e2a123fe07c33d768d9d3eddf9347f0b2c637e464f96\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/LTEmissionControlFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ILTEmissionControlFacet.sol\\\";\\r\\nimport \\\"../LTLib.sol\\\";\\r\\nimport \\\"../../facetsFramework/diamondBase/facets/BaseFacet.sol\\\";\\r\\nimport \\\"../../facetsFramework/tokensDistributor/TDLib.sol\\\";\\r\\nimport \\\"../../facetsFramework/tokensDistributor/v1/interfaces/ITDLoupeFacet.sol\\\";\\r\\nimport \\\"../../facetsFramework/tokensDistributor/v1/interfaces/ITDProcessFacet.sol\\\";\\r\\n\\r\\ncontract LTEmissionControlFacet is BaseFacet, ILTEmissionControlFacet {\\r\\n    function mintInflation() external override delegatedOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.OWNER_ROLE);\\r\\n        (uint256 amountToDistributeInThisEpoch, uint256 epochNumber) = TDLib\\r\\n            .getAmountToDistribute(address(0));\\r\\n        if (amountToDistributeInThisEpoch == 0) {\\r\\n            emit LTLib.EpochAmountIsEmptyOrInflationHasntStarted();\\r\\n            return;\\r\\n        }\\r\\n        if (LTLib.get().isEpochsInflationDistributed[epochNumber]) {\\r\\n            revert LTLib.EpochIsDistributed(epochNumber);\\r\\n        }\\r\\n        ITDProcessFacet(address(this)).distribute(\\r\\n            amountToDistributeInThisEpoch,\\r\\n            IERC20(address(this))\\r\\n        );\\r\\n        LTLib.get().isEpochsInflationDistributed[epochNumber] = true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x829c55320824492edee745c5703ae0478ffbed039ac7cd8988d574d1413dd6c6\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/interfaces/ILTEmissionControlFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface ILTEmissionControlFacet {\\r\\n    function mintInflation() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x0a0ecface2234673c428670f81dae809c4bab2086e52907c9f2d06cfb12809da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0806040523461002257306080526103a09081610027823960805181603a0152f35b5f80fdfe6080806040526004361015610012575f80fd5b5f90813560e01c63c551a2f914610027575f80fd5b346100b557816003193601126100b557307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610089575b61007a57506100776100b9565b80f35b639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a00554161561006a565b5080fd5b335f9081527f7eab7b82f3f21675de29d098b67b1bb6d0c69de2cb1ba0b9eb1dbc18d523752f6020908152604080832054909291907fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e9060ff161561032157508190828380527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a07825263ffffffff808686205416804211610253575b50508215610229578084527fd1db1353a30fa527658deb3246439dbc9a77e005f195f129a52babcc8f9b93e59283835260ff868620541661021157303b1561020d578551906370fd458160e11b82526004820152306024820152848160448183305af18015610203576101d5575b5083525220805460ff19166001179055565b9093906001600160401b0381116101ef578552925f6101c3565b634e487b7160e01b82526041600452602482fd5b86513d87823e3d90fd5b8480fd5b8551634be92cb960e11b815260048101839052602490fd5b5050507fd2c991965bc222503cfa141b9ec5abc0d29c2953d75fc47fce27e6e3ad755198915080a1565b7ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0880548796509350905b8386106102bb575b505050508183527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a09815283832054915f80610155565b818752828588208760031c015460e08860051b161c1690836102dd838361033e565b164210156102eb5750610285565b906102f9919693949661033e565b915f19811461030d5760010194929161027d565b634e487b7160e01b87526011600452602487fd5b604490845190632bc93d7960e21b82523360048301526024820152fd5b91909163ffffffff8080941691160191821161035657565b634e487b7160e01b5f52601160045260245ffdfea26469706673582212201f8535193f8279a4b2409f783b6e5e33b592bb2716fa120206aba3f91bb66fbb64736f6c63430008140033",
  "deployedBytecode": "0x6080806040526004361015610012575f80fd5b5f90813560e01c63c551a2f914610027575f80fd5b346100b557816003193601126100b557307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015610089575b61007a57506100776100b9565b80f35b639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a00554161561006a565b5080fd5b335f9081527f7eab7b82f3f21675de29d098b67b1bb6d0c69de2cb1ba0b9eb1dbc18d523752f6020908152604080832054909291907fb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e9060ff161561032157508190828380527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a07825263ffffffff808686205416804211610253575b50508215610229578084527fd1db1353a30fa527658deb3246439dbc9a77e005f195f129a52babcc8f9b93e59283835260ff868620541661021157303b1561020d578551906370fd458160e11b82526004820152306024820152848160448183305af18015610203576101d5575b5083525220805460ff19166001179055565b9093906001600160401b0381116101ef578552925f6101c3565b634e487b7160e01b82526041600452602482fd5b86513d87823e3d90fd5b8480fd5b8551634be92cb960e11b815260048101839052602490fd5b5050507fd2c991965bc222503cfa141b9ec5abc0d29c2953d75fc47fce27e6e3ad755198915080a1565b7ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0880548796509350905b8386106102bb575b505050508183527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a09815283832054915f80610155565b818752828588208760031c015460e08860051b161c1690836102dd838361033e565b164210156102eb5750610285565b906102f9919693949661033e565b915f19811461030d5760010194929161027d565b634e487b7160e01b87526011600452602487fd5b604490845190632bc93d7960e21b82523360048301526024820152fd5b91909163ffffffff8080941691160191821161035657565b634e487b7160e01b5f52601160045260245ffdfea26469706673582212201f8535193f8279a4b2409f783b6e5e33b592bb2716fa120206aba3f91bb66fbb64736f6c63430008140033",
  "libraries": [
    "LTLib",
    "InitializerLib",
    "PausabilityLib",
    "RolesManagementLib",
    "AutocracyLib"
  ],
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}