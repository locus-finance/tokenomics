{
  "address": "0x6048842F6cF9D752b9067838077E5C3bAe88163c",
  "abi": [
    {
      "inputs": [],
      "name": "CannotStakeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotWithdrawZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegatedCallsOnly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "HasNoRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_initialize_LSDepositaryFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "updateReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45f1263e816f874a61b316502260015920eee7873f42e734166a51c3984140be",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x729F2222aaCD99619B8B660b412baE9fCEa3d90F",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "15733337",
    "logsBloom": "0x
    "blockHash": "0xca04946c1ccf5c97be6724ab38699bf32126b228abb4587f529addd2b2886c5d",
    "transactionHash": "0x45f1263e816f874a61b316502260015920eee7873f42e734166a51c3984140be",
    "logs": [],
    "blockNumber": 154690972,
    "cumulativeGasUsed": "15733337",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2ca920872fa9e16483f5ef3db2c49ecc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotStakeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotWithdrawZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegatedCallsOnly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"HasNoRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_initialize_LSDepositaryFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol\":\"LSDepositaryFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/facets/BaseFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"../libraries/PausabilityLib.sol\\\";\\r\\nimport \\\"../libraries/InitializerLib.sol\\\";\\r\\nimport \\\"../libraries/RolesManagementLib.sol\\\";\\r\\n\\r\\nabstract contract BaseFacet is Initializable {\\r\\n    error DelegatedCallsOnly();\\r\\n    \\r\\n    /// @dev An address of the actual contract instance. The original address as part of the context.\\r\\n    address internal immutable __self = address(this);\\r\\n\\r\\n    function enforceDelegatedOnly() internal view {\\r\\n        if (address(this) == __self || !InitializerLib.get().initialized) {\\r\\n            revert DelegatedCallsOnly();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev The body of the modifier is copied into a faucet sources, so to make a small gas\\r\\n    /// optimization - the modifier uses an internal function call.\\r\\n    modifier delegatedOnly {\\r\\n        enforceDelegatedOnly();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier internalOnly {\\r\\n        RolesManagementLib.enforceSenderRole(RolesManagementLib.INTERNAL_ROLE);\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2a062649afde4b46419cf35b5662c3fa217d03656ebd83d83751c57fde0b3c90\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/InitializerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary InitializerLib {\\r\\n    error AlreadyInitialized();\\r\\n    error NotImplemented();\\r\\n\\r\\n    bytes32 constant INITIALIZER_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.initializer\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = INITIALIZER_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset() internal {\\r\\n        get().initialized = false;\\r\\n    }\\r\\n\\r\\n    function initialize() internal {\\r\\n        if (get().initialized) {\\r\\n            revert AlreadyInitialized();\\r\\n        } else {\\r\\n            get().initialized = true;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xc0f1dacbaff19bbca3f59fe381f195906a7d5d87b17f27d5f81c8f3affbf4060\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/PausabilityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary PausabilityLib {\\r\\n    bytes32 constant PAUSABILITY_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.pausability\\\");\\r\\n\\r\\n    struct Storage {\\r\\n        bool paused;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = PAUSABILITY_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x9b3a465f40e7bbced37337904db6f7acb116e3242a97f864b4b34d54bafb68d2\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/diamondBase/libraries/RolesManagementLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nlibrary RolesManagementLib {\\r\\n    event RoleSet(address who, bytes32 role, bool isGrantedOrRevoked);\\r\\n\\r\\n    error HasNoRole(address who, bytes32 role);\\r\\n    error HasNoRoles(address who, bytes32[] roles);\\r\\n\\r\\n    bytes32 constant ROLES_MANAGEMENT_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus.roles\\\");\\r\\n\\r\\n    // roles to check with EOA\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\r\\n    bytes32 public constant OWNER_ROLE = keccak256('OWNER_ROLE');\\r\\n\\r\\n    // A special role - must not be removed.\\r\\n    bytes32 public constant INTERNAL_ROLE = keccak256('INTERNAL_ROLE');\\r\\n\\r\\n    // roles to check with smart-contracts\\r\\n    bytes32 public constant ALLOWED_TOKEN_ROLE = keccak256('ALLOWED_TOKEN_ROLE');\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(bytes32 => mapping(address => bool)) roles;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = ROLES_MANAGEMENT_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceRole(address who, bytes32 role) internal view {\\r\\n        if (role == INTERNAL_ROLE) {\\r\\n            if (who != address(this)) {\\r\\n                revert HasNoRole(who, INTERNAL_ROLE);\\r\\n            }\\r\\n        } else if (!get().roles[role][who]) {\\r\\n            revert HasNoRole(who, role);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n    function hasRole(address who, bytes32 role) internal view returns(bool) {\\r\\n        return get().roles[role][who];\\r\\n    }\\r\\n\\r\\n    function enforceSenderRole(bytes32 role) internal view {\\r\\n        enforceRole(msg.sender, role);\\r\\n    }\\r\\n\\r\\n    function grantRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = true; \\r\\n        emit RoleSet(who, role, true);\\r\\n    }\\r\\n\\r\\n    function revokeRole(address who, bytes32 role) internal {\\r\\n        get().roles[role][who] = false; \\r\\n        emit RoleSet(who, role, false);\\r\\n    }\\r\\n\\r\\n    function enforceEitherOfRoles(address who, bytes32[] memory roles) internal view {\\r\\n        bool result;\\r\\n        for (uint256 i = 0; i < roles.length; i++) {\\r\\n            if (roles[i] == INTERNAL_ROLE) {\\r\\n                result = result || who == address(this);\\r\\n            } else {\\r\\n                result = result || get().roles[roles[i]][who];\\r\\n            }\\r\\n        }\\r\\n        if (!result) {\\r\\n            revert HasNoRoles(who, roles);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceSenderEitherOfRoles(bytes32[] memory roles) internal view {\\r\\n        enforceEitherOfRoles(msg.sender, roles);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x63362b8189cb9c1cec32aade5a5fdf3b2548761cf124dfe8ded723569ce2c00d\",\"license\":\"MIT\"},\"contracts/diamonds/facetsFramework/tokensDistributor/TDLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary TDLib {\\r\\n    error InvalidOffset(uint256 offset);\\r\\n    error IntervalsMustBeSorted();\\r\\n    error NothingWasFound();\\r\\n    error IncorrectLengths(uint256 l1, uint256 l2);\\r\\n\\r\\n    event ReceiverAltered(\\r\\n        address indexed receiver,\\r\\n        uint256 indexed share,\\r\\n        bool indexed isBlocked,\\r\\n        uint256 sumOfShares\\r\\n    );\\r\\n    event Distributed(\\r\\n        uint256 indexed distributedValue,\\r\\n        uint256 indexed tokensLeftAndSentToGovernance\\r\\n    );\\r\\n\\r\\n    bytes32 constant LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION =\\r\\n        keccak256(\\\"diamond.standard.diamond.storage.locus.token_distribution\\\");\\r\\n\\r\\n    uint16 public constant MAX_BPS = 10000;\\r\\n\\r\\n    struct DistributionReceiver {\\r\\n        uint256 share;\\r\\n        uint256 previousShare;\\r\\n        address receiver;\\r\\n        bool isBlocked;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        mapping(address => uint32) startTimestamps;\\r\\n        uint32[] distributionDurationPoints;\\r\\n        mapping(uint256 => uint256) distributionDurationPointIdxToAmounts;\\r\\n        DistributionReceiver[] distributionReceivers;\\r\\n        uint256 sumOfShares;\\r\\n        address undistributedAmountsReceiver;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_TOKEN_DISTRIBUTION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getAmountToDistribute(\\r\\n        address entity\\r\\n    )\\r\\n        internal\\r\\n        view\\r\\n        returns (\\r\\n            uint256 distributionAmount,\\r\\n            uint256 distributionDurationPointIdx\\r\\n        )\\r\\n    {\\r\\n        uint32 startStakingTime = get().startTimestamps[entity];\\r\\n        if (block.timestamp > startStakingTime) {\\r\\n            uint32 timeCounter = startStakingTime;\\r\\n            uint256 distributionDurationPointsLen = get()\\r\\n                .distributionDurationPoints\\r\\n                .length;\\r\\n            uint256 idx;\\r\\n            for (idx; idx < distributionDurationPointsLen; idx++) {\\r\\n                uint32 distributionDurationPoint = get()\\r\\n                    .distributionDurationPoints[idx];\\r\\n                if (block.timestamp < timeCounter + distributionDurationPoint) {\\r\\n                    break;\\r\\n                } else {\\r\\n                    timeCounter += distributionDurationPoint;\\r\\n                }\\r\\n            }\\r\\n            distributionAmount = get().distributionDurationPointIdxToAmounts[\\r\\n                idx\\r\\n            ];\\r\\n            distributionDurationPointIdx = idx;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd1999d48c5daeb21a30b72691989864d23c7f8f84c79b8156cb6685b0d731c64\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/LSLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\n// look for the Diamond.sol in the hardhat-deploy/solc_0.8/Diamond.sol\\r\\nlibrary LSLib {\\r\\n    error InvalidBPS(uint16 bps);\\r\\n    error OnlyRewardsDistribution();\\r\\n    error CannotStakeZero();\\r\\n    error CannotWithdrawZero();\\r\\n    error RewardIsTooHigh(uint256 actualReward);\\r\\n    error CannotRecoverToken(address token, uint256 amount);\\r\\n    error ChangingRewardsDurationTooEarly(uint256 deltaInSeconds);\\r\\n    error NotImplemented();\\r\\n\\r\\n    event RewardAdded(uint256 indexed reward);\\r\\n    event Staked(address indexed user, uint256 indexed amount);\\r\\n    event Withdrawn(address indexed user, uint256 indexed amount, uint256 indexed feesTaken);\\r\\n    event RewardPaid(address indexed user, uint256 indexed reward, uint256 indexed feesTaken);\\r\\n    event RewardsDurationUpdated(uint256 indexed newDuration);\\r\\n    event Recovered(address indexed token, uint256 indexed amount);\\r\\n\\r\\n    bytes32 constant LOCUS_STAKING_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage.locus_staking\\\");\\r\\n\\r\\n    bytes32 public constant REWARD_DISTRIBUTOR_ROLE = keccak256('REWARD_DISTRIBUTOR_ROLE');\\r\\n    bytes32 public constant ALLOWED_TO_STAKE_FOR_ROLE = keccak256('ALLOWED_TO_STAKE_FOR_ROLE');\\r\\n\\r\\n    uint256 public constant PRECISION = 1 ether;\\r\\n\\r\\n    struct ReferenceTypes {\\r\\n        mapping(address => uint256) userRewardPerTokenPaid;\\r\\n        mapping(address => uint256) rewards;\\r\\n        mapping(address => uint256) balanceOf;\\r\\n    }\\r\\n\\r\\n    struct Primitives {\\r\\n        IERC20Metadata rewardsToken;\\r\\n        IERC20Metadata stakingToken;\\r\\n        address locusToken;\\r\\n        uint256 periodFinish;\\r\\n        uint256 rewardRate;\\r\\n        uint256 rewardsDuration;\\r\\n        uint256 lastUpdateTime;\\r\\n        uint256 rewardPerTokenStored;\\r\\n        uint256 totalSupply;\\r\\n        uint256 totalReward;\\r\\n    }\\r\\n\\r\\n    struct Storage {\\r\\n        Primitives p;\\r\\n        ReferenceTypes rt;\\r\\n    }\\r\\n\\r\\n    function get() internal pure returns (Storage storage s) {\\r\\n        bytes32 position = LOCUS_STAKING_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            s.slot := position\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x284fefa1ceae887ab25ac19aecdc3f8e2c09c492a9c29a325ef1d5c20098a637\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../LSLib.sol\\\";\\r\\nimport \\\"../../facetsFramework/tokensDistributor/TDLib.sol\\\";\\r\\nimport \\\"../../facetsFramework/diamondBase/facets/BaseFacet.sol\\\";\\r\\nimport \\\"../../locusToken/v1/interfaces/ILTERC20Facet.sol\\\";\\r\\nimport \\\"../../locusToken/v1/autocracy/interfaces/ILTAutocracyFacet.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ILSProcessFeesFacet.sol\\\";\\r\\nimport \\\"./interfaces/ILSDepositaryFacet.sol\\\";\\r\\nimport \\\"./interfaces/ILSLoupeFacet.sol\\\";\\r\\n\\r\\ncontract LSDepositaryFacet is\\r\\n    BaseFacet,\\r\\n    ReentrancyGuardUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    ILSDepositaryFacet\\r\\n{\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    function _initialize_LSDepositaryFacet() external initializer override internalOnly {\\r\\n        __ReentrancyGuard_init();\\r\\n        __Pausable_init();\\r\\n    }\\r\\n\\r\\n    function stakeFor(\\r\\n        address staker,\\r\\n        uint256 amount\\r\\n    ) external override nonReentrant delegatedOnly whenNotPaused {\\r\\n        RolesManagementLib.enforceSenderRole(LSLib.ALLOWED_TO_STAKE_FOR_ROLE);\\r\\n        _stake(staker, amount);\\r\\n    }\\r\\n\\r\\n    function stake(\\r\\n        uint256 amount\\r\\n    ) external override nonReentrant delegatedOnly whenNotPaused {\\r\\n        _stake(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 amount\\r\\n    ) public override nonReentrant delegatedOnly {\\r\\n        updateReward(msg.sender);\\r\\n        if (amount == 0) revert LSLib.CannotWithdrawZero();\\r\\n        LSLib.Primitives storage p = LSLib.get().p;\\r\\n        p.totalSupply -= amount;\\r\\n        LSLib.get().rt.balanceOf[msg.sender] -= amount;\\r\\n        IERC20Metadata stakingToken = p.stakingToken;\\r\\n        uint256 amountWithFees = amount;\\r\\n        if (address(stakingToken) == p.locusToken) {\\r\\n            amountWithFees = ILSProcessFeesFacet(address(this))\\r\\n                .getFeesAccountedAmountAndDistributeFees(\\r\\n                    amount,\\r\\n                    stakingToken\\r\\n                );\\r\\n        }\\r\\n        stakingToken.safeTransfer(msg.sender, amountWithFees);\\r\\n        emit LSLib.Withdrawn(msg.sender, amount, amount - amountWithFees);\\r\\n    }\\r\\n\\r\\n    function getReward() public override nonReentrant delegatedOnly {\\r\\n        updateReward(msg.sender);\\r\\n        LSLib.Primitives storage p = LSLib.get().p;\\r\\n        LSLib.ReferenceTypes storage rt = LSLib.get().rt;\\r\\n        uint256 rawReward = rt.rewards[msg.sender];\\r\\n        uint256 reward = rawReward;\\r\\n        if (address(LSLib.get().p.stakingToken) != LSLib.get().p.locusToken) {\\r\\n            reward = ILSProcessFeesFacet(address(this))\\r\\n                .getFeesAccountedAmountAndDistributeFees(\\r\\n                    rawReward,\\r\\n                    p.rewardsToken\\r\\n                );\\r\\n        }\\r\\n        if (reward > 0) {\\r\\n            rt.rewards[msg.sender] = 0;\\r\\n            p.totalReward -= reward;\\r\\n            p.rewardsToken.safeTransfer(msg.sender, reward);\\r\\n            emit LSLib.RewardPaid(msg.sender, reward, rawReward - reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function exit() external override {\\r\\n        withdraw(LSLib.get().rt.balanceOf[msg.sender]);\\r\\n        getReward();\\r\\n    }\\r\\n\\r\\n    function updateReward(address account) public override internalOnly {\\r\\n        ILSLoupeFacet self = ILSLoupeFacet(address(this));\\r\\n        LSLib.get().p.rewardPerTokenStored = self.rewardPerToken();\\r\\n        LSLib.get().p.lastUpdateTime = self.lastTimeRewardApplicable();\\r\\n        if (account != address(0)) {\\r\\n            LSLib.get().rt.rewards[account] = self.earned(account);\\r\\n            LSLib.get().rt.userRewardPerTokenPaid[account] = LSLib\\r\\n                .get()\\r\\n                .p\\r\\n                .rewardPerTokenStored;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _stake(address staker, uint256 amount) internal {\\r\\n        updateReward(staker);\\r\\n        LSLib.Primitives storage p = LSLib.get().p;\\r\\n        IERC20Metadata stakingToken = p.stakingToken;\\r\\n        if (amount == 0) revert LSLib.CannotStakeZero();\\r\\n        TDLib.get().startTimestamps[staker] = uint32(block.timestamp);\\r\\n        p.totalSupply += amount;\\r\\n        LSLib.get().rt.balanceOf[staker] += amount;\\r\\n        stakingToken.safeTransferFrom(\\r\\n            staker,\\r\\n            address(this),\\r\\n            amount\\r\\n        );\\r\\n        emit LSLib.Staked(staker, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4277693d1be1f168e0f250e74d6c4cb7695a50629f68280ffa877770acf32a6f\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/interfaces/ILSDepositaryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILSDepositaryFacet {\\r\\n    function _initialize_LSDepositaryFacet() external;\\r\\n\\r\\n    function stake(uint256 amount) external;\\r\\n\\r\\n    function stakeFor(address staker, uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function exit() external;\\r\\n\\r\\n    function updateReward(address account) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x939a7f7999aa2b0a72fd7154310c3395fe2913338f29a0853609ce9da458ef66\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/interfaces/ILSLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILSLoupeFacet {\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function getRewardForDuration() external view returns (uint256);\\r\\n\\r\\n    function getCurrentFeeBps() external view returns (uint256 feeBps);\\r\\n\\r\\n    function getTimeOfLastStake(address staker) external view returns (uint32);\\r\\n}\\r\\n\",\"keccak256\":\"0x552c454bc5fd87eda4a26b12b0d4d6a2aa8555dcbe0bc62d39cb0abeda8e828c\",\"license\":\"MIT\"},\"contracts/diamonds/locusStaking/v1/interfaces/ILSProcessFeesFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\ninterface ILSProcessFeesFacet {\\r\\n    function getFeesAccountedAmountAndDistributeFees(\\r\\n        uint256 reward,\\r\\n        IERC20Metadata rewardsToken\\r\\n    ) external returns (uint256 feesSubstractedReward);\\r\\n}\\r\\n\",\"keccak256\":\"0x4bea804ada58c44f0aec6a570019f363eae8db18f817405dde2e6e7235c35a6a\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/autocracy/interfaces/ILTAutocracyFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILTAutocracyFacet {\\r\\n    function establishAutocracy() external;\\r\\n\\r\\n    function defeatAutocracyForever() external;\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function mint(address who, uint256 amount) external;\\r\\n\\r\\n    function areAutocratsReign() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xc92f4762416078bc86ec71ec3d3a2f453f5bb212a8aa82ba8356b7e03b6c95f7\",\"license\":\"MIT\"},\"contracts/diamonds/locusToken/v1/interfaces/ILTERC20Facet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ILTERC20Facet {\\r\\n    function mintTo(address account, uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n\\r\\n    function delegateTo(address delegatee) external;\\r\\n\\r\\n    /// @notice To be able to vote for something by themselves a holder must call it first to delegate\\r\\n    /// all voting power they have to themselves.\\r\\n    function enablePolitics() external;\\r\\n\\r\\n    function getVotingPower(address account) external view returns (uint256);\\r\\n    \\r\\n    function getPastVotingPower(address account, uint256 timepoint) external view returns (uint256);\\r\\n\\r\\n    function getDelegatee(address account) external view returns (address);\\r\\n\\r\\n    function setupTokenInfo() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x89688989aa0d6b2c7e26dccdb33e8e4d477305ad8b20ff5b38ac53b7b821d98b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a08060405234610023573060805261171f90816100298239608051816110180152f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c80632e1a7d4d14610b8b5780632ee4090814610ad15780633d18b9121461090a5780635c975abb146108e7578063632447c91461076d578063915f37c51461061b578063a694fc3a146105db5763e9fad8ee1461007757600080fd5b346105d757816003193601126105d75761009033610f42565b549061009a610fbf565b6100a2611015565b6100aa610e89565b805163cd3daf9d60e01b81526020918282600481305afa9182156105cd57859261059a575b5060008051602061162a83398151915291825580516380faa57d60e01b8152928084600481305afa93841561059057869461055d575b5060008051602061166a833981519152938455336104df575b84156104ce5760008051602061168a83398151915261013e86825461108c565b905561014933610f42565b61015486825461108c565b905560018060a01b03926000805160206116ca83398151915294848654169680976000805160206116aa83398151915298878a54168214610454575b61019f816101a5933390611101565b8261108c565b903360008051602061160a8339815191528b80a4600180556101c5610fbf565b6101cd611015565b6101d5610e89565b835163cd3daf9d60e01b81528381600481305afa90811561041d578991610427575b50825583516380faa57d60e01b8152908382600481305afa91821561041d5789926103ea575b50553361036c575b5061022f33610ed0565b5494838087965416915416036102de575b505082610250575b836001805580f35b6102b0916102ab8480938761026433610ed0565b557fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad57461029183825461108c565b9055339060008051602061164a8339815191525416611101565b61108c565b90337fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f518480a4388080610248565b808395610312939460008051602061164a8339815191525416908551948592839263b859bb5f60e01b8452600484016110e8565b038189305af192831561036357508592610331575b5050913880610240565b90809250813d831161035c575b61034881836110af565b8101031261035857513880610327565b8380fd5b503d61033e565b513d87823e3d90fd5b82516246613160e11b81523360048201528281602481305afa9081156103e05788916103af575b5061039d33610ed0565b55546103a833610f09565b5538610225565b90508281813d83116103d9575b6103c681836110af565b810103126103d5575138610393565b8780fd5b503d6103bc565b84513d8a823e3d90fd5b9091508381813d8311610416575b61040281836110af565b810103126104125751903861021d565b8880fd5b503d6103f8565b85513d8b823e3d90fd5b90508381813d831161044d575b61043e81836110af565b810103126104125751386101f7565b503d610434565b50855163b859bb5f60e01b81529085828c81806104758689600484016110e8565b0391305af19182156104c4578b9261048f575b5090610190565b91508582813d83116104bd575b6104a681836110af565b810103126104b95790519061019f610488565b8a80fd5b503d61049c565b87513d8d823e3d90fd5b815163061bb89b60e51b8152600490fd5b81516246613160e11b81523360048201528181602481305afa908115610553578791610522575b5061051033610ed0565b55825461051c33610f09565b5561011e565b90508181813d831161054c575b61053981836110af565b81010312610548575138610506565b8680fd5b503d61052f565b83513d89823e3d90fd5b9080945081813d8311610589575b61057581836110af565b8101031261058557519238610105565b8580fd5b503d61056b565b82513d88823e3d90fd5b9091508281813d83116105c6575b6105b281836110af565b810103126105c2575190386100cf565b8480fd5b503d6105a8565b81513d87823e3d90fd5b5080fd5b8234610618576020366003190112610618576105f5610fbf565b6105fd611015565b610605610f7b565b61061160043533611387565b6001805580f35b80fd5b50346105d757816003193601126105d757815460ff8160081c1615808091610760575b8015610749575b156106ee5760ff19828116600117855591816106dd575b50610665610e89565b83549161069660ff8460081c1661067b81610e29565b61068481610e29565b6001805561069181610e29565b610e29565b606554166065556106a5578280f35b61ff001916825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b61ffff19166101011784553861065c565b825162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156106455750600160ff831614610645565b50600160ff83161061063e565b50346105d7576020806003193601126108e357610788610e0e565b91610791610e89565b805163cd3daf9d60e01b8152908282600481305afa9182156105cd5785926108b4575b5060008051602061162a83398151915291825580516380faa57d60e01b81528381600481305afa908115610590578691610887575b5060008051602061166a833981519152556001600160a01b038416928361080e578580f35b8151936246613160e11b855260048501528084602481305afa91821561036357508591610857575b5061084d925061084584610ed0565b555491610f09565b5538808080808580f35b905082813d8311610880575b61086d81836110af565b810103126103585761084d915138610836565b503d610863565b90508381813d83116108ad575b61089e81836110af565b810103126105855751386107e9565b503d610894565b9091508281813d83116108dc575b6108cc81836110af565b810103126105c2575190386107b4565b503d6108c2565b8280fd5b50346105d757816003193601126105d75760209060ff6065541690519015158152f35b50346105d757816003193601126105d757610923610fbf565b61092b611015565b610933610e89565b805163cd3daf9d60e01b8152602091908281600481305afa908115610ac7578491610a9a575b5060008051602061162a83398151915290815581516380faa57d60e01b81528381600481305afa908115610a63578591610a6d575b5060008051602061166a83398151915255336109f3575b506109af33610ed0565b5491829160018060a01b0391826000805160206116ca8339815191525416836000805160206116aa8339815191525416036102de5750508261025057836001805580f35b81516246613160e11b81523360048201528381602481305afa908115610a63578591610a36575b50610a2433610ed0565b5554610a2f33610f09565b55386109a5565b90508381813d8311610a5c575b610a4d81836110af565b810103126105c2575138610a1a565b503d610a43565b83513d87823e3d90fd5b90508381813d8311610a93575b610a8481836110af565b810103126105c257513861098e565b503d610a7a565b90508281813d8311610ac0575b610ab181836110af565b81010312610358575138610959565b503d610aa7565b82513d86823e3d90fd5b50346105d757806003193601126105d757610aea610e0e565b90610af3610fbf565b610afb611015565b610b03610f7b565b7ff81f7ae177f481ea98850e26888e43f384935d185488cac1397c5015987a2174908184527f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e4460205280842033855260205260ff818520541615610b6e578361061160243585611387565b604492505190632bc93d7960e21b82523360048301526024820152fd5b50346105d757602090816003193601126108e35760043591610bab610fbf565b610bb3611015565b610bbb610e89565b815163cd3daf9d60e01b81528181600481305afa908115610a63578591610de1575b5060008051602061162a83398151915290815582516380faa57d60e01b81528281600481305afa908115610daa578691610db4575b5060008051602061166a8339815191525533610d3a575b5082156104ce5760008051602061168a833981519152610c4a84825461108c565b9055610c5533610f42565b610c6084825461108c565b905560018060a01b0391826000805160206116ca83398151915254169184936000805160206116aa83398151915254168314610cc4575b50509061019f81610ca9933390611101565b903360008051602061160a8339815191528480a46001805580f35b815163b859bb5f60e01b8152919350808280610ce48689600484016110e8565b038189305af193841561036357508593610d06575b505061019f610ca9610c97565b90809350813d8311610d33575b610d1d81836110af565b810103126103585761019f610ca9925192610cf9565b503d610d13565b82516246613160e11b81523360048201528281602481305afa908115610daa578691610d7d575b50610d6b33610ed0565b5554610d7633610f09565b5538610c29565b90508281813d8311610da3575b610d9481836110af565b81010312610585575138610d61565b503d610d8a565b84513d88823e3d90fd5b90508281813d8311610dda575b610dcb81836110af565b81010312610585575138610c12565b503d610dc1565b90508181813d8311610e07575b610df881836110af565b810103126105c2575138610bdd565b503d610dee565b600435906001600160a01b0382168203610e2457565b600080fd5b15610e3057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b303303610e9257565b604051632bc93d7960e21b81523360048201527fddd94edc7da5bca8f576c77964a4737ba5172c728e2d539e672f0229d1e9ec2d6024820152604490fd5b6001600160a01b031660009081527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5766020526040902090565b6001600160a01b031660009081527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5756020526040902090565b6001600160a01b031660009081527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5776020526040902090565b60ff60655416610f8757565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260015414610fd0576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015611060575b61104e57565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005541615611048565b9190820391821161109957565b634e487b7160e01b600052601160045260246000fd5b601f909101601f19168101906001600160401b038211908210176110d257604052565b634e487b7160e01b600052604160045260246000fd5b9081526001600160a01b03909116602082015260400190565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b038311828410176110d25761115092604052611152565b565b604080516001600160a01b03929092169291906001600160401b03908201818111838210176110d2576040526020938483527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858401526000808587829751910182855af1903d1561129b573d92831161128757906111f1939291604051926111e488601f19601f84011601856110af565b83523d868885013e6112a6565b805191821591848315611263575b50505090501561120c5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126105d7578201519081151582036106185750803880846111ff565b634e487b7160e01b85526041600452602485fd5b906111f19392506060915b9192901561130857508151156112ba575090565b3b156112c35790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561131b5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611361575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061133e565b9190820180921161109957565b61138f610e89565b6040805163cd3daf9d60e01b8152916020908184600481305afa9384156115fe576000946115cf575b5060008051602061162a83398151915293845582516380faa57d60e01b81528281600481305afa9081156115c457600091611597575b5060008051602061166a833981519152556001600160a01b03818116948561151a575b506000805160206116ca83398151915254169085156115095761148d90856000527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0784528460002063ffffffff421663ffffffff1982541617905560008051602061168a83398151915261148688825461137a565b9055610f42565b61149886825461137a565b905582516323b872dd60e01b92810192909252602482018490523060448301526064808301869052825260a082016001600160401b038111838210176110d2576114e29352611152565b7f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d600080a3565b8351636a76ff9f60e01b8152600490fd5b84516246613160e11b8152600481018790528481602481305afa90811561158c5760009161155f575b5061154d84610ed0565b555461155883610f09565b5538611411565b908582813d8311611585575b61157581836110af565b8101031261061857505138611543565b503d61156b565b86513d6000823e3d90fd5b908382813d83116115bd575b6115ad81836110af565b81010312610618575051386113ee565b503d6115a3565b84513d6000823e3d90fd5b90938282813d83116115f7575b6115e681836110af565b8101031261061857505192386113b8565b503d6115dc565b83513d6000823e3d90fdfe92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad572d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56bd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad571d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad573d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56dd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56ca2646970667358221220d9f94dc2f20d3876137862cdd319b3550fe971e18fc05401b47a0925dd16b41964736f6c63430008130033",
  "deployedBytecode": "0x604060808152600436101561001357600080fd5b600090813560e01c80632e1a7d4d14610b8b5780632ee4090814610ad15780633d18b9121461090a5780635c975abb146108e7578063632447c91461076d578063915f37c51461061b578063a694fc3a146105db5763e9fad8ee1461007757600080fd5b346105d757816003193601126105d75761009033610f42565b549061009a610fbf565b6100a2611015565b6100aa610e89565b805163cd3daf9d60e01b81526020918282600481305afa9182156105cd57859261059a575b5060008051602061162a83398151915291825580516380faa57d60e01b8152928084600481305afa93841561059057869461055d575b5060008051602061166a833981519152938455336104df575b84156104ce5760008051602061168a83398151915261013e86825461108c565b905561014933610f42565b61015486825461108c565b905560018060a01b03926000805160206116ca83398151915294848654169680976000805160206116aa83398151915298878a54168214610454575b61019f816101a5933390611101565b8261108c565b903360008051602061160a8339815191528b80a4600180556101c5610fbf565b6101cd611015565b6101d5610e89565b835163cd3daf9d60e01b81528381600481305afa90811561041d578991610427575b50825583516380faa57d60e01b8152908382600481305afa91821561041d5789926103ea575b50553361036c575b5061022f33610ed0565b5494838087965416915416036102de575b505082610250575b836001805580f35b6102b0916102ab8480938761026433610ed0565b557fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad57461029183825461108c565b9055339060008051602061164a8339815191525416611101565b61108c565b90337fd6f2c8500df5b44f11e9e48b91ff9f1b9d81bc496d55570c2b1b75bf65243f518480a4388080610248565b808395610312939460008051602061164a8339815191525416908551948592839263b859bb5f60e01b8452600484016110e8565b038189305af192831561036357508592610331575b5050913880610240565b90809250813d831161035c575b61034881836110af565b8101031261035857513880610327565b8380fd5b503d61033e565b513d87823e3d90fd5b82516246613160e11b81523360048201528281602481305afa9081156103e05788916103af575b5061039d33610ed0565b55546103a833610f09565b5538610225565b90508281813d83116103d9575b6103c681836110af565b810103126103d5575138610393565b8780fd5b503d6103bc565b84513d8a823e3d90fd5b9091508381813d8311610416575b61040281836110af565b810103126104125751903861021d565b8880fd5b503d6103f8565b85513d8b823e3d90fd5b90508381813d831161044d575b61043e81836110af565b810103126104125751386101f7565b503d610434565b50855163b859bb5f60e01b81529085828c81806104758689600484016110e8565b0391305af19182156104c4578b9261048f575b5090610190565b91508582813d83116104bd575b6104a681836110af565b810103126104b95790519061019f610488565b8a80fd5b503d61049c565b87513d8d823e3d90fd5b815163061bb89b60e51b8152600490fd5b81516246613160e11b81523360048201528181602481305afa908115610553578791610522575b5061051033610ed0565b55825461051c33610f09565b5561011e565b90508181813d831161054c575b61053981836110af565b81010312610548575138610506565b8680fd5b503d61052f565b83513d89823e3d90fd5b9080945081813d8311610589575b61057581836110af565b8101031261058557519238610105565b8580fd5b503d61056b565b82513d88823e3d90fd5b9091508281813d83116105c6575b6105b281836110af565b810103126105c2575190386100cf565b8480fd5b503d6105a8565b81513d87823e3d90fd5b5080fd5b8234610618576020366003190112610618576105f5610fbf565b6105fd611015565b610605610f7b565b61061160043533611387565b6001805580f35b80fd5b50346105d757816003193601126105d757815460ff8160081c1615808091610760575b8015610749575b156106ee5760ff19828116600117855591816106dd575b50610665610e89565b83549161069660ff8460081c1661067b81610e29565b61068481610e29565b6001805561069181610e29565b610e29565b606554166065556106a5578280f35b61ff001916825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b61ffff19166101011784553861065c565b825162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156106455750600160ff831614610645565b50600160ff83161061063e565b50346105d7576020806003193601126108e357610788610e0e565b91610791610e89565b805163cd3daf9d60e01b8152908282600481305afa9182156105cd5785926108b4575b5060008051602061162a83398151915291825580516380faa57d60e01b81528381600481305afa908115610590578691610887575b5060008051602061166a833981519152556001600160a01b038416928361080e578580f35b8151936246613160e11b855260048501528084602481305afa91821561036357508591610857575b5061084d925061084584610ed0565b555491610f09565b5538808080808580f35b905082813d8311610880575b61086d81836110af565b810103126103585761084d915138610836565b503d610863565b90508381813d83116108ad575b61089e81836110af565b810103126105855751386107e9565b503d610894565b9091508281813d83116108dc575b6108cc81836110af565b810103126105c2575190386107b4565b503d6108c2565b8280fd5b50346105d757816003193601126105d75760209060ff6065541690519015158152f35b50346105d757816003193601126105d757610923610fbf565b61092b611015565b610933610e89565b805163cd3daf9d60e01b8152602091908281600481305afa908115610ac7578491610a9a575b5060008051602061162a83398151915290815581516380faa57d60e01b81528381600481305afa908115610a63578591610a6d575b5060008051602061166a83398151915255336109f3575b506109af33610ed0565b5491829160018060a01b0391826000805160206116ca8339815191525416836000805160206116aa8339815191525416036102de5750508261025057836001805580f35b81516246613160e11b81523360048201528381602481305afa908115610a63578591610a36575b50610a2433610ed0565b5554610a2f33610f09565b55386109a5565b90508381813d8311610a5c575b610a4d81836110af565b810103126105c2575138610a1a565b503d610a43565b83513d87823e3d90fd5b90508381813d8311610a93575b610a8481836110af565b810103126105c257513861098e565b503d610a7a565b90508281813d8311610ac0575b610ab181836110af565b81010312610358575138610959565b503d610aa7565b82513d86823e3d90fd5b50346105d757806003193601126105d757610aea610e0e565b90610af3610fbf565b610afb611015565b610b03610f7b565b7ff81f7ae177f481ea98850e26888e43f384935d185488cac1397c5015987a2174908184527f256352104e666e6cce09c45a35c339c150e1991724469c7d87b784a284535e4460205280842033855260205260ff818520541615610b6e578361061160243585611387565b604492505190632bc93d7960e21b82523360048301526024820152fd5b50346105d757602090816003193601126108e35760043591610bab610fbf565b610bb3611015565b610bbb610e89565b815163cd3daf9d60e01b81528181600481305afa908115610a63578591610de1575b5060008051602061162a83398151915290815582516380faa57d60e01b81528281600481305afa908115610daa578691610db4575b5060008051602061166a8339815191525533610d3a575b5082156104ce5760008051602061168a833981519152610c4a84825461108c565b9055610c5533610f42565b610c6084825461108c565b905560018060a01b0391826000805160206116ca83398151915254169184936000805160206116aa83398151915254168314610cc4575b50509061019f81610ca9933390611101565b903360008051602061160a8339815191528480a46001805580f35b815163b859bb5f60e01b8152919350808280610ce48689600484016110e8565b038189305af193841561036357508593610d06575b505061019f610ca9610c97565b90809350813d8311610d33575b610d1d81836110af565b810103126103585761019f610ca9925192610cf9565b503d610d13565b82516246613160e11b81523360048201528281602481305afa908115610daa578691610d7d575b50610d6b33610ed0565b5554610d7633610f09565b5538610c29565b90508281813d8311610da3575b610d9481836110af565b81010312610585575138610d61565b503d610d8a565b84513d88823e3d90fd5b90508281813d8311610dda575b610dcb81836110af565b81010312610585575138610c12565b503d610dc1565b90508181813d8311610e07575b610df881836110af565b810103126105c2575138610bdd565b503d610dee565b600435906001600160a01b0382168203610e2457565b600080fd5b15610e3057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b303303610e9257565b604051632bc93d7960e21b81523360048201527fddd94edc7da5bca8f576c77964a4737ba5172c728e2d539e672f0229d1e9ec2d6024820152604490fd5b6001600160a01b031660009081527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5766020526040902090565b6001600160a01b031660009081527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5756020526040902090565b6001600160a01b031660009081527fd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad5776020526040902090565b60ff60655416610f8757565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260015414610fd0576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316148015611060575b61104e57565b604051639f357e6b60e01b8152600490fd5b5060ff7f9f1709bc5ab0578be51bb81e11b02cdd9c21aa603d7325a8a7551bbd5685a005541615611048565b9190820391821161109957565b634e487b7160e01b600052601160045260246000fd5b601f909101601f19168101906001600160401b038211908210176110d257604052565b634e487b7160e01b600052604160045260246000fd5b9081526001600160a01b03909116602082015260400190565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b038311828410176110d25761115092604052611152565b565b604080516001600160a01b03929092169291906001600160401b03908201818111838210176110d2576040526020938483527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858401526000808587829751910182855af1903d1561129b573d92831161128757906111f1939291604051926111e488601f19601f84011601856110af565b83523d868885013e6112a6565b805191821591848315611263575b50505090501561120c5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126105d7578201519081151582036106185750803880846111ff565b634e487b7160e01b85526041600452602485fd5b906111f19392506060915b9192901561130857508151156112ba575090565b3b156112c35790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501561131b5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510611361575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061133e565b9190820180921161109957565b61138f610e89565b6040805163cd3daf9d60e01b8152916020908184600481305afa9384156115fe576000946115cf575b5060008051602061162a83398151915293845582516380faa57d60e01b81528281600481305afa9081156115c457600091611597575b5060008051602061166a833981519152556001600160a01b03818116948561151a575b506000805160206116ca83398151915254169085156115095761148d90856000527ff8a6c10351c569dde9f00d2a7d439ceae77f38bfadfbaac59dc5476ddac46a0784528460002063ffffffff421663ffffffff1982541617905560008051602061168a83398151915261148688825461137a565b9055610f42565b61149886825461137a565b905582516323b872dd60e01b92810192909252602482018490523060448301526064808301869052825260a082016001600160401b038111838210176110d2576114e29352611152565b7f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d600080a3565b8351636a76ff9f60e01b8152600490fd5b84516246613160e11b8152600481018790528481602481305afa90811561158c5760009161155f575b5061154d84610ed0565b555461155883610f09565b5538611411565b908582813d8311611585575b61157581836110af565b8101031261061857505138611543565b503d61156b565b86513d6000823e3d90fd5b908382813d83116115bd575b6115ad81836110af565b81010312610618575051386113ee565b503d6115a3565b84513d6000823e3d90fd5b90938282813d83116115f7575b6115e681836110af565b8101031261061857505192386113b8565b503d6115dc565b83513d6000823e3d90fdfe92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad572d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56bd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad571d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad573d48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56dd48875cae7c32c61030933702d7dc74d508a7c3c49fed9e91e1c0fcd6f2ad56ca2646970667358221220d9f94dc2f20d3876137862cdd319b3550fe971e18fc05401b47a0925dd16b41964736f6c63430008130033",
  "libraries": [
    "TDLib",
    "LSLib",
    "InitializerLib",
    "RolesManagementLib"
  ],
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol:LSDepositaryFacet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol:LSDepositaryFacet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 309,
        "contract": "contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol:LSDepositaryFacet",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 378,
        "contract": "contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol:LSDepositaryFacet",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 750,
        "contract": "contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol:LSDepositaryFacet",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 189,
        "contract": "contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol:LSDepositaryFacet",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 294,
        "contract": "contracts/diamonds/locusStaking/v1/LSDepositaryFacet.sol:LSDepositaryFacet",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}